{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/contexts/target-context.js\";\nimport React, { createContext, useEffect, useState } from 'react';\nimport { getMonths, roundedUpNumberAndTurnBackToNumber } from \"../utilities.js\";\nexport const TargetContext = createContext();\n\nconst TargetContextProvider = props => {\n  const [targetsAndImpact, setTargetsAndImpact] = React.useState({\n    targets: 0,\n    monthlyCoverWasteTarget: 0,\n    monthlyPrepWasteTarget: 0,\n    monthlySpoilageWasteTarget: 0,\n    mealsSavings: 0,\n    co2Reduction: 0,\n    moneySavings: 0,\n    totalMonthlyForecasts: 0,\n    totalShortFall: 0,\n    coverWasteShortFall: 0,\n    prepWasteShortFall: 0,\n    spoilageWasteShortFall: 0,\n    targetIsRealistic: 0,\n    percentaged: 0\n  });\n  const [prevMonthWaste, setPrevMonthWaste] = React.useState(0);\n  const [showPercentagedWarning, setShowPercentagedWarning] = React.useState(false);\n  const labels = [\"Yearly\", \"Weekly\", \"Daily\", \"Monthly\"];\n  const [label, setLabel] = React.useState(null);\n  const [percent, setPercent] = React.useState(0);\n  const [activeState, changeActiveState] = useState({\n    monthlyTargets: true,\n    weeklyTargets: false,\n    dailyTargets: false,\n    yearlyTargets: false\n  });\n  const [dailyCoverWaste, setDailyCoverWaste] = React.useState([0]);\n  const [dailyPrepWaste, setDailyPrepWaste] = React.useState([0]);\n  const [dailySpoilageWaste, setDailySpoilageWaste] = React.useState([0]);\n  const [monthlyCoverWaste, setMonthlyCoverWaste] = React.useState([0]);\n  const [monthlyPrepWaste, setMonthlyPrepWaste] = React.useState([0]);\n  const [monthlySpoilageWaste, setMonthlySpoilageWaste] = React.useState([0]);\n  const [weeklyCoverWaste, setWeeklyCoverWaste] = React.useState([0]);\n  const [weeklyPrepWaste, setWeeklyPrepWaste] = React.useState([0]);\n  const [weeklySpoilageWaste, setWeeklySpoilageWaste] = React.useState([0]);\n  const [yearlyCoverWaste, setYearlyCoverWaste] = React.useState([0]);\n  const [yearlyPrepWaste, setYearlyPrepWaste] = React.useState([0]);\n  const [yearlySpoilageWaste, setYearlySpoilageWaste] = React.useState([0]);\n  useEffect(() => {\n    changeActiveState({\n      monthlyTargets: true,\n      weeklyTargets: false,\n      dailyTargets: false,\n      yearlyTargets: false\n    }); // console.log(\"props.recommendedTargets\",props.recommendedTargets)\n\n    if (props.recommendedTargets.length > 0 && props.aiPredictionsData.length > 0) {\n      let percentaged;\n      let cw;\n      let pw;\n      let sw;\n      props.recommendedTargets.map(data => {\n        const percentagedAsString = data.recommendedTargets.targets.percents;\n        percentaged = parseInt(percentagedAsString) / 100;\n        return \"\";\n      });\n      setPercent(percentaged); // console.log(\"percentaged\",percentaged)\n      // console.log(\"aiPredictionsData\", props.aiPredictionsData)\n\n      props.aiPredictionsData.map(data => {\n        cw = data.aiPrediction.monthlyForcastsBasedOnCurrentMonth.coverWaste;\n        pw = data.aiPrediction.monthlyForcastsBasedOnCurrentMonth.preparationWaste;\n        sw = data.aiPrediction.monthlyForcastsBasedOnCurrentMonth.spoilageWaste;\n        setDailyCoverWaste(data.aiPrediction.dailyForcastsBasedOnCurrentMonth.coverWaste);\n        setDailyPrepWaste(data.aiPrediction.dailyForcastsBasedOnCurrentMonth.preparationWaste);\n        setDailySpoilageWaste(data.aiPrediction.dailyForcastsBasedOnCurrentMonth.spoilageWaste);\n        setMonthlyCoverWaste(data.aiPrediction.monthlyForcastsBasedOnCurrentMonth.coverWaste);\n        setMonthlyPrepWaste(data.aiPrediction.monthlyForcastsBasedOnCurrentMonth.preparationWaste);\n        setMonthlySpoilageWaste(data.aiPrediction.monthlyForcastsBasedOnCurrentMonth.spoilageWaste);\n        setWeeklyCoverWaste(data.aiPrediction.weeklylyForcastsBasedOnCurrentMonth.coverWaste);\n        setWeeklyPrepWaste(data.aiPrediction.weeklylyForcastsBasedOnCurrentMonth.preparationWaste);\n        setWeeklySpoilageWaste(data.aiPrediction.weeklylyForcastsBasedOnCurrentMonth.spoilageWaste);\n        setYearlyCoverWaste(data.aiPrediction.yearlyForcastsBasedOnCurrentMonth.coverWaste);\n        setYearlyPrepWaste(data.aiPrediction.yearlyForcastsBasedOnCurrentMonth.preparationWaste);\n        setYearlySpoilageWaste(data.aiPrediction.yearlyForcastsBasedOnCurrentMonth.spoilageWaste);\n        return \"\";\n      });\n      const getTargetsAndImpact = calculateTargetsAndImpact(cw, pw, sw, percentaged);\n      setTargetsAndImpact(getTargetsAndImpact);\n      const monthNumber = getMonths();\n      const prevMonthIndex = monthNumber - 1;\n      const previousMonthCoverWaste = props.currentMonthCoverWasteArray[prevMonthIndex];\n      const previousMonthPrepWaste = props.currentMonthPrepWasteArray[prevMonthIndex];\n      const previousMonthSpoilageWaste = props.currentMonthSpoilageWasteArray[prevMonthIndex];\n      const totalPreviousMonthsWaste = previousMonthCoverWaste + previousMonthPrepWaste + previousMonthSpoilageWaste;\n      setPrevMonthWaste(totalPreviousMonthsWaste);\n\n      if (percentaged > 0.3) {\n        setShowPercentagedWarning(true);\n      } else {\n        setShowPercentagedWarning(false);\n      }\n\n      setLabel(labels[3]);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [props.aiPredictionsData, props.recommendedTargets, props.currentMonthCoverWasteArray, props.currentMonthPrepWasteArray, props.currentMonthSpoilageWasteArray]);\n\n  const calculateTargetsAndImpact = (cover, prep, spoilage, percent) => {\n    // console.log(\"ai cover array\",cover)\n    // console.log(\"ai prep array\",prep)\n    // console.log(\"ai spoilage array\",spoilage)\n    // console.log(\"percent from recommendedTargets\",percent)\n    const monthIndex = cover.length - 1;\n    let percentaged = isNaN(percent) ? 0 : percent;\n    const coverWaste = cover[monthIndex] ? cover[monthIndex] : 0;\n    const prepWaste = prep[monthIndex] ? prep[monthIndex] : 0;\n    const spoilageWaste = spoilage[monthIndex] ? spoilage[monthIndex] : 0; // console.log(\"current month ai prediction cover\",cover[monthIndex])\n    // console.log(\"current month ai prediction prep\",prep[monthIndex])\n    // console.log(\"current month ai prediction spoilage\",spoilage[monthIndex])\n\n    const totalMonthlyForecasts = coverWaste + prepWaste + spoilageWaste; // console.log(\"current month ai prediction spoilage for ALL\",totalMonthlyForecasts)\n\n    const savings = parseInt(totalMonthlyForecasts * percentaged); // console.log(\"percentaged savings from ai prediction for all\",savings)\n\n    const targets = totalMonthlyForecasts - savings; // console.log(\"targets for this month to achieve the percentaged savings\", targets)\n    // console.log(\"totalMonthlyForecasts\",totalMonthlyForecasts)\n    // console.log(\"savings\",savings)\n    // console.log(\"targets\",targets)\n\n    const coverWastePercentagedSavings = coverWaste * percentaged;\n    const prepWastePercentagedSavings = prepWaste * percentaged;\n    const spoilageWastePercentagedSavings = spoilageWaste * percentaged;\n    const monthlyCoverWasteTarget = coverWaste - coverWastePercentagedSavings;\n    const monthlyPrepWasteTarget = prepWaste - prepWastePercentagedSavings;\n    const monthlySpoilageWasteTarget = spoilageWaste - spoilageWastePercentagedSavings;\n    const totalTarget = roundedUpNumberAndTurnBackToNumber(monthlyCoverWasteTarget + monthlyPrepWasteTarget + monthlySpoilageWasteTarget); // console.log(\"totalTarget\",totalTarget)\n\n    const coverWasteShortFall = roundedUpNumberAndTurnBackToNumber(monthlyCoverWasteTarget - coverWaste);\n    const prepWasteShortFall = roundedUpNumberAndTurnBackToNumber(monthlyPrepWasteTarget - prepWaste);\n    const spoilageWasteShortFall = roundedUpNumberAndTurnBackToNumber(monthlySpoilageWasteTarget - spoilageWaste);\n    const totalShortFall = roundedUpNumberAndTurnBackToNumber(coverWasteShortFall + prepWasteShortFall + spoilageWasteShortFall);\n    const carbonMunicipalValue = parseFloat(props.carbonMunicipalValue);\n    const mealsSavings = roundedUpNumberAndTurnBackToNumber(savings / 0.36);\n    const co2Reduction = roundedUpNumberAndTurnBackToNumber(savings * carbonMunicipalValue);\n    const moneySavings = roundedUpNumberAndTurnBackToNumber(savings * 2.775);\n    const differencesBetweenTargetAndForcastedWaste = totalTarget - totalMonthlyForecasts;\n    let targetIsRealistic;\n\n    if (differencesBetweenTargetAndForcastedWaste < 0) {\n      targetIsRealistic = false;\n    } else {\n      targetIsRealistic = true;\n    }\n\n    const data = {\n      targets: targets,\n      monthlyCoverWasteTarget: monthlyCoverWasteTarget,\n      monthlyPrepWasteTarget: monthlyPrepWasteTarget,\n      monthlySpoilageWasteTarget: monthlySpoilageWasteTarget,\n      mealsSavings: mealsSavings,\n      co2Reduction: co2Reduction,\n      moneySavings: moneySavings,\n      percentaged: percentaged,\n      totalMonthlyForecasts: totalMonthlyForecasts,\n      totalShortFall: totalShortFall,\n      coverWasteShortFall: coverWasteShortFall,\n      prepWasteShortFall: prepWasteShortFall,\n      spoilageWasteShortFall: spoilageWasteShortFall,\n      targetIsRealistic: targetIsRealistic\n    };\n    return data;\n  };\n\n  function toggleActive(type) {\n    switch (type) {\n      case \"monthlyTargets\":\n        changeActiveState({\n          monthlyTargets: true,\n          weeklyTargets: false,\n          dailyTargets: false,\n          yearlyTargets: false\n        });\n        let getMonthlyTargetsAndImpact = calculateTargetsAndImpact(monthlyCoverWaste, monthlyPrepWaste, monthlySpoilageWaste, percent);\n        setTargetsAndImpact(getMonthlyTargetsAndImpact);\n        setLabel(labels[3]);\n        break;\n\n      case \"weeklyTargets\":\n        changeActiveState({\n          monthlyTargets: false,\n          weeklyTargets: true,\n          dailyTargets: false,\n          yearlyTargets: false\n        });\n        let getWeeklyTargetsAndImpact = calculateTargetsAndImpact(weeklyCoverWaste, weeklyPrepWaste, weeklySpoilageWaste, percent);\n        setTargetsAndImpact(getWeeklyTargetsAndImpact);\n        setLabel(labels[1]);\n        break;\n\n      case \"dailyTargets\":\n        changeActiveState({\n          monthlyTargets: false,\n          weeklyTargets: false,\n          dailyTargets: true,\n          yearlyTargets: false\n        });\n        let getDailyTargetsAndImpact = calculateTargetsAndImpact(dailyCoverWaste, dailyPrepWaste, dailySpoilageWaste, percent);\n        setTargetsAndImpact(getDailyTargetsAndImpact);\n        setLabel(labels[2]);\n        break;\n\n      case \"yearlyTargets\":\n        changeActiveState({\n          monthlyTargets: false,\n          weeklyTargets: false,\n          dailyTargets: false,\n          yearlyTargets: true\n        });\n        let getYearlyTargetsAndImpact = calculateTargetsAndImpact(yearlyCoverWaste, yearlyPrepWaste, yearlySpoilageWaste, percent);\n        setTargetsAndImpact(getYearlyTargetsAndImpact);\n        setLabel(labels[0]);\n        break;\n\n      default:\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(TargetContext.Provider, {\n    value: {\n      targetsAndImpact,\n      prevMonthWaste,\n      showPercentagedWarning,\n      label,\n      toggleActive,\n      activeState\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default TargetContextProvider;","map":{"version":3,"sources":["/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/contexts/target-context.js"],"names":["React","createContext","useEffect","useState","getMonths","roundedUpNumberAndTurnBackToNumber","TargetContext","TargetContextProvider","props","targetsAndImpact","setTargetsAndImpact","targets","monthlyCoverWasteTarget","monthlyPrepWasteTarget","monthlySpoilageWasteTarget","mealsSavings","co2Reduction","moneySavings","totalMonthlyForecasts","totalShortFall","coverWasteShortFall","prepWasteShortFall","spoilageWasteShortFall","targetIsRealistic","percentaged","prevMonthWaste","setPrevMonthWaste","showPercentagedWarning","setShowPercentagedWarning","labels","label","setLabel","percent","setPercent","activeState","changeActiveState","monthlyTargets","weeklyTargets","dailyTargets","yearlyTargets","dailyCoverWaste","setDailyCoverWaste","dailyPrepWaste","setDailyPrepWaste","dailySpoilageWaste","setDailySpoilageWaste","monthlyCoverWaste","setMonthlyCoverWaste","monthlyPrepWaste","setMonthlyPrepWaste","monthlySpoilageWaste","setMonthlySpoilageWaste","weeklyCoverWaste","setWeeklyCoverWaste","weeklyPrepWaste","setWeeklyPrepWaste","weeklySpoilageWaste","setWeeklySpoilageWaste","yearlyCoverWaste","setYearlyCoverWaste","yearlyPrepWaste","setYearlyPrepWaste","yearlySpoilageWaste","setYearlySpoilageWaste","recommendedTargets","length","aiPredictionsData","cw","pw","sw","map","data","percentagedAsString","percents","parseInt","aiPrediction","monthlyForcastsBasedOnCurrentMonth","coverWaste","preparationWaste","spoilageWaste","dailyForcastsBasedOnCurrentMonth","weeklylyForcastsBasedOnCurrentMonth","yearlyForcastsBasedOnCurrentMonth","getTargetsAndImpact","calculateTargetsAndImpact","monthNumber","prevMonthIndex","previousMonthCoverWaste","currentMonthCoverWasteArray","previousMonthPrepWaste","currentMonthPrepWasteArray","previousMonthSpoilageWaste","currentMonthSpoilageWasteArray","totalPreviousMonthsWaste","cover","prep","spoilage","monthIndex","isNaN","prepWaste","savings","coverWastePercentagedSavings","prepWastePercentagedSavings","spoilageWastePercentagedSavings","totalTarget","carbonMunicipalValue","parseFloat","differencesBetweenTargetAndForcastedWaste","toggleActive","type","getMonthlyTargetsAndImpact","getWeeklyTargetsAndImpact","getDailyTargetsAndImpact","getYearlyTargetsAndImpact","children"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from 'react'\nimport {\n  getMonths,\n  roundedUpNumberAndTurnBackToNumber\n} from \"../utilities.js\"\n\nexport const TargetContext = createContext()\n\n\nconst TargetContextProvider = props => {\n\n    const [ targetsAndImpact, setTargetsAndImpact ] = React.useState({\n        targets: 0,\n        monthlyCoverWasteTarget: 0,\n        monthlyPrepWasteTarget: 0,\n        monthlySpoilageWasteTarget: 0,\n        mealsSavings: 0,\n        co2Reduction: 0,\n        moneySavings: 0,\n        totalMonthlyForecasts: 0,\n        totalShortFall: 0,\n        coverWasteShortFall: 0,\n        prepWasteShortFall: 0,\n        spoilageWasteShortFall: 0,\n        targetIsRealistic: 0,\n        percentaged: 0\n    })\n\n    const [ prevMonthWaste, setPrevMonthWaste ] = React.useState(0)\n\n    const [ showPercentagedWarning , setShowPercentagedWarning] = React.useState(false)\n\n    const labels = [\"Yearly\", \"Weekly\", \"Daily\", \"Monthly\"]\n    const [ label, setLabel] = React.useState(null)\n\n    const [ percent, setPercent] = React.useState(0)\n\n    const [activeState, changeActiveState] = useState({\n        monthlyTargets: true,\n        weeklyTargets: false,\n        dailyTargets: false,\n        yearlyTargets: false,\n    });\n\n    const [ dailyCoverWaste, setDailyCoverWaste] = React.useState([0])\n    const [ dailyPrepWaste, setDailyPrepWaste] = React.useState([0])\n    const [ dailySpoilageWaste, setDailySpoilageWaste] = React.useState([0])\n\n    const [ monthlyCoverWaste, setMonthlyCoverWaste] = React.useState([0])\n    const [ monthlyPrepWaste, setMonthlyPrepWaste] = React.useState([0])\n    const [ monthlySpoilageWaste, setMonthlySpoilageWaste] = React.useState([0])\n\n    const [ weeklyCoverWaste, setWeeklyCoverWaste] = React.useState([0])\n    const [ weeklyPrepWaste, setWeeklyPrepWaste] = React.useState([0])\n    const [ weeklySpoilageWaste, setWeeklySpoilageWaste] = React.useState([0])\n\n    const [ yearlyCoverWaste, setYearlyCoverWaste] = React.useState([0])\n    const [ yearlyPrepWaste, setYearlyPrepWaste] = React.useState([0])\n    const [ yearlySpoilageWaste, setYearlySpoilageWaste] = React.useState([0])\n\n\n    useEffect(() => {\n\n          changeActiveState({\n            monthlyTargets: true,\n            weeklyTargets: false,\n            dailyTargets: false,\n            yearlyTargets: false,\n          });\n\n          // console.log(\"props.recommendedTargets\",props.recommendedTargets)\n\n          if (props.recommendedTargets.length > 0 && props.aiPredictionsData.length > 0) {\n            let percentaged;\n            let cw;\n            let pw;\n            let sw;\n\n            props.recommendedTargets.map((data) => {\n                const percentagedAsString = data.recommendedTargets.targets.percents\n                percentaged = parseInt(percentagedAsString) / 100\n                return \"\"\n            });\n\n            setPercent(percentaged)\n\n            // console.log(\"percentaged\",percentaged)\n            // console.log(\"aiPredictionsData\", props.aiPredictionsData)\n\n            props.aiPredictionsData.map((data) => {\n\n                cw = data.aiPrediction.monthlyForcastsBasedOnCurrentMonth.coverWaste\n                pw = data.aiPrediction.monthlyForcastsBasedOnCurrentMonth.preparationWaste\n                sw = data.aiPrediction.monthlyForcastsBasedOnCurrentMonth.spoilageWaste\n\n                setDailyCoverWaste(data.aiPrediction.dailyForcastsBasedOnCurrentMonth.coverWaste)\n                setDailyPrepWaste(data.aiPrediction.dailyForcastsBasedOnCurrentMonth.preparationWaste)\n                setDailySpoilageWaste(data.aiPrediction.dailyForcastsBasedOnCurrentMonth.spoilageWaste)\n\n                setMonthlyCoverWaste(data.aiPrediction.monthlyForcastsBasedOnCurrentMonth.coverWaste)\n                setMonthlyPrepWaste(data.aiPrediction.monthlyForcastsBasedOnCurrentMonth.preparationWaste)\n                setMonthlySpoilageWaste(data.aiPrediction.monthlyForcastsBasedOnCurrentMonth.spoilageWaste)\n\n                setWeeklyCoverWaste(data.aiPrediction.weeklylyForcastsBasedOnCurrentMonth.coverWaste)\n                setWeeklyPrepWaste(data.aiPrediction.weeklylyForcastsBasedOnCurrentMonth.preparationWaste)\n                setWeeklySpoilageWaste(data.aiPrediction.weeklylyForcastsBasedOnCurrentMonth.spoilageWaste)\n\n                setYearlyCoverWaste(data.aiPrediction.yearlyForcastsBasedOnCurrentMonth.coverWaste)\n                setYearlyPrepWaste(data.aiPrediction.yearlyForcastsBasedOnCurrentMonth.preparationWaste)\n                setYearlySpoilageWaste(data.aiPrediction.yearlyForcastsBasedOnCurrentMonth.spoilageWaste)\n                return \"\"\n            });\n\n            const getTargetsAndImpact = calculateTargetsAndImpact(cw, pw, sw, percentaged);\n            setTargetsAndImpact(getTargetsAndImpact)\n\n            const monthNumber = getMonths();\n            const prevMonthIndex = monthNumber - 1;\n\n            const previousMonthCoverWaste =  props.currentMonthCoverWasteArray[prevMonthIndex]\n            const previousMonthPrepWaste =  props.currentMonthPrepWasteArray[prevMonthIndex]\n            const previousMonthSpoilageWaste =  props.currentMonthSpoilageWasteArray[prevMonthIndex]\n            const totalPreviousMonthsWaste = previousMonthCoverWaste + previousMonthPrepWaste + previousMonthSpoilageWaste\n            setPrevMonthWaste(totalPreviousMonthsWaste)\n\n            if (percentaged > 0.3) {\n                setShowPercentagedWarning(true)\n            } else {\n                setShowPercentagedWarning(false)\n            }\n\n            setLabel(labels[3])\n        }\n                // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[\n        props.aiPredictionsData,\n        props.recommendedTargets,\n        props.currentMonthCoverWasteArray,\n        props.currentMonthPrepWasteArray,\n        props.currentMonthSpoilageWasteArray\n    ])\n\n    const calculateTargetsAndImpact = (cover, prep, spoilage, percent) => {\n\n        // console.log(\"ai cover array\",cover)\n        // console.log(\"ai prep array\",prep)\n        // console.log(\"ai spoilage array\",spoilage)\n        // console.log(\"percent from recommendedTargets\",percent)\n\n        const monthIndex = cover.length - 1;\n\n        let percentaged = isNaN(percent) ? 0 : percent;\n\n        const coverWaste = cover[monthIndex] ? cover[monthIndex] : 0;\n        const prepWaste = prep[monthIndex] ? prep[monthIndex] : 0;\n        const spoilageWaste = spoilage[monthIndex] ? spoilage[monthIndex] : 0;\n\n        // console.log(\"current month ai prediction cover\",cover[monthIndex])\n        // console.log(\"current month ai prediction prep\",prep[monthIndex])\n        // console.log(\"current month ai prediction spoilage\",spoilage[monthIndex])\n\n        const totalMonthlyForecasts = coverWaste + prepWaste + spoilageWaste\n        // console.log(\"current month ai prediction spoilage for ALL\",totalMonthlyForecasts)\n\n        const savings = parseInt(totalMonthlyForecasts * percentaged)\n        // console.log(\"percentaged savings from ai prediction for all\",savings)\n\n        const targets = totalMonthlyForecasts - savings;\n        // console.log(\"targets for this month to achieve the percentaged savings\", targets)\n\n        // console.log(\"totalMonthlyForecasts\",totalMonthlyForecasts)\n        // console.log(\"savings\",savings)\n        // console.log(\"targets\",targets)\n\n        const coverWastePercentagedSavings = coverWaste * percentaged;\n        const prepWastePercentagedSavings = prepWaste * percentaged;\n        const spoilageWastePercentagedSavings = spoilageWaste * percentaged;\n\n        const monthlyCoverWasteTarget = coverWaste- coverWastePercentagedSavings\n        const monthlyPrepWasteTarget = prepWaste - prepWastePercentagedSavings\n        const monthlySpoilageWasteTarget = spoilageWaste - spoilageWastePercentagedSavings\n\n        const totalTarget = roundedUpNumberAndTurnBackToNumber(monthlyCoverWasteTarget + monthlyPrepWasteTarget + monthlySpoilageWasteTarget)\n\n        // console.log(\"totalTarget\",totalTarget)\n\n        const coverWasteShortFall = roundedUpNumberAndTurnBackToNumber(monthlyCoverWasteTarget - coverWaste)\n        const prepWasteShortFall = roundedUpNumberAndTurnBackToNumber(monthlyPrepWasteTarget - prepWaste)\n        const spoilageWasteShortFall = roundedUpNumberAndTurnBackToNumber(monthlySpoilageWasteTarget - spoilageWaste)\n        const totalShortFall = roundedUpNumberAndTurnBackToNumber(coverWasteShortFall + prepWasteShortFall + spoilageWasteShortFall)\n\n        const carbonMunicipalValue = parseFloat(props.carbonMunicipalValue);\n\n        const mealsSavings = roundedUpNumberAndTurnBackToNumber(savings / 0.36)\n        const co2Reduction = roundedUpNumberAndTurnBackToNumber(savings * carbonMunicipalValue)\n        const moneySavings = roundedUpNumberAndTurnBackToNumber(savings * 2.775)\n\n        const differencesBetweenTargetAndForcastedWaste = totalTarget - totalMonthlyForecasts\n\n        let targetIsRealistic;\n\n        if (differencesBetweenTargetAndForcastedWaste < 0) {\n          targetIsRealistic = false\n        } else {\n          targetIsRealistic = true\n        }\n\n        const data = {\n          targets: targets,\n          monthlyCoverWasteTarget: monthlyCoverWasteTarget,\n          monthlyPrepWasteTarget: monthlyPrepWasteTarget,\n          monthlySpoilageWasteTarget: monthlySpoilageWasteTarget,\n          mealsSavings: mealsSavings,\n          co2Reduction: co2Reduction,\n          moneySavings: moneySavings,\n          percentaged: percentaged,\n          totalMonthlyForecasts: totalMonthlyForecasts,\n          totalShortFall: totalShortFall,\n          coverWasteShortFall: coverWasteShortFall,\n          prepWasteShortFall: prepWasteShortFall,\n          spoilageWasteShortFall: spoilageWasteShortFall,\n          targetIsRealistic: targetIsRealistic\n        }\n\n        return data\n    }\n\n    function toggleActive(type) {\n        switch (type) {\n          case \"monthlyTargets\":\n            changeActiveState({\n              monthlyTargets: true,\n              weeklyTargets: false,\n              dailyTargets: false,\n              yearlyTargets: false,\n            });\n\n            let getMonthlyTargetsAndImpact = calculateTargetsAndImpact(monthlyCoverWaste,monthlyPrepWaste, monthlySpoilageWaste, percent)\n            setTargetsAndImpact(getMonthlyTargetsAndImpact)\n\n            setLabel(labels[3])\n\n            break;\n          case \"weeklyTargets\":\n            changeActiveState({\n              monthlyTargets: false,\n              weeklyTargets: true,\n              dailyTargets: false,\n              yearlyTargets: false,\n            });\n\n            let getWeeklyTargetsAndImpact = calculateTargetsAndImpact(weeklyCoverWaste,weeklyPrepWaste, weeklySpoilageWaste, percent)\n            setTargetsAndImpact(getWeeklyTargetsAndImpact)\n\n            setLabel(labels[1])\n\n            break;\n          case \"dailyTargets\":\n            changeActiveState({\n              monthlyTargets: false,\n              weeklyTargets: false,\n              dailyTargets: true,\n              yearlyTargets: false,\n            });\n\n            let getDailyTargetsAndImpact = calculateTargetsAndImpact(dailyCoverWaste,dailyPrepWaste, dailySpoilageWaste, percent)\n            setTargetsAndImpact(getDailyTargetsAndImpact)\n\n            setLabel(labels[2])\n\n            break;\n          case \"yearlyTargets\":\n            changeActiveState({\n              monthlyTargets: false,\n              weeklyTargets: false,\n              dailyTargets: false,\n              yearlyTargets: true,\n            });\n\n            let getYearlyTargetsAndImpact = calculateTargetsAndImpact(yearlyCoverWaste,yearlyPrepWaste, yearlySpoilageWaste, percent)\n            setTargetsAndImpact(getYearlyTargetsAndImpact)\n\n            setLabel(labels[0])\n\n            break;\n          default:\n        }\n      }\n\n    return (\n        <TargetContext.Provider\n        value={{\n            targetsAndImpact,\n            prevMonthWaste,\n            showPercentagedWarning,\n            label,\n            toggleActive,\n            activeState\n        }}\n        >\n        {props.children}\n        </TargetContext.Provider>\n    )\n}\n\nexport default TargetContextProvider\n"]},"metadata":{},"sourceType":"module"}