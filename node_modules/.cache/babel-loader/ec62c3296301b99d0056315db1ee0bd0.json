{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/CODE/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/reports/daily-waste-report.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport Chart from \"chart.js\";\nimport \"chartjs-plugin-annotation\";\nimport \"chartjs-plugin-datalabels\";\nimport { wasteDailyDateRange, roundedUpNumberAndTurnBackToNumber } from \"../../../../utilities\";\nimport useWindowDimensions from \"../../libs/use-window-dimensions\";\nimport { DailyWasteContext } from \"../../../../contexts/daily-waste-context\"; // import { HourlyWasteContext } from \"../../../../contexts/hourly-waste-context\";\n\nimport { WasteCapContext } from \"../../../../contexts/waste-cap-context\";\nimport { HourlyFoodWasteContext } from \"../../../../contexts/hourly-food-waste-context\";\nimport { AccordionHeading, AccordionBody } from \"../accordion\";\nimport { InputsContext } from \"../../../../contexts/inputs-context\";\nexport default function DailyWasteChart(props) {\n  Chart.defaults.global.defaultFontFamily = \"CooperHewitt-Book\";\n  const {\n    thisWeekCoverInputs\n  } = useContext(InputsContext);\n  const {\n    dailyCoverWastes,\n    dailySpoliageWastes,\n    dailyPeparationWastes\n  } = useContext(WasteCapContext);\n  const targets = {\n    dailyCoverWastes,\n    dailySpoliageWastes,\n    dailyPeparationWastes\n  };\n  let chartReference = {};\n  const {\n    coverWaste,\n    prepWaste,\n    spoilageWaste,\n    getIndexesForBackgroundColours,\n    dailyWasteData\n  } = useContext(DailyWasteContext);\n  const {\n    allHourlyWasteData,\n    handleHourlyWaste,\n    index\n  } = useContext(HourlyFoodWasteContext);\n  const [coverWasteData, setCoverWaste] = useState([]);\n  const [prepWasteData, setPrepWaste] = useState([]);\n  const [spoilageWasteData, setSpoilageWaste] = useState([]);\n  const [totalWasteData, setDailyWasteData] = useState([]);\n  const [totalCappingInPounds, setTotalCappingInPounds] = useState([]);\n  const [dailyWasteCappingInPounds, setDailyWasteCappingInPounds] = useState([]);\n  const [prepWasteCappingInPounds, setPrepWasteCappingInPounds] = useState([]);\n  const [spoilageWasteCappingInPounds, setSpoilageWasteCappingInPounds] = useState([]);\n  let dailyCoverWastesCap = dailyCoverWastes ? dailyCoverWastes : 0;\n  let dailySpoliageWastesCap = dailySpoliageWastes ? dailySpoliageWastes : 0;\n  let dailyPeparationWastesCap = dailyPeparationWastes ? dailyPeparationWastes : 0;\n  const formatedDate = JSON.parse(localStorage.getItem('formatedXaxis')) || [];\n  const dailyChartXaxis = JSON.parse(localStorage.getItem('dailyChartXaxis')) || [];\n  const [checkBox, setCheckBox] = useState([0, 0, 0, 0, 0, 0, 0]); // const initialStateForDailyChartXaxis = JSON.parse(localStorage.getItem('dailyChartXaxis')) || []\n  // const initialStateForFormatedDate = JSON.parse(localStorage.getItem('formatedXaxis')) || []\n  // const [dailyChartXaxis, setDateLabels] = useState(initialStateForDailyChartXaxis);\n  // const [formatedDate, setFormatedDate] = useState(initialStateForFormatedDate);\n\n  useEffect(() => {\n    // const formatedDate = JSON.parse(localStorage.getItem('formatedXaxis')) || []\n    // const dailyChartXaxis = JSON.parse(localStorage.getItem('dailyChartXaxis')) || []\n    // setDateLabels(props.weeklyDailyRange)\n    // setFormatedDate(props.weeklyDailyLabels)\n    // console.log(\"thisWeekCoverInputs\",thisWeekCoverInputs);\n    // console.log(\"thisWeekCoverInputs\",thisWeekCoverInputs.checkBox);\n    if (thisWeekCoverInputs !== undefined) {\n      setCheckBox(thisWeekCoverInputs.checkBox);\n    }\n\n    setCoverWaste(coverWaste);\n    setPrepWaste(prepWaste);\n    setSpoilageWaste(spoilageWaste);\n    setDailyWasteData(dailyWasteData);\n    const totalCappings = dailyCoverWastesCap + dailyPeparationWastesCap + dailySpoliageWastesCap;\n    const totalWarningInPounds = roundedUpNumberAndTurnBackToNumber(totalCappings * 2.775);\n    setTotalCappingInPounds(totalWarningInPounds);\n    const dailyWasteWarningInPounds = roundedUpNumberAndTurnBackToNumber(dailyCoverWastesCap * 2.775);\n    const prepWasteWarningInPounds = roundedUpNumberAndTurnBackToNumber(dailyPeparationWastesCap * 2.775);\n    const spoilageWasteWarningInPounds = roundedUpNumberAndTurnBackToNumber(dailySpoliageWastesCap * 2.775);\n    setDailyWasteCappingInPounds(dailyWasteWarningInPounds);\n    setPrepWasteCappingInPounds(prepWasteWarningInPounds);\n    setSpoilageWasteCappingInPounds(spoilageWasteWarningInPounds); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [prepWaste, coverWaste, spoilageWaste, dailyWasteData, props]); // console.log(\"dailyCoverWastesCap\",dailyCoverWastesCap)\n  // console.log(\"dailySpoliageWastesCap\",dailySpoliageWastesCap)\n  // console.log(\"dailyPeparationWastesCap\",dailyPeparationWastesCap)\n  // console.log(\"dailyWasteWarningInPounds\",dailyWasteCappingInPounds)\n  // console.log(\"prepWasteWarningInPounds\",prepWasteCappingInPounds)\n  // console.log(\"spoilageWasteWarningInPounds\",spoilageWasteCappingInPounds)\n  // console.log(\"props.showPounds\", props.showPounds)\n\n  let background = [\"rgba(255, 255, 255, 0.4)\", \"rgba(255, 255, 255, 0.4)\", \"rgba(255, 255, 255, 0.4)\", \"rgba(255, 255, 255, 0.4)\", \"rgba(255, 255, 255, 0.4)\", \"rgba(255, 255, 255, 0.4)\", \"rgba(255, 255, 255, 0.4)\"];\n\n  if (checkBox !== undefined) {\n    checkBox.map((data, index) => {\n      if (data === 1) {\n        background[index] = \"rgba(242, 240, 196, 0.4)\";\n      }\n\n      return;\n    });\n  }\n\n  if (index > 0) {\n    background[index] = \"rgba(106, 217, 123, 0.2)\";\n  } else if (index === 0) {\n    background[index] = \"rgba(106, 217, 123, 0.2)\";\n  }\n\n  let coverWasteBackgroundColours = [\"rgb(140, 112, 140)\", \"rgb(140, 112, 140)\", \"rgb(140, 112, 140)\", \"rgb(140, 112, 140)\", \"rgb(140, 112, 140)\", \"rgb(140, 112, 140)\", \"rgb(140, 112, 140)\"];\n  let spoilageWasteBackgroundColours = [\"#ff8c00\", \"#ff8c00\", \"#ff8c00\", \"#ff8c00\", \"#ff8c00\", \"#ff8c00\", \"#ff8c00\"];\n  let prepWasteBackgroundColours = [\"rgb(133, 165, 101)\", \"rgb(133, 165, 101)\", \"rgb(133, 165, 101)\", \"rgb(133, 165, 101)\", \"rgb(133, 165, 101)\", \"rgb(133, 165, 101)\", \"rgb(133, 165, 101)\"];\n  let indexes;\n\n  if (targets) {\n    indexes = getIndexesForBackgroundColours(targets);\n  }\n\n  if (indexes) {\n    indexes.coverWasteOverTargetIndexArray.map(data => {\n      coverWasteBackgroundColours[data] = \"rgba(255, 0, 0, 0.9)\";\n      return \"\";\n    });\n    indexes.spoilageWasteOverTargetIndexArray.map(data => {\n      spoilageWasteBackgroundColours[data] = \"rgba(255, 0, 0, 0.9)\";\n      return \"\";\n    });\n    indexes.prepWasteOverTargetIndexArray.map(data => {\n      prepWasteBackgroundColours[data] = \"rgba(255, 0, 0, 0.9)\";\n      return \"\";\n    });\n  } // console.log(\"dailyChartXaxis\",dailyChartXaxis)\n\n\n  let dateRangeLable = wasteDailyDateRange(dailyChartXaxis); // console.log(\"dateRangeLable\",dateRangeLable)\n\n  const {\n    width\n  } = useWindowDimensions();\n  let dailyWasteHeight = 120;\n  let dailyWasteWidth = 400;\n  let CSPlabelFont = 10;\n  let totalLabelFont = 12;\n\n  if (width <= 700) {\n    dailyWasteWidth = 260;\n    dailyWasteHeight = 179;\n    totalLabelFont = 8;\n    CSPlabelFont = 8 * 0.6;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: props.hideReport ? \"dailyWasteChart displayNone\" : \"dailyWasteChart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AccordionHeading, {\n    color: \"primPurpleBackgroundColor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }\n  }, \"DAILY WASTE\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    onClick: () => props.handleChangeForCheckedAndAccordion(!props.showDailyChart, \"dailyChartSwitch\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }\n  }, props.showDailyChart ? \"X\" : \"| | | \"))), /*#__PURE__*/React.createElement(AccordionBody, {\n    open: props.showDailyChart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: props.showDarkTheme ? \"darkTheme__reportBackgroundColor addPaddingOfHalveRem addHeightOfFithyVh\" : \"originalTheme__reportBackgroundColor addPaddingOfHalveRem dailyWasteChart__height\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"report-subtitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 11\n    }\n  }, props.siteName), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dailyWasteChart__title--style\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dailyWasteChart--dateStyling\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 11\n    }\n  }, dateRangeLable), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dailyWasteChart--titleWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 17\n    }\n  }, \"DAILY WASTE\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 19\n    }\n  }, props.showPounds ? \"(£)\" : \"(Kg)\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dailyWasteChart__instructions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 17\n    }\n  }, \"Click on the bars for waste in 24hrs\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dailyWasteChart__cappingWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"capping__text applyPurpleColor cooperHewittBold capping__flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 17\n    }\n  }, \"Total\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 19\n    }\n  }, props.showPounds ? roundedUpNumberAndTurnBackToNumber(dailyWasteCappingInPounds + spoilageWasteCappingInPounds + prepWasteCappingInPounds) : roundedUpNumberAndTurnBackToNumber(dailyCoverWastesCap + dailySpoliageWastesCap + dailyPeparationWastesCap), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cooperHewittBold capping__headingCappingStyling\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 21\n    }\n  }, \"Capping =\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"capping__text applyMarginRightAndLeft applyPurpleColor cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 17\n    }\n  }, \"C\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: 1,\n    key: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: props.showDarkTheme ? \"darkTheme__numberColor\" : \"applyBlueTuckGreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 19\n    }\n  }, props.showPounds ? roundedUpNumberAndTurnBackToNumber(dailyWasteCappingInPounds) : roundedUpNumberAndTurnBackToNumber(dailyCoverWastesCap))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 17\n    }\n  }, \"+\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"capping__text applyMarginRightAndLeft applyPurpleColor cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 17\n    }\n  }, \"S\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: 2,\n    key: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: props.showDarkTheme ? \"darkTheme__numberColor\" : \"applyBlueTuckGreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 19\n    }\n  }, props.showPounds ? roundedUpNumberAndTurnBackToNumber(spoilageWasteCappingInPounds) : roundedUpNumberAndTurnBackToNumber(dailySpoliageWastesCap))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 17\n    }\n  }, \"+\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"capping__text applyMarginRightAndLeft applyPurpleColor cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 17\n    }\n  }, \"P\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: 3,\n    key: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: props.showDarkTheme ? \"darkTheme__numberColor\" : \"applyBlueTuckGreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 19\n    }\n  }, props.showPounds ? roundedUpNumberAndTurnBackToNumber(prepWasteCappingInPounds) : roundedUpNumberAndTurnBackToNumber(dailyPeparationWastesCap))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dailyWasteChart__wrapperPosition\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dailyWasteChart__chartPosition1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: [\"C  S  P\", \"C  S  P\", \"C  S  P\", \"C  S  P\", \"C  S  P\", \"C  S  P\", \"C  S  P\"],\n      datasets: [{\n        label: \"cover waste\",\n        data: props.showPounds ? coverWasteData.map(item => {\n          return (item * 2.775).toFixed(0);\n        }) : coverWasteData,\n        fill: false,\n        backgroundColor: coverWasteBackgroundColours.slice(),\n        minBarLength: 0.3,\n        barPercentage: 0.3,\n        categoryPercentage: 0.7\n      }, {\n        label: \"spoliage waste\",\n        data: props.showPounds ? spoilageWasteData.map(item => {\n          return (item * 2.775).toFixed(0);\n        }) : spoilageWasteData,\n        fill: false,\n        backgroundColor: spoilageWasteBackgroundColours.slice(),\n        minBarLength: 0.3,\n        barPercentage: 0.3,\n        categoryPercentage: 0.7\n      }, {\n        label: \"preparation waste\",\n        data: props.showPounds ? prepWasteData.map(item => {\n          return (item * 2.775).toFixed(0);\n        }) : prepWasteData,\n        fill: false,\n        backgroundColor: prepWasteBackgroundColours,\n        minBarLength: 0.3,\n        barPercentage: 0.3,\n        categoryPercentage: 0.7\n      }]\n    },\n    width: dailyWasteWidth,\n    height: dailyWasteHeight,\n    options: {\n      responsive: true,\n      maintainAspectRatio: true,\n      legend: {\n        display: false\n      },\n      scales: {\n        xAxes: [{\n          gridLines: {\n            display: false\n          },\n          ticks: {\n            fontColor: \"rgb(133, 165, 101, 0)\"\n          }\n        }],\n        yAxes: [{\n          gridLines: {\n            display: false\n          },\n          display: false,\n          ticks: {\n            beginAtZero: true\n          }\n        }]\n      },\n      plugins: {\n        datalabels: {\n          anchor: \"start\",\n          align: \"bottom\",\n          display: true,\n          backgroundColor: null,\n          borderColor: null,\n          borderRadius: 4,\n          borderWidth: 1,\n          font: {\n            size: CSPlabelFont,\n            weight: 600\n          },\n          offset: 4,\n          padding: 0,\n          color: function (context) {\n            var index = context.dataIndex;\n            var value = parseInt(context.dataset.data[index]);\n            let warningNum;\n\n            if (context.dataset.label === \"cover waste\") {\n              let warningForCoverWasteCap = dailyCoverWastesCap;\n\n              if (props.showPounds) {\n                // warningNum = Math.round(warningForCoverWasteCap * 2.775);\n                warningNum = dailyWasteCappingInPounds;\n              } else {\n                warningNum = warningForCoverWasteCap;\n              }\n\n              if (value >= warningNum) {\n                return \"rgba(255, 0, 0, 0.9)\";\n              } else if (value === 0) {\n                return \"rgba(255, 255, 255, 0)\";\n              } else {\n                // return \"rgba(133, 165, 101, 1)\";\n                if (props.showDarkTheme) {\n                  return \"rgb(255, 231, 227)\";\n                } else {\n                  return \"rgba(133, 165, 101, 1)\";\n                }\n              }\n            }\n\n            if (context.dataset.label === \"preparation waste\") {\n              let warningForPreparationWasteCap = dailyPeparationWastesCap;\n\n              if (props.showPounds) {\n                // warningNum = Math.round(warningForPreparationWasteCap * 2.775);\n                warningNum = prepWasteCappingInPounds;\n              } else {\n                warningNum = warningForPreparationWasteCap;\n              }\n\n              if (value >= warningNum) {\n                return \"rgba(255, 0, 0, 0.9)\";\n              } else if (value === 0) {\n                return \"rgba(255, 255, 255, 0)\";\n              } else {\n                // return \"rgba(133, 165, 101, 1)\";\n                if (props.showDarkTheme) {\n                  return \"rgb(255, 231, 227)\";\n                } else {\n                  return \"rgba(133, 165, 101, 1)\";\n                }\n              }\n            }\n\n            if (context.dataset.label === \"spoliage waste\") {\n              let warningForSpoilageWasteCap = dailySpoliageWastesCap;\n\n              if (props.showPounds) {\n                // warningNum = Math.round(warningForSpoilageWasteCap * 2.775);\n                warningNum = spoilageWasteCappingInPounds;\n              } else {\n                warningNum = warningForSpoilageWasteCap;\n              }\n\n              if (value >= warningNum) {\n                return \"rgba(255, 0, 0, 0.9)\";\n              } else if (value === 0) {\n                return \"rgba(255, 255, 255, 0)\";\n              } else {\n                // return \"rgba(133, 165, 101, 1)\";\n                if (props.showDarkTheme) {\n                  return \"rgb(255, 231, 227)\";\n                } else {\n                  return \"rgba(133, 165, 101, 1)\";\n                }\n              }\n            }\n          },\n          formatter: function (value, context) {\n            // var index = context.dataIndex;\n            // var value = parseInt(context.dataset.data[index]);\n            let warningNum;\n\n            if (context.dataset.label === \"cover waste\") {\n              let warningForCoverWasteCap = dailyCoverWastesCap;\n\n              if (props.showPounds) {\n                // warningNum = Math.round(warningForCoverWasteCap * 2.775);\n                warningNum = dailyWasteCappingInPounds;\n              } else {\n                warningNum = warningForCoverWasteCap;\n              }\n\n              if (value >= warningNum) {\n                return `${value}`;\n              }\n            } else if (context.dataset.label === \"preparation waste\") {\n              let warningForPreparationWasteCap = dailyPeparationWastesCap;\n\n              if (props.showPounds) {\n                // warningNum = Math.round(warningForPreparationWasteCap * 2.775);\n                warningNum = prepWasteCappingInPounds;\n              } else {\n                warningNum = warningForPreparationWasteCap;\n              }\n\n              if (value >= warningNum) {\n                return `${value}`;\n              }\n            } else if (context.dataset.label === \"spoliage waste\") {\n              let warningForSpoilageWasteCap = dailySpoliageWastesCap;\n\n              if (props.showPounds) {\n                // warningNum = Math.round(warningForSpoilageWasteCap * 2.775);\n                warningNum = spoilageWasteCappingInPounds;\n              } else {\n                warningNum = warningForSpoilageWasteCap;\n              }\n\n              if (value >= warningNum) {\n                return `${value}`;\n              }\n            }\n          }\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dailyWasteChart__chartPosition\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Bar, {\n    ref: reference => chartReference = reference,\n    data: {\n      labels: [\"mon\", \"tues\", \"wed\", \"thurs\", \"fri\", \"sat\", \"sun\"],\n      datasets: [{\n        label: \"Total wastes\",\n        siteName: props.siteName,\n        dates: dailyChartXaxis,\n        data: props.showPounds ? totalWasteData.map(waste => {\n          return (waste * 2.775).toFixed(0);\n        }) : totalWasteData,\n        fill: true,\n        backgroundColor: background.slice(),\n        barPercentage: 0.9,\n        categoryPercentage: 1,\n        ticks: {\n          fontColor: \"rgba(255,255,255, 0.1)\"\n        },\n        hoverBackgroundColor: ['rgba(56, 166, 126, 0.5)', 'rgba(56, 166, 126, 0.5)', 'rgba(56, 166, 126, 0.5)', 'rgba(56, 166, 126, 0.5)', 'rgba(56, 166, 126, 0.5)', 'rgba(56, 166, 126, 0.5)', 'rgba(56, 166, 126, 0.5)']\n      }]\n    },\n    width: dailyWasteWidth,\n    height: dailyWasteHeight,\n    options: {\n      responsive: true,\n      maintainAspectRatio: true,\n      tooltips: {\n        enabled: false\n      },\n      legend: {\n        display: false\n      },\n      onClick: (event, array) => {\n        let index;\n\n        if (array.length) {\n          array[0]._chart.config.data.datasets[0].data.forEach((value, i) => {\n            if (i === array[0]._index) {\n              index = i;\n            }\n          });\n        }\n\n        let barChart = chartReference.chartInstance;\n        barChart.update(); // let item = {\n        //   siteName: array[0]._chart.config.data.datasets[0].siteName,\n        //   index,\n        //   date:\n        //     array[0]._chart.config.data.datasets[0].dates[\n        //       array[0]._index\n        //     ],\n        // };\n        // handleChangeHourlyWaste(item);\n\n        let item = {\n          hourlyWaste: allHourlyWasteData.hourlyWaste,\n          index: index,\n          date: array[0]._chart.config.data.datasets[0].dates[array[0]._index]\n        }; // console.log(\"item\",item)\n        // console.log(\"allHourlyWasteData\",allHourlyWasteData)\n\n        handleHourlyWaste(item);\n      },\n      scales: {\n        xAxes: [{\n          gridLines: {\n            display: false\n          },\n          display: false,\n          ticks: {\n            fontColor: \"rgba(255,255,255, 0.1)\"\n          }\n        }],\n        yAxes: [{\n          display: false,\n          gridLines: {\n            display: false\n          },\n          ticks: {\n            maxTicksLimit: 1,\n            max: 1\n          }\n        }]\n      },\n      plugins: {\n        datalabels: {\n          color: function (context) {\n            var index = context.dataIndex;\n            var value = context.dataset.data[index];\n            let warning = dailyCoverWastesCap + dailyPeparationWastesCap + dailySpoliageWastesCap;\n            let warningNum;\n\n            if (props.showPounds) {\n              warningNum = totalCappingInPounds;\n            } else {\n              warningNum = warning;\n            }\n\n            if (value >= warningNum) {\n              return \"rgba(255, 0, 0, 0.9)\";\n            } else {\n              // return \"rgba(133, 165, 101, 1)\";\n              if (props.showDarkTheme) {\n                return \"rgb(255, 231, 227)\";\n              } else {\n                return \"rgba(133, 165, 101, 1)\";\n              }\n            }\n          },\n          anchor: \"end\",\n          align: \"start\",\n          clamp: true,\n          display: true,\n          borderColor: null,\n          borderRadius: 4,\n          borderWidth: 1,\n          font: {\n            size: totalLabelFont,\n            weight: 600\n          },\n          offset: 4,\n          padding: 0,\n          formatter: function (value, context) {\n            let warning = dailyCoverWastesCap + dailyPeparationWastesCap + dailySpoliageWastesCap;\n            let warningNum;\n\n            if (props.showPounds) {\n              warningNum = totalCappingInPounds;\n            } else {\n              warningNum = warning;\n            }\n\n            if (value >= warningNum) {\n              let formatedData = roundedUpNumberAndTurnBackToNumber(value);\n              var text = \"WARNING\";\n              return `${text} \\n      ${formatedData} `;\n            } else {\n              return value;\n            }\n          }\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dailyWasteChart__dateLabel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 753,\n      columnNumber: 13\n    }\n  }, formatedDate.map((data, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: i === index ? \"applyCooperHewittBold applyGoldColor\" : \"\",\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 755,\n      columnNumber: 17\n    }\n  }, data))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 759,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dailyWasteChart__dateLabel__CSP\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 760,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dailyWasteChart__dateLabel__CSP__coverwastesSquare\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 761,\n      columnNumber: 19\n    }\n  }), \"COVER\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dailyWasteChart__dateLabel__CSP__spoliageSquare\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 19\n    }\n  }), \"SPOILAGE\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dailyWasteChart__dateLabel__CSP__preparationSquare\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 765,\n      columnNumber: 19\n    }\n  }), \"PREPARATION\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyGoldColor\",\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 770,\n      columnNumber: 15\n    }\n  }, \"The yellow bar represents a special event on the day\"))))));\n}","map":{"version":3,"sources":["/Users/james/Documents/CODE/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/reports/daily-waste-report.js"],"names":["React","useState","useContext","useEffect","Bar","Chart","wasteDailyDateRange","roundedUpNumberAndTurnBackToNumber","useWindowDimensions","DailyWasteContext","WasteCapContext","HourlyFoodWasteContext","AccordionHeading","AccordionBody","InputsContext","DailyWasteChart","props","defaults","global","defaultFontFamily","thisWeekCoverInputs","dailyCoverWastes","dailySpoliageWastes","dailyPeparationWastes","targets","chartReference","coverWaste","prepWaste","spoilageWaste","getIndexesForBackgroundColours","dailyWasteData","allHourlyWasteData","handleHourlyWaste","index","coverWasteData","setCoverWaste","prepWasteData","setPrepWaste","spoilageWasteData","setSpoilageWaste","totalWasteData","setDailyWasteData","totalCappingInPounds","setTotalCappingInPounds","dailyWasteCappingInPounds","setDailyWasteCappingInPounds","prepWasteCappingInPounds","setPrepWasteCappingInPounds","spoilageWasteCappingInPounds","setSpoilageWasteCappingInPounds","dailyCoverWastesCap","dailySpoliageWastesCap","dailyPeparationWastesCap","formatedDate","JSON","parse","localStorage","getItem","dailyChartXaxis","checkBox","setCheckBox","undefined","totalCappings","totalWarningInPounds","dailyWasteWarningInPounds","prepWasteWarningInPounds","spoilageWasteWarningInPounds","background","map","data","coverWasteBackgroundColours","spoilageWasteBackgroundColours","prepWasteBackgroundColours","indexes","coverWasteOverTargetIndexArray","spoilageWasteOverTargetIndexArray","prepWasteOverTargetIndexArray","dateRangeLable","width","dailyWasteHeight","dailyWasteWidth","CSPlabelFont","totalLabelFont","hideReport","handleChangeForCheckedAndAccordion","showDailyChart","showDarkTheme","siteName","showPounds","labels","datasets","label","item","toFixed","fill","backgroundColor","slice","minBarLength","barPercentage","categoryPercentage","responsive","maintainAspectRatio","legend","display","scales","xAxes","gridLines","ticks","fontColor","yAxes","beginAtZero","plugins","datalabels","anchor","align","borderColor","borderRadius","borderWidth","font","size","weight","offset","padding","color","context","dataIndex","value","parseInt","dataset","warningNum","warningForCoverWasteCap","warningForPreparationWasteCap","warningForSpoilageWasteCap","formatter","reference","dates","waste","hoverBackgroundColor","tooltips","enabled","onClick","event","array","length","_chart","config","forEach","i","_index","barChart","chartInstance","update","hourlyWaste","date","maxTicksLimit","max","warning","clamp","formatedData","text","justifyContent"],"mappings":"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","sourcesContent":["\nimport React, { useState, useContext, useEffect } from \"react\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport Chart from \"chart.js\";\nimport \"chartjs-plugin-annotation\";\nimport \"chartjs-plugin-datalabels\";\n\nimport {\n  wasteDailyDateRange,\n  roundedUpNumberAndTurnBackToNumber,\n} from \"../../../../utilities\";\n\nimport useWindowDimensions from \"../../libs/use-window-dimensions\";\n\nimport { DailyWasteContext } from \"../../../../contexts/daily-waste-context\";\n// import { HourlyWasteContext } from \"../../../../contexts/hourly-waste-context\";\n\nimport { WasteCapContext } from \"../../../../contexts/waste-cap-context\";\nimport { HourlyFoodWasteContext } from \"../../../../contexts/hourly-food-waste-context\";\n\nimport { AccordionHeading, AccordionBody } from \"../accordion\"\n\nimport { InputsContext } from \"../../../../contexts/inputs-context\";\n\nexport default function DailyWasteChart(props) {\n  Chart.defaults.global.defaultFontFamily = \"CooperHewitt-Book\";\n\n  const {\n    thisWeekCoverInputs,\n   } = useContext(InputsContext);\n\n  const {\n    dailyCoverWastes,\n    dailySpoliageWastes,\n    dailyPeparationWastes\n   } = useContext(WasteCapContext);\n\n  const targets = {\n    dailyCoverWastes,\n    dailySpoliageWastes,\n    dailyPeparationWastes\n  }\n\n  let chartReference = {};\n\n  const {\n    coverWaste,\n    prepWaste,\n    spoilageWaste,\n    getIndexesForBackgroundColours,\n    dailyWasteData,\n  } = useContext(DailyWasteContext);\n\n  const { allHourlyWasteData, handleHourlyWaste, index } = useContext(HourlyFoodWasteContext)\n\n  const [ coverWasteData, setCoverWaste] = useState([])\n  const [ prepWasteData, setPrepWaste ] = useState([])\n  const [ spoilageWasteData, setSpoilageWaste ] = useState([])\n  const [ totalWasteData, setDailyWasteData ] = useState([])\n\n  const [ totalCappingInPounds, setTotalCappingInPounds ] = useState([])\n\n  const [ dailyWasteCappingInPounds, setDailyWasteCappingInPounds ] = useState([])\n  const [ prepWasteCappingInPounds, setPrepWasteCappingInPounds ] = useState([])\n  const [ spoilageWasteCappingInPounds, setSpoilageWasteCappingInPounds ] = useState([])\n\n\n  let dailyCoverWastesCap = dailyCoverWastes ? dailyCoverWastes: 0\n  let dailySpoliageWastesCap = dailySpoliageWastes ? dailySpoliageWastes : 0\n  let dailyPeparationWastesCap = dailyPeparationWastes ? dailyPeparationWastes : 0\n\n  const formatedDate = JSON.parse(localStorage.getItem('formatedXaxis')) || []\n  const dailyChartXaxis = JSON.parse(localStorage.getItem('dailyChartXaxis')) || []\n\n  const [ checkBox, setCheckBox ] = useState([0, 0, 0, 0, 0, 0, 0])\n\n\n  // const initialStateForDailyChartXaxis = JSON.parse(localStorage.getItem('dailyChartXaxis')) || []\n  // const initialStateForFormatedDate = JSON.parse(localStorage.getItem('formatedXaxis')) || []\n\n  // const [dailyChartXaxis, setDateLabels] = useState(initialStateForDailyChartXaxis);\n  // const [formatedDate, setFormatedDate] = useState(initialStateForFormatedDate);\n\n  useEffect(() => {\n\n    // const formatedDate = JSON.parse(localStorage.getItem('formatedXaxis')) || []\n    // const dailyChartXaxis = JSON.parse(localStorage.getItem('dailyChartXaxis')) || []\n    // setDateLabels(props.weeklyDailyRange)\n    // setFormatedDate(props.weeklyDailyLabels)\n\n    // console.log(\"thisWeekCoverInputs\",thisWeekCoverInputs);\n    // console.log(\"thisWeekCoverInputs\",thisWeekCoverInputs.checkBox);\n\n    if (thisWeekCoverInputs !== undefined) {\n      setCheckBox(thisWeekCoverInputs.checkBox)\n    }\n\n    setCoverWaste(coverWaste)\n    setPrepWaste(prepWaste)\n    setSpoilageWaste(spoilageWaste)\n    setDailyWasteData(dailyWasteData)\n\n    const totalCappings = dailyCoverWastesCap + dailyPeparationWastesCap + dailySpoliageWastesCap\n\n    const totalWarningInPounds = roundedUpNumberAndTurnBackToNumber(totalCappings * 2.775)\n    setTotalCappingInPounds(totalWarningInPounds)\n\n    const dailyWasteWarningInPounds = roundedUpNumberAndTurnBackToNumber(dailyCoverWastesCap * 2.775)\n    const prepWasteWarningInPounds = roundedUpNumberAndTurnBackToNumber(dailyPeparationWastesCap * 2.775)\n    const spoilageWasteWarningInPounds = roundedUpNumberAndTurnBackToNumber(dailySpoliageWastesCap * 2.775)\n\n    setDailyWasteCappingInPounds(dailyWasteWarningInPounds)\n    setPrepWasteCappingInPounds(prepWasteWarningInPounds)\n    setSpoilageWasteCappingInPounds(spoilageWasteWarningInPounds)\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [prepWaste, coverWaste, spoilageWaste, dailyWasteData, props])\n\n  // console.log(\"dailyCoverWastesCap\",dailyCoverWastesCap)\n  // console.log(\"dailySpoliageWastesCap\",dailySpoliageWastesCap)\n  // console.log(\"dailyPeparationWastesCap\",dailyPeparationWastesCap)\n\n  // console.log(\"dailyWasteWarningInPounds\",dailyWasteCappingInPounds)\n  // console.log(\"prepWasteWarningInPounds\",prepWasteCappingInPounds)\n  // console.log(\"spoilageWasteWarningInPounds\",spoilageWasteCappingInPounds)\n\n  // console.log(\"props.showPounds\", props.showPounds)\n\n  let background = [\n    \"rgba(255, 255, 255, 0.4)\",\n    \"rgba(255, 255, 255, 0.4)\",\n    \"rgba(255, 255, 255, 0.4)\",\n    \"rgba(255, 255, 255, 0.4)\",\n    \"rgba(255, 255, 255, 0.4)\",\n    \"rgba(255, 255, 255, 0.4)\",\n    \"rgba(255, 255, 255, 0.4)\",\n  ];\n\n  if (checkBox !== undefined) {\n    checkBox.map((data, index) => {\n      if (data === 1) {\n        background[index] = \"rgba(242, 240, 196, 0.4)\"\n      }\n      return;\n    })\n  }\n\n  if(index > 0) {\n    background[index] = \"rgba(106, 217, 123, 0.2)\";\n  } else if (index === 0) {\n    background[index] = \"rgba(106, 217, 123, 0.2)\";\n  }\n\n  let coverWasteBackgroundColours = [\n    \"rgb(140, 112, 140)\",\n    \"rgb(140, 112, 140)\",\n    \"rgb(140, 112, 140)\",\n    \"rgb(140, 112, 140)\",\n    \"rgb(140, 112, 140)\",\n    \"rgb(140, 112, 140)\",\n    \"rgb(140, 112, 140)\",\n  ];\n\n  let spoilageWasteBackgroundColours = [\n    \"#ff8c00\",\n    \"#ff8c00\",\n    \"#ff8c00\",\n    \"#ff8c00\",\n    \"#ff8c00\",\n    \"#ff8c00\",\n    \"#ff8c00\",\n  ];\n\n  let prepWasteBackgroundColours = [\n    \"rgb(133, 165, 101)\",\n    \"rgb(133, 165, 101)\",\n    \"rgb(133, 165, 101)\",\n    \"rgb(133, 165, 101)\",\n    \"rgb(133, 165, 101)\",\n    \"rgb(133, 165, 101)\",\n    \"rgb(133, 165, 101)\"\n  ];\n\n  let indexes;\n\n  if (targets) {\n    indexes = getIndexesForBackgroundColours(targets)\n  }\n\n  if (indexes) {\n    indexes.coverWasteOverTargetIndexArray.map((data) => {\n      coverWasteBackgroundColours[data] = \"rgba(255, 0, 0, 0.9)\";\n      return \"\"\n    })\n\n    indexes.spoilageWasteOverTargetIndexArray.map((data) => {\n      spoilageWasteBackgroundColours[data] = \"rgba(255, 0, 0, 0.9)\";\n      return \"\"\n    })\n\n    indexes.prepWasteOverTargetIndexArray.map((data) => {\n      prepWasteBackgroundColours[data] = \"rgba(255, 0, 0, 0.9)\";\n      return \"\"\n    })\n  }\n\n  // console.log(\"dailyChartXaxis\",dailyChartXaxis)\n  let dateRangeLable = wasteDailyDateRange(dailyChartXaxis);\n  // console.log(\"dateRangeLable\",dateRangeLable)\n\n  const { width } = useWindowDimensions();\n\n  let dailyWasteHeight = 120;\n  let dailyWasteWidth = 400;\n\n  let CSPlabelFont = 10;\n  let totalLabelFont = 12\n\n  if (width <= 700) {\n    dailyWasteWidth = 260;\n    dailyWasteHeight = 179;\n    totalLabelFont = 8\n    CSPlabelFont = 8 * 0.6;\n  }\n\n  return (\n    <div className={props.hideReport ? \"dailyWasteChart displayNone\":\"dailyWasteChart\"}>\n\n      <AccordionHeading color={\"primPurpleBackgroundColor\"}>\n        <div className=\"section-title\">DAILY WASTE</div>\n        <div className=\"container\">\n            <span onClick={() => props.handleChangeForCheckedAndAccordion(!props.showDailyChart, \"dailyChartSwitch\")}>\n              {props.showDailyChart ? (\"X\"):\"| | | \"}\n            </span>\n        </div>\n      </AccordionHeading>\n\n      <AccordionBody open={props.showDailyChart}>\n        <div className= { props.showDarkTheme ? \"darkTheme__reportBackgroundColor addPaddingOfHalveRem addHeightOfFithyVh\": \"originalTheme__reportBackgroundColor addPaddingOfHalveRem dailyWasteChart__height\"}>\n\n          <div className=\"report-subtitle\">{props.siteName}</div>\n          <div className=\"dailyWasteChart__title--style\">\n          <div className=\"dailyWasteChart--dateStyling\">{dateRangeLable}</div>\n            <div className=\"dailyWasteChart--titleWrapper\">\n              <div>\n                <div className=\"section-title\">\n                  DAILY WASTE\n                  <div className=\"applyMarginRightAndLeft\">{props.showPounds? \"(£)\" : \"(Kg)\" }</div>\n                </div>\n\n                <div className=\"dailyWasteChart__instructions\">\n                  Click on the bars for waste in 24hrs\n                </div>\n\n              </div>\n            </div>\n\n              <div className=\"dailyWasteChart__cappingWrapper\">\n                <div className=\"capping__text applyPurpleColor cooperHewittBold capping__flex\">\n                  Total\n                  <div className=\"applyMarginRightAndLeft\">\n                    {props.showPounds ?\n                      roundedUpNumberAndTurnBackToNumber(dailyWasteCappingInPounds + spoilageWasteCappingInPounds + prepWasteCappingInPounds)\n                     : roundedUpNumberAndTurnBackToNumber(dailyCoverWastesCap + dailySpoliageWastesCap + dailyPeparationWastesCap)}\n                    <div className=\"cooperHewittBold capping__headingCappingStyling\">\n                      Capping =\n                    </div>\n                  </div>\n                </div>\n                <div className=\"capping__text applyMarginRightAndLeft applyPurpleColor cooperHewittBold\">\n                    C\n                </div>\n                <div\n                  id={1}\n                  key={0}\n                >\n                  <div className={props.showDarkTheme? \"darkTheme__numberColor\" :\"applyBlueTuckGreen\"}>\n                    {props.showPounds ? roundedUpNumberAndTurnBackToNumber(dailyWasteCappingInPounds) : roundedUpNumberAndTurnBackToNumber(dailyCoverWastesCap)}\n                  </div>\n                </div>\n                <div>+</div>\n                <div className=\"capping__text applyMarginRightAndLeft applyPurpleColor cooperHewittBold\">\n                    S\n                 </div>\n                <div\n                  id={2}\n                  key={1}\n                >\n                  <div className={props.showDarkTheme? \"darkTheme__numberColor\" :\"applyBlueTuckGreen\"}>\n                    {props.showPounds ? roundedUpNumberAndTurnBackToNumber(spoilageWasteCappingInPounds) : roundedUpNumberAndTurnBackToNumber(dailySpoliageWastesCap)}\n                  </div>\n                </div>\n                <div>+</div>\n                <div className=\"capping__text applyMarginRightAndLeft applyPurpleColor cooperHewittBold\">\n                  P\n                </div>\n                <div\n                  id={3}\n                  key={2}\n                >\n                  <div className={props.showDarkTheme? \"darkTheme__numberColor\" :\"applyBlueTuckGreen\"}>\n                    {props.showPounds ? roundedUpNumberAndTurnBackToNumber(prepWasteCappingInPounds) : roundedUpNumberAndTurnBackToNumber(dailyPeparationWastesCap)}\n                  </div>\n                </div>\n              </div>\n\n          </div>\n\n          <div className=\"dailyWasteChart__wrapperPosition\">\n          <div className=\"dailyWasteChart__chartPosition1\">\n              <Bar\n                data={{\n                  labels: [\n                    \"C  S  P\",\n                    \"C  S  P\",\n                    \"C  S  P\",\n                    \"C  S  P\",\n                    \"C  S  P\",\n                    \"C  S  P\",\n                    \"C  S  P\",\n                  ],\n                  datasets: [\n                    {\n                      label: \"cover waste\",\n                      data: props.showPounds\n                        ? coverWasteData.map((item) => {\n                            return (item * 2.775).toFixed(0);\n                          }) :\n                          coverWasteData,\n                      fill: false,\n                      backgroundColor: coverWasteBackgroundColours.slice(),\n                      minBarLength: 0.3,\n                      barPercentage: 0.3,\n                      categoryPercentage: 0.7,\n                    },\n                    {\n                      label: \"spoliage waste\",\n                      data: props.showPounds\n                        ? spoilageWasteData.map((item) => {\n                            return (item * 2.775).toFixed(0);\n                          }) :\n                          spoilageWasteData,\n                      fill: false,\n                      backgroundColor: spoilageWasteBackgroundColours.slice(),\n                      minBarLength: 0.3,\n                      barPercentage: 0.3,\n                      categoryPercentage: 0.7,\n                    },\n                    {\n                      label: \"preparation waste\",\n                      data: props.showPounds\n                        ?  prepWasteData.map((item) => {\n                            return (item * 2.775).toFixed(0);\n                          }) :\n                          prepWasteData,\n                      fill: false,\n                      backgroundColor: prepWasteBackgroundColours,\n                      minBarLength: 0.3,\n                      barPercentage: 0.3,\n                      categoryPercentage: 0.7,\n                    },\n                  ],\n                }}\n                width={dailyWasteWidth}\n                height={dailyWasteHeight}\n                options={{\n                  responsive: true,\n                  maintainAspectRatio: true,\n                  legend: {\n                    display: false,\n                  },\n                  scales: {\n                    xAxes: [\n                      {\n                        gridLines: {\n                          display: false,\n                        },\n                        ticks: {\n                          fontColor: \"rgb(133, 165, 101, 0)\",\n                        },\n                      },\n                    ],\n                    yAxes: [\n                      {\n                        gridLines: {\n                          display: false,\n                        },\n                        display: false,\n                        ticks: {\n                          beginAtZero: true,\n                        },\n                      },\n                    ],\n                  },\n\n                  plugins: {\n                    datalabels: {\n                      anchor: \"start\",\n                      align: \"bottom\",\n                      display: true,\n                      backgroundColor: null,\n                      borderColor: null,\n                      borderRadius: 4,\n                      borderWidth: 1,\n                      font: {\n                        size: CSPlabelFont,\n                        weight: 600,\n                      },\n                      offset: 4,\n                      padding: 0,\n                      color: function (context) {\n                        var index = context.dataIndex;\n                        var value = parseInt(context.dataset.data[index]);\n\n                        let warningNum;\n\n                        if (context.dataset.label === \"cover waste\") {\n\n                          let warningForCoverWasteCap = dailyCoverWastesCap;\n\n                          if (props.showPounds) {\n                            // warningNum = Math.round(warningForCoverWasteCap * 2.775);\n                            warningNum = dailyWasteCappingInPounds;\n                          } else {\n                            warningNum = warningForCoverWasteCap;\n                          }\n\n                          if (value >= warningNum) {\n                            return \"rgba(255, 0, 0, 0.9)\";\n                          } else if (value === 0) {\n                            return \"rgba(255, 255, 255, 0)\";\n                          } else {\n                            // return \"rgba(133, 165, 101, 1)\";\n\n                            if (props.showDarkTheme) {\n                            return \"rgb(255, 231, 227)\";\n                            } else {\n                              return \"rgba(133, 165, 101, 1)\";\n                            }\n\n                          }\n\n                        }\n\n                        if (context.dataset.label === \"preparation waste\") {\n\n                          let warningForPreparationWasteCap = dailyPeparationWastesCap;\n\n                          if (props.showPounds) {\n                            // warningNum = Math.round(warningForPreparationWasteCap * 2.775);\n                            warningNum = prepWasteCappingInPounds\n                          } else {\n                            warningNum = warningForPreparationWasteCap;\n                          }\n\n\n                          if (value >= warningNum) {\n                            return \"rgba(255, 0, 0, 0.9)\";\n                          } else if (value === 0) {\n                            return \"rgba(255, 255, 255, 0)\";\n                          } else {\n\n                            // return \"rgba(133, 165, 101, 1)\";\n\n                            if (props.showDarkTheme) {\n                            return \"rgb(255, 231, 227)\";\n                            } else {\n                              return \"rgba(133, 165, 101, 1)\";\n                            }\n\n                          }\n\n\n                        }\n\n                        if (context.dataset.label === \"spoliage waste\") {\n\n                          let warningForSpoilageWasteCap = dailySpoliageWastesCap;\n\n\n                          if (props.showPounds) {\n                            // warningNum = Math.round(warningForSpoilageWasteCap * 2.775);\n                            warningNum = spoilageWasteCappingInPounds\n                          } else {\n                            warningNum = warningForSpoilageWasteCap;\n                          }\n\n                          if (value >= warningNum) {\n                            return \"rgba(255, 0, 0, 0.9)\";\n                          } else if (value === 0) {\n                            return \"rgba(255, 255, 255, 0)\";\n                          } else {\n                            // return \"rgba(133, 165, 101, 1)\";\n\n                            if (props.showDarkTheme) {\n                            return \"rgb(255, 231, 227)\";\n                            } else {\n                              return \"rgba(133, 165, 101, 1)\";\n                            }\n\n                          }\n\n\n                        }\n\n                      },\n                      formatter: function (value, context) {\n                        // var index = context.dataIndex;\n                        // var value = parseInt(context.dataset.data[index]);\n\n                        let warningNum;\n\n                        if (context.dataset.label === \"cover waste\") {\n\n                          let warningForCoverWasteCap = dailyCoverWastesCap;\n\n                          if (props.showPounds) {\n                            // warningNum = Math.round(warningForCoverWasteCap * 2.775);\n                            warningNum = dailyWasteCappingInPounds;\n                          } else {\n                            warningNum = warningForCoverWasteCap;\n                          }\n\n                        if (value >= warningNum) {\n                            return `${value}`;\n\n                          }\n\n                        } else if (context.dataset.label === \"preparation waste\") {\n\n                          let warningForPreparationWasteCap = dailyPeparationWastesCap;\n\n\n                          if (props.showPounds) {\n                            // warningNum = Math.round(warningForPreparationWasteCap * 2.775);\n                            warningNum = prepWasteCappingInPounds\n                          } else {\n                            warningNum = warningForPreparationWasteCap;\n                          }\n\n                          if (value >= warningNum) {\n                            return `${value}`;\n\n                          }\n\n                        } else if (context.dataset.label === \"spoliage waste\") {\n\n                          let warningForSpoilageWasteCap = dailySpoliageWastesCap;\n\n                          if (props.showPounds) {\n                            // warningNum = Math.round(warningForSpoilageWasteCap * 2.775);\n                            warningNum = spoilageWasteCappingInPounds\n                          } else {\n                            warningNum = warningForSpoilageWasteCap;\n                          }\n\n                          if (value >= warningNum) {\n                            return `${value}`;\n\n                          }\n\n                        }\n\n                      },\n                    },\n                  },\n                }}\n              />\n\n          </div>\n\n          <div className=\"dailyWasteChart__chartPosition\">\n              <Bar\n                ref={(reference) => (chartReference = reference)}\n                data={{\n                  labels: [\"mon\",\"tues\",\"wed\",\"thurs\",\"fri\",\"sat\",\"sun\"],\n                  datasets: [\n                    {\n                      label: \"Total wastes\",\n                      siteName: props.siteName,\n                      dates: dailyChartXaxis,\n                    data: props.showPounds\n                      ? totalWasteData.map((waste) => {\n                        return (waste * 2.775).toFixed(0);\n                      }) : totalWasteData,\n                      fill: true,\n                      backgroundColor: background.slice(),\n                      barPercentage: 0.9,\n                      categoryPercentage: 1,\n                      ticks: {\n                        fontColor: \"rgba(255,255,255, 0.1)\",\n                      },\n                      hoverBackgroundColor: [\n                        'rgba(56, 166, 126, 0.5)',\n                        'rgba(56, 166, 126, 0.5)',\n                        'rgba(56, 166, 126, 0.5)',\n                        'rgba(56, 166, 126, 0.5)',\n                        'rgba(56, 166, 126, 0.5)',\n                        'rgba(56, 166, 126, 0.5)',\n                        'rgba(56, 166, 126, 0.5)',\n                      ]\n                    },\n                  ],\n                }}\n                width={dailyWasteWidth}\n                height={dailyWasteHeight}\n                options={{\n                  responsive: true,\n                  maintainAspectRatio: true,\n                  tooltips: {\n                    enabled: false,\n                  },\n                  legend: {\n                    display: false,\n                  },\n\n                  onClick: (event, array) => {\n                    let index;\n\n                    if (array.length) {\n                      array[0]._chart.config.data.datasets[0].data.forEach(\n                        (value, i) => {\n                          if (i === array[0]._index) {\n                            index = i\n                          }\n                        }\n                      );\n                    }\n\n                    let barChart = chartReference.chartInstance;\n                    barChart.update()\n\n                      // let item = {\n                      //   siteName: array[0]._chart.config.data.datasets[0].siteName,\n                      //   index,\n                      //   date:\n                      //     array[0]._chart.config.data.datasets[0].dates[\n                      //       array[0]._index\n                      //     ],\n                      // };\n\n                      // handleChangeHourlyWaste(item);\n\n                      let item = {\n                        hourlyWaste: allHourlyWasteData.hourlyWaste,\n                        index: index,\n                        date:\n                        array[0]._chart.config.data.datasets[0].dates[\n                          array[0]._index\n                        ],\n                      }\n\n                      // console.log(\"item\",item)\n                      // console.log(\"allHourlyWasteData\",allHourlyWasteData)\n\n                      handleHourlyWaste(item)\n\n                  },\n                  scales: {\n                    xAxes: [\n                      {\n                        gridLines: {\n                          display: false,\n                        },\n                        display: false,\n                        ticks: {\n                          fontColor: \"rgba(255,255,255, 0.1)\",\n                        },\n                      },\n                    ],\n                    yAxes: [\n                      {\n                        display: false,\n                        gridLines: {\n                          display: false,\n                        },\n                        ticks: {\n                          maxTicksLimit: 1,\n                          max: 1\n                        },\n                      },\n                    ],\n                  },\n\n                  plugins: {\n                    datalabels: {\n                      color: function (context) {\n                        var index = context.dataIndex;\n                        var value = context.dataset.data[index];\n\n                        let warning = dailyCoverWastesCap + dailyPeparationWastesCap + dailySpoliageWastesCap\n\n                        let warningNum;\n                        if (props.showPounds) {\n                          warningNum = totalCappingInPounds;\n                        } else {\n                          warningNum = warning;\n                        }\n\n                        if (value >= warningNum) {\n                          return \"rgba(255, 0, 0, 0.9)\";\n                        } else {\n                          // return \"rgba(133, 165, 101, 1)\";\n\n                          if (props.showDarkTheme) {\n                            return \"rgb(255, 231, 227)\";\n                          } else {\n                            return \"rgba(133, 165, 101, 1)\";\n                          }\n\n                        }\n                      },\n                      anchor: \"end\",\n                      align: \"start\",\n                      clamp: true,\n                      display: true,\n                      borderColor: null,\n                      borderRadius: 4,\n                      borderWidth: 1,\n                      font: {\n                        size: totalLabelFont,\n                        weight: 600,\n                      },\n                      offset: 4,\n                      padding: 0,\n                      formatter: function (value, context) {\n\n                        let warning = dailyCoverWastesCap + dailyPeparationWastesCap + dailySpoliageWastesCap\n\n                        let warningNum;\n                        if (props.showPounds) {\n                          warningNum = totalCappingInPounds;\n                        } else {\n                          warningNum = warning;\n                        }\n\n                        if (value >= warningNum) {\n\n                          let formatedData = roundedUpNumberAndTurnBackToNumber(value)\n\n                          var text = \"WARNING\";\n                          return `${text} \\n      ${formatedData} `;\n                        } else {\n                          return value;\n                        }\n                      },\n                    },\n                  },\n                }}\n              />\n\n            <div className=\"dailyWasteChart__dateLabel\">\n              {formatedDate.map((data, i) => (\n                <div className={i === index ? \"applyCooperHewittBold applyGoldColor\" : \"\"} key={i}>{data}</div>\n              ))}\n            </div>\n\n              <div>\n                <div className=\"dailyWasteChart__dateLabel__CSP\">\n                  <div className=\"dailyWasteChart__dateLabel__CSP__coverwastesSquare\"></div>\n                  COVER\n                  <div className=\"dailyWasteChart__dateLabel__CSP__spoliageSquare\"></div>\n                  SPOILAGE\n                  <div className=\"dailyWasteChart__dateLabel__CSP__preparationSquare\"></div>\n                  PREPARATION\n                </div>\n              </div>\n\n              <div className=\"applyGoldColor\" style={{\n                    display: \"flex\",\n                    justifyContent: \"center\"\n              }}>\n                The yellow bar represents a special event on the day\n              </div>\n\n          </div>\n        </div>\n\n        </div>\n      </AccordionBody>\n\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}