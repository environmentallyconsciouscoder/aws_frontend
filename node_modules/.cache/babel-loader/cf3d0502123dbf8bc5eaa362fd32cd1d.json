{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/reports/ai-predictions-report.js\";\nimport React, { useContext, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chartjs-plugin-annotation\";\nimport \"chartjs-plugin-datalabels\";\nimport { setItemInLocalStorage } from \"../../../../utilities.js\";\nimport useWindowDimensions from \"../../libs/use-window-dimensions\";\nimport { AiPredictionDataContext } from \"../../../../contexts/ai-prediction-data-context\";\nimport { AccordionHeading, AccordionBody } from \"../accordion\";\nlet months = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUNE\", \"JULY\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"];\nlet graphHeight = 65;\nlet graphWidth = 400;\nlet labelFont = 10;\nlet pointRadius = 5;\nlet layoutPadding = 20;\n\nconst getCoverData = (values, props) => {\n  const data = {\n    labels: months,\n    datasets: [{\n      label: \"Ai Prediction\",\n      data: props.showPounds ? values.map(item => {\n        return (item * 2.775).toFixed(0);\n      }) : values,\n      backgroundColor: \"rgba(153, 177, 165, 0)\",\n      barPercentage: 0.7,\n      categoryPercentage: 0.9,\n      lineTension: 0,\n      borderColor: 'rgba(140, 112, 140, 0.5)',\n      pointRadius: pointRadius,\n      pointBackgroundColor: 'rgba(140, 112, 140, 0.5)'\n    }]\n  };\n  return data;\n};\n\nconst getSpoilageData = (values, props) => {\n  const data = {\n    labels: months,\n    datasets: [{\n      label: \"Ai Prediction\",\n      data: props.showPounds ? values.map(item => {\n        return (item * 2.775).toFixed(0);\n      }) : values,\n      backgroundColor: \"rgba(153, 177, 165, 0)\",\n      barPercentage: 0.7,\n      categoryPercentage: 0.9,\n      lineTension: 0,\n      borderColor: '#ff8c00',\n      pointRadius: pointRadius,\n      pointBackgroundColor: '#ff8c00'\n    }]\n  };\n  return data;\n};\n\nconst getPreparationData = (values, props) => {\n  const data = {\n    labels: months,\n    datasets: [{\n      label: \"Ai Prediction\",\n      data: props.showPounds ? values.map(item => {\n        return (item * 2.775).toFixed(0);\n      }) : values,\n      backgroundColor: \"rgba(153, 177, 165, 0)\",\n      barPercentage: 0.7,\n      categoryPercentage: 0.9,\n      lineTension: 0,\n      borderColor: 'rgba(133, 165, 101, 0.5)',\n      pointRadius: pointRadius,\n      pointBackgroundColor: 'rgba(133, 165, 101, 0.5)'\n    }]\n  };\n  return data;\n};\n\nexport default function ProgressBar(props) {\n  const {\n    aiPredictionsDisplayValueForCoverWaste,\n    aiPredictionsDisplayValueForPrepWaste,\n    aiPredictionsDisplayValueForSpoilageWaste,\n    aiPredictionsActiveState,\n    aiPredictionsToggleActive,\n    month\n  } = useContext(AiPredictionDataContext);\n  const [coverWaste, setCoverWaste] = React.useState([]);\n  const [prepWaste, setPrepWaste] = React.useState([]);\n  const [spoilageWaste, setSpoilageWaste] = React.useState([]);\n  useEffect(() => {\n    //the code breaks when switch to FOXCAFE and to pounds because it is changing from array to 0 only. expects array.\n    const coverWaste = aiPredictionsDisplayValueForCoverWaste === 0 ? [] : aiPredictionsDisplayValueForCoverWaste;\n    const prepWaste = aiPredictionsDisplayValueForPrepWaste === 0 ? [] : aiPredictionsDisplayValueForPrepWaste;\n    const spoilageWaste = aiPredictionsDisplayValueForSpoilageWaste === 0 ? [] : aiPredictionsDisplayValueForSpoilageWaste;\n    setCoverWaste(coverWaste);\n    setPrepWaste(prepWaste);\n    setSpoilageWaste(spoilageWaste);\n  }, [aiPredictionsDisplayValueForCoverWaste, aiPredictionsDisplayValueForPrepWaste, aiPredictionsDisplayValueForSpoilageWaste]);\n  const {\n    width\n  } = useWindowDimensions();\n\n  if (width <= 700) {\n    graphWidth = 260;\n    graphHeight = 65;\n    labelFont = 8;\n    pointRadius = 3;\n    layoutPadding = 20;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !props.hideReport && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AccordionHeading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, \"AI PREDICTIONS\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  }, props.aiPredictions ? /*#__PURE__*/React.createElement(\"span\", {\n    onClick: () => {\n      props.setAiPredictions(!props.aiPredictions);\n      setItemInLocalStorage(\"showAiPredictions\", !props.aiPredictions);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }, \"X\") : /*#__PURE__*/React.createElement(\"span\", {\n    onClick: () => {\n      props.setAiPredictions(!props.aiPredictions);\n      setItemInLocalStorage(\"showAiPredictions\", !props.aiPredictions);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, \" | | | \"))), /*#__PURE__*/React.createElement(AccordionBody, {\n    open: props.aiPredictions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: props.showDarkTheme ? \"darkTheme__reportBackgroundColor addPaddingOfHalveRem\" : \"originalTheme__reportBackgroundColor addPaddingOfHalveRem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard__aiPredictionsReportHeading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  }, \"AI PREDICTIONS\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 15\n    }\n  }, props.showPounds ? \"(Â£)\" : \"(Kg)\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard__aiPredictionsReport__headingWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard__aiPredictionsReport__subHeading marginRight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 15\n    }\n  }, \"WASTE PREDICTION FOR\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard__aiPredictionsReport__timePeriodMenu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: aiPredictionsActiveState.yearlyForcasts ? \"active\" : \"inactive\",\n    id: 0,\n    onClick: () => {\n      aiPredictionsToggleActive(\"yearlyForcasts\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }\n  }, \"Yr\"), /*#__PURE__*/React.createElement(\"h2\", {\n    className: aiPredictionsActiveState.monthlyForcasts ? \"active\" : \"inactive\",\n    id: 1,\n    onClick: () => {\n      aiPredictionsToggleActive(\"monthlyForcasts\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 17\n    }\n  }, \"Mth\"), /*#__PURE__*/React.createElement(\"h2\", {\n    className: aiPredictionsActiveState.weeklyForcasts ? \"active\" : \"inactive\",\n    id: 2,\n    onClick: () => {\n      aiPredictionsToggleActive(\"weeklyForcasts\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 17\n    }\n  }, \"Wk\"), /*#__PURE__*/React.createElement(\"h2\", {\n    className: aiPredictionsActiveState.dailyForcasts ? \"active\" : \"inactive\",\n    id: 3,\n    onClick: () => {\n      aiPredictionsToggleActive(\"dailyForcasts\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 17\n    }\n  }, \"Dy\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"marginRight applyPurpleColor cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 15\n    }\n  }, \"IN \", month)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard__aiPredictionsReportWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard__aiPredictionsReport__height\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: getCoverData(coverWaste, props),\n    width: graphWidth,\n    height: graphHeight,\n    options: {\n      layout: {\n        padding: {\n          left: layoutPadding,\n          right: layoutPadding,\n          top: 30,\n          bottom: 30\n        }\n      },\n      responsive: true,\n      maintainAspectRatio: true,\n      tooltips: {\n        enabled: false\n      },\n      legend: {\n        display: false\n      },\n      scales: {\n        xAxes: [{\n          display: false,\n          gridLines: {\n            display: false\n          },\n          ticks: {\n            fontColor: \"rgb(15, 128, 140)\"\n          }\n        }],\n        yAxes: [{\n          display: false,\n          gridLines: {},\n          ticks: {\n            maxTicksLimit: 1,\n            beginAtZero: true\n          }\n        }]\n      },\n      plugins: {\n        datalabels: {\n          display: true,\n          anchor: \"top\",\n          align: \"top\",\n          font: {\n            size: labelFont,\n            weight: 600\n          },\n          color: function (context) {\n            var index = context.dataIndex;\n            var value = context.dataset.data[index];\n\n            if (props.showPounds) {\n              let prevValue = coverWaste[index - 1] * 2.775;\n\n              if (value > prevValue) {\n                return \"rgba(255, 0, 0, 0.9)\";\n              } else {\n                // return \"rgba(140, 112, 140, 1)\"\n                if (props.showDarkTheme) {\n                  return \"rgb(255, 231, 227)\";\n                } else {\n                  return \"rgba(133, 165, 101, 1)\";\n                }\n              }\n            } else {\n              if (value > coverWaste[index - 1]) {\n                return \"rgba(255, 0, 0, 0.9)\";\n              } else {\n                // return \"rgba(140, 112, 140, 1)\"\n                if (props.showDarkTheme) {\n                  return \"rgb(255, 231, 227)\";\n                } else {\n                  return \"rgba(133, 165, 101, 1)\";\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard__aiPredictionsReport__height\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: getSpoilageData(spoilageWaste, props),\n    width: graphWidth,\n    height: graphHeight,\n    options: {\n      layout: {\n        padding: {\n          left: layoutPadding,\n          right: layoutPadding,\n          top: 30,\n          bottom: 30\n        }\n      },\n      responsive: true,\n      maintainAspectRatio: true,\n      tooltips: {\n        enabled: false\n      },\n      legend: {\n        display: false\n      },\n      scales: {\n        xAxes: [{\n          display: false,\n          gridLines: {\n            display: false\n          },\n          ticks: {\n            fontColor: \"rgb(15, 128, 140)\"\n          }\n        }],\n        yAxes: [{\n          display: false,\n          gridLines: {},\n          ticks: {\n            maxTicksLimit: 1,\n            beginAtZero: true\n          }\n        }]\n      },\n      plugins: {\n        datalabels: {\n          display: true,\n          anchor: \"top\",\n          align: \"top\",\n          font: {\n            size: labelFont,\n            weight: 600\n          },\n          color: function (context) {\n            var index = context.dataIndex;\n            var value = context.dataset.data[index];\n\n            if (props.showPounds) {\n              let prevValue = spoilageWaste[index - 1] * 2.775;\n\n              if (value > prevValue) {\n                return \"rgba(255, 0, 0, 0.9)\";\n              } else {\n                // return \"rgba(140, 112, 140, 1)\"\n                if (props.showDarkTheme) {\n                  return \"rgb(255, 231, 227)\";\n                } else {\n                  return \"rgba(133, 165, 101, 1)\";\n                }\n              }\n            } else {\n              if (value > spoilageWaste[index - 1]) {\n                return \"rgba(255, 0, 0, 0.9)\";\n              } else {\n                // return \"rgba(140, 112, 140, 1)\"\n                if (props.showDarkTheme) {\n                  return \"rgb(255, 231, 227)\";\n                } else {\n                  return \"rgba(133, 165, 101, 1)\";\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard__aiPredictionsReport__height\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: getPreparationData(prepWaste, props),\n    width: graphWidth,\n    height: graphHeight,\n    options: {\n      layout: {\n        padding: {\n          left: layoutPadding,\n          right: layoutPadding,\n          top: 30,\n          bottom: 30\n        }\n      },\n      responsive: true,\n      maintainAspectRatio: true,\n      tooltips: {\n        enabled: false\n      },\n      legend: {\n        display: false\n      },\n      scales: {\n        xAxes: [{\n          display: false,\n          gridLines: {\n            display: false\n          },\n          ticks: {\n            fontColor: \"rgb(15, 128, 140)\"\n          }\n        }],\n        yAxes: [{\n          display: false,\n          gridLines: {},\n          ticks: {\n            maxTicksLimit: 1,\n            beginAtZero: true\n          }\n        }]\n      },\n      plugins: {\n        datalabels: {\n          display: true,\n          anchor: \"top\",\n          align: \"top\",\n          font: {\n            size: labelFont,\n            weight: 600\n          },\n          color: function (context) {\n            var index = context.dataIndex;\n            var value = context.dataset.data[index];\n\n            if (props.showPounds) {\n              let prevValue = prepWaste[index - 1] * 2.775;\n\n              if (value > prevValue) {\n                return \"rgba(255, 0, 0, 0.9)\";\n              } else {\n                // return \"rgba(140, 112, 140, 1)\"\n                if (props.showDarkTheme) {\n                  return \"rgb(255, 231, 227)\";\n                } else {\n                  return \"rgba(133, 165, 101, 1)\";\n                }\n              }\n            } else {\n              if (value > prepWaste[index - 1]) {\n                return \"rgba(255, 0, 0, 0.9)\";\n              } else {\n                // return \"rgba(140, 112, 140, 1)\"\n                if (props.showDarkTheme) {\n                  return \"rgb(255, 231, 227)\";\n                } else {\n                  return \"rgba(133, 165, 101, 1)\";\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard__aiPredictionsReport__axisLabel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 13\n    }\n  }, months.map((data, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 17\n    }\n  }, data))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard__aiPredictionsReport__dateLabel__CSP\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard__aiPredictionsReport__dateLabel__CSP__coverwastesSquare\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 17\n    }\n  }), \"COVER\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard__aiPredictionsReport__dateLabel__CSP__spoliageSquare\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 17\n    }\n  }), \"SPOILAGE\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard__aiPredictionsReport__dateLabel__CSP__preparationSquare\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 17\n    }\n  }), \"PREPARATION\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 15\n    }\n  }, \"(Updated every Sunday)\"))))))));\n}","map":{"version":3,"sources":["/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/reports/ai-predictions-report.js"],"names":["React","useContext","useEffect","Line","setItemInLocalStorage","useWindowDimensions","AiPredictionDataContext","AccordionHeading","AccordionBody","months","graphHeight","graphWidth","labelFont","pointRadius","layoutPadding","getCoverData","values","props","data","labels","datasets","label","showPounds","map","item","toFixed","backgroundColor","barPercentage","categoryPercentage","lineTension","borderColor","pointBackgroundColor","getSpoilageData","getPreparationData","ProgressBar","aiPredictionsDisplayValueForCoverWaste","aiPredictionsDisplayValueForPrepWaste","aiPredictionsDisplayValueForSpoilageWaste","aiPredictionsActiveState","aiPredictionsToggleActive","month","coverWaste","setCoverWaste","useState","prepWaste","setPrepWaste","spoilageWaste","setSpoilageWaste","width","hideReport","aiPredictions","setAiPredictions","showDarkTheme","yearlyForcasts","monthlyForcasts","weeklyForcasts","dailyForcasts","layout","padding","left","right","top","bottom","responsive","maintainAspectRatio","tooltips","enabled","legend","display","scales","xAxes","gridLines","ticks","fontColor","yAxes","maxTicksLimit","beginAtZero","plugins","datalabels","anchor","align","font","size","weight","color","context","index","dataIndex","value","dataset","prevValue","i"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect} from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chartjs-plugin-annotation\";\nimport \"chartjs-plugin-datalabels\";\n\nimport {\n  setItemInLocalStorage,\n} from \"../../../../utilities.js\";\n\nimport useWindowDimensions from \"../../libs/use-window-dimensions\";\n\nimport { AiPredictionDataContext } from \"../../../../contexts/ai-prediction-data-context\";\nimport { AccordionHeading, AccordionBody } from \"../accordion\"\n\nlet months = [\n  \"JAN\",\n  \"FEB\",\n  \"MAR\",\n  \"APR\",\n  \"MAY\",\n  \"JUNE\",\n  \"JULY\",\n  \"AUG\",\n  \"SEP\",\n  \"OCT\",\n  \"NOV\",\n  \"DEC\",\n];\n\nlet graphHeight = 65;\nlet graphWidth = 400;\nlet labelFont = 10;\nlet pointRadius = 5;\nlet layoutPadding = 20;\n\nconst getCoverData = (values, props) => {\n  const data = {\n    labels: months,\n    datasets: [\n      {\n        label: \"Ai Prediction\",\n        data: props.showPounds\n        ? values.map((item) => {\n            return (item * 2.775).toFixed(0);\n          }) :\n          values,\n        backgroundColor: \"rgba(153, 177, 165, 0)\",\n        barPercentage: 0.7,\n        categoryPercentage: 0.9,\n        lineTension: 0,\n        borderColor: 'rgba(140, 112, 140, 0.5)',\n        pointRadius: pointRadius,\n        pointBackgroundColor: 'rgba(140, 112, 140, 0.5)',\n      }\n    ],\n  };\n  return data;\n};\n\nconst getSpoilageData = (values, props) => {\n  const data = {\n    labels: months,\n    datasets: [\n      {\n        label: \"Ai Prediction\",\n        data: props.showPounds\n        ? values.map((item) => {\n            return (item * 2.775).toFixed(0);\n          }) :\n          values,\n        backgroundColor: \"rgba(153, 177, 165, 0)\",\n        barPercentage: 0.7,\n        categoryPercentage: 0.9,\n        lineTension: 0,\n        borderColor: '#ff8c00',\n        pointRadius: pointRadius,\n        pointBackgroundColor: '#ff8c00',\n      }\n    ],\n  };\n  return data;\n};\n\nconst getPreparationData = (values, props) => {\n  const data = {\n    labels: months,\n    datasets: [\n      {\n        label: \"Ai Prediction\",\n        data: props.showPounds\n        ? values.map((item) => {\n            return (item * 2.775).toFixed(0);\n          }) :\n          values,\n        backgroundColor: \"rgba(153, 177, 165, 0)\",\n        barPercentage: 0.7,\n        categoryPercentage: 0.9,\n        lineTension: 0,\n        borderColor: 'rgba(133, 165, 101, 0.5)',\n        pointRadius: pointRadius,\n        pointBackgroundColor: 'rgba(133, 165, 101, 0.5)',\n      }\n    ],\n  };\n  return data;\n};\n\nexport default function ProgressBar(props) {\n\n  const {\n    aiPredictionsDisplayValueForCoverWaste,\n    aiPredictionsDisplayValueForPrepWaste,\n    aiPredictionsDisplayValueForSpoilageWaste,\n    aiPredictionsActiveState,\n    aiPredictionsToggleActive,\n    month,\n  } = useContext(AiPredictionDataContext);\n\n\n  const [ coverWaste, setCoverWaste] = React.useState([])\n  const [ prepWaste, setPrepWaste ] = React.useState([])\n  const [ spoilageWaste, setSpoilageWaste ] = React.useState([])\n\n  useEffect(() => {\n\n    //the code breaks when switch to FOXCAFE and to pounds because it is changing from array to 0 only. expects array.\n    const coverWaste = aiPredictionsDisplayValueForCoverWaste === 0 ? [] : aiPredictionsDisplayValueForCoverWaste;\n    const prepWaste = aiPredictionsDisplayValueForPrepWaste === 0 ? [] : aiPredictionsDisplayValueForPrepWaste;\n    const spoilageWaste = aiPredictionsDisplayValueForSpoilageWaste === 0 ? [] : aiPredictionsDisplayValueForSpoilageWaste;\n\n    setCoverWaste(coverWaste)\n    setPrepWaste(prepWaste)\n    setSpoilageWaste(spoilageWaste)\n\n  }, [\n    aiPredictionsDisplayValueForCoverWaste,\n    aiPredictionsDisplayValueForPrepWaste,\n    aiPredictionsDisplayValueForSpoilageWaste,\n  ])\n\n  const { width } = useWindowDimensions();\n\n  if (width <= 700) {\n    graphWidth = 260;\n    graphHeight = 65;\n    labelFont = 8;\n    pointRadius = 3;\n    layoutPadding = 20;\n  }\n\n  return (\n    <>\n    {!props.hideReport &&\n    <>\n\n      <AccordionHeading>\n        <div className=\"section-title\">AI PREDICTIONS</div>\n        <div className=\"container\">\n          {props.aiPredictions ? (\n            <span onClick={() =>\n            {\n              props.setAiPredictions(!props.aiPredictions)\n              setItemInLocalStorage(\"showAiPredictions\", !props.aiPredictions)\n            }\n            }>X</span>\n          ) : (\n            <span onClick={() =>\n            {\n              props.setAiPredictions(!props.aiPredictions)\n              setItemInLocalStorage(\"showAiPredictions\", !props.aiPredictions)\n            }\n            }> | | | </span>\n          )}\n        </div>\n      </AccordionHeading>\n\n      <AccordionBody open={props.aiPredictions}>\n        <div className= { props.showDarkTheme ? \"darkTheme__reportBackgroundColor addPaddingOfHalveRem\": \"originalTheme__reportBackgroundColor addPaddingOfHalveRem\"}>\n\n          <div className=\"dashboard__aiPredictionsReportHeading\">\n            <div className=\"section-title\">AI PREDICTIONS\n              <div className=\"applyMarginRightAndLeft\">{props.showPounds? \"(Â£)\" : \"(Kg)\" }</div>\n            </div>\n          </div>\n\n            <div className=\"dashboard__aiPredictionsReport__headingWrapper\">\n              <div className=\"dashboard__aiPredictionsReport__subHeading marginRight\">WASTE PREDICTION FOR</div>\n              <div className=\"dashboard__aiPredictionsReport__timePeriodMenu\">\n                <h2\n                  className={aiPredictionsActiveState.yearlyForcasts ? \"active\" : \"inactive\"}\n                  id={0}\n                  onClick={() => {\n                    aiPredictionsToggleActive(\"yearlyForcasts\");\n                  }}\n                  >Yr</h2>\n                <h2\n                  className={aiPredictionsActiveState.monthlyForcasts ? \"active\" : \"inactive\"}\n                  id={1}\n                  onClick={() => {\n                    aiPredictionsToggleActive(\"monthlyForcasts\");\n                  }}\n                  >Mth</h2>\n                <h2\n                  className={aiPredictionsActiveState.weeklyForcasts ? \"active\" : \"inactive\"}\n                  id={2}\n                  onClick={() => {\n                    aiPredictionsToggleActive(\"weeklyForcasts\");\n                  }}\n                  >Wk</h2>\n                <h2\n                  className={aiPredictionsActiveState.dailyForcasts ? \"active\" : \"inactive\"}\n                  id={3}\n                  onClick={() => {\n                    aiPredictionsToggleActive(\"dailyForcasts\");\n                  }}\n                  >Dy</h2>\n              </div>\n              <div className=\"marginRight applyPurpleColor cooperHewittBold\">IN {month}</div>\n            </div>\n\n            <div className=\"dashboard__aiPredictionsReportWrapper\">\n\n              <div className=\"dashboard__aiPredictionsReport__height\">\n              <Line\n                data={getCoverData(coverWaste, props)}\n                width={graphWidth}\n                height={graphHeight}\n                options={{\n                  layout: {\n                      padding: {\n                          left: layoutPadding,\n                          right: layoutPadding,\n                          top: 30,\n                          bottom: 30\n                      }\n                  },\n                  responsive: true,\n                  maintainAspectRatio: true,\n                  tooltips: {\n                    enabled: false,\n                  },\n                  legend: {\n                    display: false,\n                  },\n                  scales: {\n                    xAxes: [\n                      {\n                        display: false,\n                        gridLines: {\n                          display: false,\n                        },\n                        ticks: {\n                          fontColor: \"rgb(15, 128, 140)\",\n                        },\n                      },\n                    ],\n                    yAxes: [\n                      {\n                        display: false,\n                        gridLines: {},\n                        ticks: {\n                          maxTicksLimit: 1,\n                          beginAtZero: true,\n                        },\n                      },\n                    ],\n                  },\n                  plugins: {\n                    datalabels: {\n                      display: true,\n                      anchor: \"top\",\n                      align: \"top\",\n                      font: {\n                        size: labelFont,\n                        weight: 600,\n                      },\n                      color: function (context) {\n                          var index = context.dataIndex;\n                          var value = context.dataset.data[index];\n\n                            if (props.showPounds) {\n\n                              let prevValue = coverWaste[index - 1] * 2.775\n                              if (value > prevValue) {\n                                return \"rgba(255, 0, 0, 0.9)\"\n                              } else {\n                                // return \"rgba(140, 112, 140, 1)\"\n\n                                if (props.showDarkTheme) {\n                                  return \"rgb(255, 231, 227)\";\n                                } else {\n                                  return \"rgba(133, 165, 101, 1)\";\n                                }\n\n                              }\n\n                            } else {\n                                if (value > coverWaste[index - 1]) {\n                                  return \"rgba(255, 0, 0, 0.9)\"\n                                } else {\n                                  // return \"rgba(140, 112, 140, 1)\"\n\n                                  if (props.showDarkTheme) {\n                                  return \"rgb(255, 231, 227)\";\n                                  } else {\n                                    return \"rgba(133, 165, 101, 1)\";\n                                  }\n\n                                }\n                            }\n\n                      },\n                    },\n                  },\n                }}\n              />\n            </div>\n\n            <div className=\"dashboard__aiPredictionsReport__height\">\n              <Line\n                data={getSpoilageData(spoilageWaste, props)}\n                width={graphWidth}\n                height={graphHeight}\n                options={{\n                  layout: {\n                      padding: {\n                          left: layoutPadding,\n                          right: layoutPadding,\n                          top: 30,\n                          bottom: 30\n                      }\n                  },\n                  responsive: true,\n                  maintainAspectRatio: true,\n                  tooltips: {\n                    enabled: false,\n                  },\n                  legend: {\n                    display: false,\n                  },\n                  scales: {\n                    xAxes: [\n                      {\n                        display: false,\n                        gridLines: {\n                          display: false,\n                        },\n                        ticks: {\n                          fontColor: \"rgb(15, 128, 140)\",\n                        },\n                      },\n                    ],\n                    yAxes: [\n                      {\n                        display: false,\n                        gridLines: {},\n                        ticks: {\n                          maxTicksLimit: 1,\n                          beginAtZero: true,\n                        },\n                      },\n                    ],\n                  },\n                  plugins: {\n                    datalabels: {\n                      display: true,\n                      anchor: \"top\",\n                      align: \"top\",\n                      font: {\n                        size: labelFont,\n                        weight: 600,\n                      },\n                      color: function (context) {\n                            var index = context.dataIndex;\n                            var value = context.dataset.data[index];\n\n                            if (props.showPounds) {\n\n                              let prevValue = spoilageWaste[index - 1] * 2.775\n                              if (value > prevValue) {\n                                return \"rgba(255, 0, 0, 0.9)\"\n                              } else {\n\n                                // return \"rgba(140, 112, 140, 1)\"\n\n                                if (props.showDarkTheme) {\n                                return \"rgb(255, 231, 227)\";\n                                } else {\n                                  return \"rgba(133, 165, 101, 1)\";\n                                }\n\n\n                              }\n\n                            } else {\n                              if (value > spoilageWaste[index - 1]) {\n                                return \"rgba(255, 0, 0, 0.9)\"\n                              } else {\n\n                                // return \"rgba(140, 112, 140, 1)\"\n\n\n                                if (props.showDarkTheme) {\n                                return \"rgb(255, 231, 227)\";\n                                } else {\n                                  return \"rgba(133, 165, 101, 1)\";\n                                }\n\n                              }\n                            }\n                      },\n                    },\n                  },\n                }}\n              />\n            </div>\n\n            <div className=\"dashboard__aiPredictionsReport__height\">\n              <Line\n                data={getPreparationData(prepWaste, props)}\n                width={graphWidth}\n                height={graphHeight}\n                options={{\n                  layout: {\n                      padding: {\n                          left: layoutPadding,\n                          right: layoutPadding,\n                          top: 30,\n                          bottom: 30\n                      }\n                  },\n                  responsive: true,\n                  maintainAspectRatio: true,\n                  tooltips: {\n                    enabled: false,\n                  },\n                  legend: {\n                    display: false,\n                  },\n                  scales: {\n                    xAxes: [\n                      {\n                        display: false,\n                        gridLines: {\n                          display: false,\n                        },\n                        ticks: {\n                          fontColor: \"rgb(15, 128, 140)\",\n                        },\n                      },\n                    ],\n                    yAxes: [\n                      {\n                        display: false,\n                        gridLines: {},\n                        ticks: {\n                          maxTicksLimit: 1,\n                          beginAtZero: true,\n                        },\n                      },\n                    ],\n                  },\n                  plugins: {\n                    datalabels: {\n                      display: true,\n                      anchor: \"top\",\n                      align: \"top\",\n                      font: {\n                        size: labelFont,\n                        weight: 600,\n                      },\n                      color: function (context) {\n                            var index = context.dataIndex;\n                            var value = context.dataset.data[index];\n\n                            if (props.showPounds) {\n\n                              let prevValue = prepWaste[index - 1] * 2.775\n                              if (value > prevValue) {\n                                return \"rgba(255, 0, 0, 0.9)\"\n                              } else {\n                                // return \"rgba(140, 112, 140, 1)\"\n\n\n                                if (props.showDarkTheme) {\n                                return \"rgb(255, 231, 227)\";\n                                } else {\n                                  return \"rgba(133, 165, 101, 1)\";\n                                }\n\n                              }\n\n                              } else {\n                              if (value > prepWaste[index - 1]) {\n                                return \"rgba(255, 0, 0, 0.9)\"\n                              } else {\n                                // return \"rgba(140, 112, 140, 1)\"\n\n\n                                if (props.showDarkTheme) {\n                                return \"rgb(255, 231, 227)\";\n                                } else {\n                                  return \"rgba(133, 165, 101, 1)\";\n                                }\n\n                              }\n                            }\n\n\n                      },\n                    },\n                  },\n                }}\n              />\n            </div>\n\n\n            <div className=\"dashboard__aiPredictionsReport__axisLabel\">\n              {months.map((data, i) => (\n                <div key={i}>{data}</div>\n              ))}\n            </div>\n\n            <div>\n              <div className=\"dashboard__aiPredictionsReport__dateLabel__CSP\">\n                <div className=\"dashboard__aiPredictionsReport__dateLabel__CSP__coverwastesSquare\"></div>\n                COVER\n                <div className=\"dashboard__aiPredictionsReport__dateLabel__CSP__spoliageSquare\"></div>\n                SPOILAGE\n                <div className=\"dashboard__aiPredictionsReport__dateLabel__CSP__preparationSquare\"></div>\n                PREPARATION\n              </div>\n\n              <div className=\"graph__row\">\n              <div className=\"graph__message\">\n                (Updated every Sunday)\n              </div>\n              </div>\n\n            </div>\n\n\n\n\n            </div>\n\n        </div>\n      </AccordionBody>\n\n    </>\n    }\n    </>\n\n\n  );\n}\n"]},"metadata":{},"sourceType":"module"}