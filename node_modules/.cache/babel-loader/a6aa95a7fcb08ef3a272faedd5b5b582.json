{"ast":null,"code":"import { API } from \"aws-amplify\";\nimport CheckRequest from \"./shared/components/libs/use-check-request\";\nconst {\n  checkWeeklyWasteData,\n  checkWastePerCoverOrSales,\n  checkAllSitesData,\n  checkGetDailyAndWeeklyDatesData\n} = CheckRequest(); // getWastePerCover,\n\nexport const getWastePerCover = (id, company, site, month, year) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getWastePerCoverData`, {\n      'queryStringParameters': {\n        'id': id,\n        'company': company,\n        'site': site,\n        'month': month // 'year': year\n\n      }\n    }).then(res => {\n      const result = checkWastePerCoverOrSales(res);\n      resolve(result);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}; // getWastePerSales,\n\nexport const getWastePerSales = (id, company, site, month, year) => {\n  // console.log(\"monthly\",month)\n  // console.log(\"yearly\",year)\n  // console.log(\"selectedSiteValueID\",site)\n  // console.log(\"companyID\",id)\n  // console.log(\"companyName\",company)\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getWastePerSalesData`, {\n      'queryStringParameters': {\n        'id': id,\n        'company': company,\n        'site': site,\n        'month': month // 'year': year\n\n      }\n    }).then(res => {\n      // console.log(\"here res\",res)\n      const result = checkWastePerCoverOrSales(res); // console.log(\"result\",result)\n\n      resolve(result);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}; // getMonthlyWastes,\n\nexport const getMonthlyWastes = (companyNumber, companyName, siteID) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getMonthlyWasteData`, {\n      'queryStringParameters': {\n        'companyName': companyName,\n        'companyNumber': companyNumber,\n        'siteID': siteID\n      }\n    }).then(res => {\n      // console.log(\"res\", res);\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}; // getAllCompaniesBack,\n\nexport const getAllCompaniesBack = () => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getAllCompaniesBack`).then(res => {\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}; // getAllSitesData,\n\nexport const getAllSitesData = (companyNumber, companyName) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getAllSitesData`, {\n      'queryStringParameters': {\n        'id': companyNumber,\n        'companyName': companyName\n      }\n    }).then(res => {\n      const result = checkAllSitesData(res); // console.log(\"result\",result)\n      // console.log(\"res\",res)\n\n      resolve(result);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}; // getWeeklyWaste,\n\nexport const getWeeklyWaste = (companyNumber, companyName, siteID) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getWeeklyWasteData`, {\n      'queryStringParameters': {\n        'companyName': companyName,\n        'companyNumber': companyNumber,\n        'siteID': siteID\n      }\n    }).then(res => {\n      const result = checkWeeklyWasteData(res);\n      resolve(result);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}; // getTargets,\n\nexport const getTargets = (id, company, site) => {\n  // console.log(\"getTargets\")\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getTargets`, {\n      'queryStringParameters': {\n        'id': id,\n        'company': company,\n        'site': site\n      }\n    }).then(res => {\n      // console.log(\"res\",res)\n      resolve(res);\n    }).catch(error => {\n      // console.log(\"error\",error)\n      reject(error);\n    });\n  });\n}; // getAiPredictionData,\n\nexport const getAiPredictionData = (id, company, site) => {\n  // console.log(\"selectedSiteValueID\",site)\n  // console.log(\"companyID\",id)\n  // console.log(\"companyName\",company)\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getAiPredictionData`, {\n      'queryStringParameters': {\n        'id': id,\n        'company': company,\n        'site': site\n      }\n    }).then(res => {\n      // console.log(\"res\",res)\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}; // getCapping,\n\nexport const getCapping = (id, company, site) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getCapping`, {\n      'queryStringParameters': {\n        'id': id,\n        'company': company,\n        'site': site\n      }\n    }).then(res => {\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}; // getDailyAndWeeklyDatesData,\n\nexport const getDailyAndWeeklyDatesData = (companyNumber, companyName, siteID) => {\n  // console.log(\"getDailyAndWeeklyDatesData companyNumber\", companyNumber)\n  // console.log(\"getDailyAndWeeklyDatesData companyName\", companyName)\n  // console.log(\"getDailyAndWeeklyDatesData siteID\", siteID)\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getDailyAndWeeklyDatesData`, {\n      'queryStringParameters': {\n        'companyName': companyName,\n        'companyNumber': companyNumber,\n        'siteID': siteID\n      }\n    }).then(res => {\n      const result = checkGetDailyAndWeeklyDatesData(res); // console.log(\"result\",result);\n\n      resolve(result);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}; // getCoverInput,\n\nexport const getCoverInput = (companyNumber, companyName, siteID) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getCoverInput`, {\n      'queryStringParameters': {\n        'companyName': companyName,\n        'companyNumber': companyNumber,\n        'siteID': siteID\n      }\n    }).then(res => {\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}; // getSalesInput\n\nexport const getSalesInput = (companyNumber, companyName, siteID) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getSalesInput`, {\n      'queryStringParameters': {\n        'companyName': companyName,\n        'companyNumber': companyNumber,\n        'siteID': siteID\n      }\n    }).then(res => {\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}; // getMasterTableData\n\nexport const getMasterTableData = (companyName, companyId) => {\n  return new Promise((resolve, reject) => {\n    // console.log(\"companyId\",companyId)\n    // console.log(\"companyName\",companyName)\n    API.get(\"wastes\", `/masterTableData`, {\n      'queryStringParameters': {\n        'companyId': companyId,\n        'companyName': companyName\n      }\n    }).then(res => {\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}; //OTHER GET REQUESTS\n\nexport const getLoginTimeFromUsers = (companyNumber, companyName) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getLoginTimeFromUsers`, {\n      'queryStringParameters': {\n        'companyName': companyName,\n        'companyNumber': companyNumber\n      }\n    }).then(res => {\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const addToGroup = (username, groupName) => {\n  // console.log(\"username\",username)\n  // console.log(\"groupName\",groupName)\n  return new Promise((resolve, reject) => {\n    API.post(\"wastes\", `/addUserToGroup`, {\n      body: {\n        username,\n        groupName\n      }\n    }).then(res => {\n      resolve(res);\n    }).catch(error => {\n      console.log(\"error\", error);\n      reject(error);\n    });\n  });\n};\nexport const getLastYearMonthlyWaste = (companyNumber, companyName, siteID) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getLastYearMonthlyWaste`, {\n      'queryStringParameters': {\n        'companyName': companyName,\n        'companyNumber': companyNumber,\n        'siteID': siteID\n      }\n    }).then(res => {\n      // console.log(\"res\",res)\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}; // getMenuInput,\n\nexport const getMenuInput = (companyNumber, companyName, siteID) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getMenuInput`, {\n      'queryStringParameters': {\n        'companyName': companyName,\n        'companyNumber': companyNumber,\n        'siteID': siteID\n      }\n    }).then(res => {\n      // console.log(\"getMenuInput\",res)\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}; //GET WASTE ON A DAY OF THE WEEK\n\nexport const getWasteOnAdayOfTheWeek = (id, company, site, day, year) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getWasteOnADayOfTheWeek`, {\n      'queryStringParameters': {\n        'id': id,\n        'company': company,\n        'site': site,\n        'day': day,\n        'year': year\n      }\n    }).then(res => {\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const getTopCausesOfWaste = (id, companyName, siteId) => {\n  // console.log(\"id getTopCausesOfWaste\", id)\n  // console.log(\"companyName getTopCausesOfWaste\", companyName)\n  // console.log(\"siteId getTopCausesOfWaste\", siteId)\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getTopCausesOfWaste`, {\n      'queryStringParameters': {\n        'companyName': companyName,\n        'id': id,\n        'siteID': siteId\n      }\n    }).then(res => {\n      // console.log(\" getTopCausesOfWaste res\", res)\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const getAllCompanies = () => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getAllCompanies`).then(res => {\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}; //OTHER UPDATE/POST REQUESTS\n\nexport const updateUsersAttribute = (username, value) => {\n  return new Promise((resolve, reject) => {\n    API.post(\"wastes\", `/updateUsersAttribute`, {\n      body: {\n        username,\n        value\n      }\n    }).then(res => {\n      resolve(res);\n    }).catch(error => {\n      console.log(\"error updateUsersAttribute\", error);\n      reject(error);\n    });\n  });\n};\nexport const updateUsersLoginTime = (userDetails, companyID, time) => {\n  // console.log(\"userDetails\",userDetails)\n  // console.log(\"companyID\",companyID)\n  // console.log(\"time\",time)\n  return new Promise((resolve, reject) => {\n    API.put(\"wastes\", `/updateUsersLoginTime/${companyID}`, {\n      body: {\n        userDetails,\n        time\n      }\n    }).then(res => {\n      resolve(res);\n    }).catch(error => {\n      console.log(\"error updateUsersLoginTime\", error);\n      reject(error);\n    });\n  });\n};\nexport const createUserLoginTime = (name, username, company, companyID) => {\n  return new Promise((resolve, reject) => {\n    API.post(\"wastes\", `/createUserLoginTime/`, {\n      body: {\n        name,\n        username,\n        company,\n        companyID\n      }\n    }).then(res => {\n      resolve(res);\n    }).catch(error => {\n      console.log(\"error\", error);\n      reject(error);\n    });\n  });\n};\nexport const addCoverInput = covers => {\n  return new Promise((resolve, reject) => {\n    API.post(\"wastes\", `/addCoverInput`, {\n      body: covers\n    }).then(res => {\n      resolve(res);\n    }).catch(error => {\n      console.log(\"error\", error);\n      reject(error);\n    });\n  });\n};\nexport const addSalesInput = sales => {\n  return new Promise((resolve, reject) => {\n    API.post(\"wastes\", `/addSalesInput`, {\n      body: sales\n    }).then(res => {\n      resolve(res);\n    }).catch(error => {\n      console.log(\"error\", error);\n      reject(error);\n    });\n  });\n};\nexport const postTargets = data => {\n  // console.log(\"data\",data)\n  return new Promise((resolve, reject) => {\n    API.put(\"wastes\", `/updateRecommendedTargets`, {\n      body: data\n    }).then(res => {\n      // console.log(\"res\",res)\n      resolve(res);\n    }).catch(error => {\n      console.log(\"error\", error);\n      reject(error);\n    });\n  });\n};\nexport const postCapping = data => {\n  return new Promise((resolve, reject) => {\n    API.put(\"wastes\", `/updateCapping`, {\n      body: data\n    }).then(res => {\n      resolve(res);\n    }).catch(error => {\n      console.log(\"error\", error);\n      reject(error);\n    });\n  });\n};\nexport const verifyEmail = email => {\n  return new Promise((resolve, reject) => {\n    API.post(\"wastes\", `/verifyEmailIdentity`, {\n      body: {\n        email\n      }\n    }).then(res => {\n      resolve(res);\n    }).catch(error => {\n      console.log(\"error\", error);\n      reject(error);\n    });\n  });\n}; // getPerformanceData,\n\nexport const getPerformanceData = (companyNumber, companyName, siteName) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getPerformanceData`, {\n      'queryStringParameters': {\n        'id': companyNumber,\n        'company': companyName,\n        'site': siteName\n      }\n    }).then(res => {\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const addMenuInput = (menuItems, siteName, companyName, id) => {\n  const companyInformation = {\n    siteName: siteName,\n    companyName: companyName,\n    id: id\n  }; // console.log(\"menuItems\",menuItems);\n\n  return new Promise((resolve, reject) => {\n    API.put(\"wastes\", `/addMenuInput`, {\n      body: {\n        menuItems: menuItems,\n        companyInformation: companyInformation\n      }\n    }).then(res => {\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const addProductionPreparationInputs = (productionPreparation, siteName, companyName, id) => {\n  const companyInformation = {\n    siteName: siteName,\n    companyName: companyName,\n    id: id\n  }; // console.log(\"companyInformation\",companyInformation);\n  // console.log(\"productionPreparation\",productionPreparation);\n\n  return new Promise((resolve, reject) => {\n    API.put(\"wastes\", `/addProductionPreparationInputs`, {\n      body: {\n        productionPreparation: productionPreparation,\n        companyInformation: companyInformation\n      }\n    }).then(res => {\n      // console.log(\"productionPreparation\", res)\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}; // getProductionPreparationInputs,\n\nexport const getProductionPreparationInputs = (companyNumber, companyName, siteID) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getProductionPreparationInputs`, {\n      'queryStringParameters': {\n        'companyName': companyName,\n        'companyNumber': companyNumber,\n        'siteID': siteID\n      }\n    }).then(res => {\n      // console.log(\"getProductionPreparationInputs\",res)\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const getProductionPreparationInputsForGraph = (companyNumber, companyName, siteID, weekOfYear) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getProductionPreparationInputsForGraph`, {\n      'queryStringParameters': {\n        'companyName': companyName,\n        'companyNumber': companyNumber,\n        'siteID': siteID,\n        'weekOfYear': weekOfYear\n      }\n    }).then(res => {\n      // console.log(\"getProductionPreparationInputsForGraph\",res)\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}; // getWasteLabel\n\nexport const getWasteLabel = (companyName, companyId, siteName) => {\n  return new Promise((resolve, reject) => {\n    // console.log(\"companyId\",companyId)\n    // console.log(\"companyName\",companyName)\n    API.get(\"wastes\", `/getWasteLabels`, {\n      'queryStringParameters': {\n        'companyId': companyId,\n        'companyName': companyName,\n        'siteName': siteName\n      }\n    }).then(res => {\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}; // export const getPublicLiveFeed = (companyNumber, companyName, siteName) => {\n//   return new Promise((resolve, reject) => {\n//     API.get(\"livefeed\", `/getPublicLiveFeed`, {\n//       'queryStringParameters': {\n//         'id': companyNumber,\n//         'companyName': companyName,\n//         'siteName': siteName\n//       }\n//     }).then((res) => {\n//       console.log(\"res\",res)\n//       resolve(res);\n//     })\n//     .catch((error) => {\n//       reject(error);\n//     });\n//   });\n// };\n\nexport const getPublicLiveFeed = (companyNumber, companyName, siteName) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getPublicLiveFeed`, {\n      'queryStringParameters': {\n        'id': companyNumber,\n        'companyName': companyName,\n        'siteName': siteName\n      }\n    }).then(res => {\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const updateLiveFeedContent = (data, siteName, companyName, id) => {\n  const companyInformation = {\n    siteName: siteName,\n    companyName: companyName,\n    id: id\n  };\n  return new Promise((resolve, reject) => {\n    API.post(\"wastes\", `/updateLiveFeedContent`, {\n      body: {\n        contentResponses: data,\n        companyInformation: companyInformation\n      }\n    }).then(res => {\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const getLiveFeedContent = (companyNumber, companyName, siteName) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getLiveFeedContent`, {\n      'queryStringParameters': {\n        'id': companyNumber,\n        'companyName': companyName,\n        'siteName': siteName\n      }\n    }).then(res => {\n      console.log(\"getLiveFeedContent\", res);\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const filterLiveFeedContent = (companyNumber, companyName, siteName, weekNumber) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/filterLiveFeedContent`, {\n      'queryStringParameters': {\n        'id': companyNumber,\n        'companyName': companyName,\n        'siteName': siteName,\n        \"weekNumber\": weekNumber\n      }\n    }).then(res => {\n      resolve(res);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};","map":{"version":3,"sources":["/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/api.js"],"names":["API","CheckRequest","checkWeeklyWasteData","checkWastePerCoverOrSales","checkAllSitesData","checkGetDailyAndWeeklyDatesData","getWastePerCover","id","company","site","month","year","Promise","resolve","reject","get","then","res","result","catch","error","getWastePerSales","getMonthlyWastes","companyNumber","companyName","siteID","getAllCompaniesBack","getAllSitesData","getWeeklyWaste","getTargets","getAiPredictionData","getCapping","getDailyAndWeeklyDatesData","getCoverInput","getSalesInput","getMasterTableData","companyId","getLoginTimeFromUsers","addToGroup","username","groupName","post","body","console","log","getLastYearMonthlyWaste","getMenuInput","getWasteOnAdayOfTheWeek","day","getTopCausesOfWaste","siteId","getAllCompanies","updateUsersAttribute","value","updateUsersLoginTime","userDetails","companyID","time","put","createUserLoginTime","name","addCoverInput","covers","addSalesInput","sales","postTargets","data","postCapping","verifyEmail","email","getPerformanceData","siteName","addMenuInput","menuItems","companyInformation","addProductionPreparationInputs","productionPreparation","getProductionPreparationInputs","getProductionPreparationInputsForGraph","weekOfYear","getWasteLabel","getPublicLiveFeed","updateLiveFeedContent","contentResponses","getLiveFeedContent","filterLiveFeedContent","weekNumber"],"mappings":"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","sourcesContent":["import { API } from \"aws-amplify\";\nimport CheckRequest from \"./shared/components/libs/use-check-request\"\n\nconst {\n  checkWeeklyWasteData,\n  checkWastePerCoverOrSales,\n  checkAllSitesData,\n  checkGetDailyAndWeeklyDatesData\n} = CheckRequest()\n\n// getWastePerCover,\nexport const getWastePerCover = (id, company, site, month, year) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getWastePerCoverData`,\n      {\n        'queryStringParameters': {\n          'id': id,\n          'company': company,\n          'site': site,\n          'month': month,\n          // 'year': year\n        }\n      }\n    )\n      .then((res) => {\n        const result = checkWastePerCoverOrSales(res)\n        resolve(result);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\n// getWastePerSales,\nexport const getWastePerSales = (id, company, site, month, year) => {\n  // console.log(\"monthly\",month)\n  // console.log(\"yearly\",year)\n  // console.log(\"selectedSiteValueID\",site)\n  // console.log(\"companyID\",id)\n  // console.log(\"companyName\",company)\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getWastePerSalesData`,\n      {\n        'queryStringParameters': {\n          'id': id,\n          'company': company,\n          'site': site,\n          'month': month,\n          // 'year': year\n        }\n      }\n    )\n      .then((res) => {\n        // console.log(\"here res\",res)\n        const result = checkWastePerCoverOrSales(res)\n        // console.log(\"result\",result)\n        resolve(result);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\n// getMonthlyWastes,\nexport const getMonthlyWastes = (companyNumber, companyName, siteID) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getMonthlyWasteData`, {\n      'queryStringParameters': {\n        'companyName': companyName,\n        'companyNumber': companyNumber,\n        'siteID': siteID\n      }\n    }).then((res) => {\n      // console.log(\"res\", res);\n      resolve(res);\n    })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\n// getAllCompaniesBack,\nexport const getAllCompaniesBack = () => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getAllCompaniesBack`).then((res) => {\n      resolve(res);\n    })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\n// getAllSitesData,\nexport const getAllSitesData = (companyNumber, companyName) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getAllSitesData`, {\n      'queryStringParameters': {\n        'id': companyNumber,\n        'companyName': companyName\n      }\n    }).then((res) => {\n      const result = checkAllSitesData(res);\n      // console.log(\"result\",result)\n      // console.log(\"res\",res)\n      resolve(result);\n    })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\n// getWeeklyWaste,\nexport const getWeeklyWaste = (companyNumber, companyName, siteID) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getWeeklyWasteData`,\n      {\n        'queryStringParameters': {\n          'companyName': companyName,\n          'companyNumber': companyNumber,\n          'siteID': siteID\n        }\n      }\n    ).then((res) => {\n      const result = checkWeeklyWasteData(res)\n      resolve(result);\n    })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\n// getTargets,\nexport const getTargets = (id, company, site) => {\n  // console.log(\"getTargets\")\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getTargets`,\n      {\n        'queryStringParameters': {\n          'id': id,\n          'company': company,\n          'site': site\n        }\n      }\n    )\n      .then((res) => {\n        // console.log(\"res\",res)\n        resolve(res);\n      })\n      .catch((error) => {\n        // console.log(\"error\",error)\n        reject(error);\n      });\n  });\n};\n\n// getAiPredictionData,\nexport const getAiPredictionData = (id, company, site) => {\n  // console.log(\"selectedSiteValueID\",site)\n  // console.log(\"companyID\",id)\n  // console.log(\"companyName\",company)\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getAiPredictionData`,\n      {\n        'queryStringParameters': {\n          'id': id,\n          'company': company,\n          'site': site\n        }\n      }\n    )\n      .then((res) => {\n        // console.log(\"res\",res)\n        resolve(res);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\n// getCapping,\nexport const getCapping = (id, company, site) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getCapping`,\n      {\n        'queryStringParameters': {\n          'id': id,\n          'company': company,\n          'site': site\n        }\n      }\n    )\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\n// getDailyAndWeeklyDatesData,\nexport const getDailyAndWeeklyDatesData = (companyNumber, companyName, siteID) => {\n\n  // console.log(\"getDailyAndWeeklyDatesData companyNumber\", companyNumber)\n  // console.log(\"getDailyAndWeeklyDatesData companyName\", companyName)\n  // console.log(\"getDailyAndWeeklyDatesData siteID\", siteID)\n\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getDailyAndWeeklyDatesData`,\n      {\n        'queryStringParameters': {\n          'companyName': companyName,\n          'companyNumber': companyNumber,\n          'siteID': siteID\n        }\n      }\n    ).then((res) => {\n      const result = checkGetDailyAndWeeklyDatesData(res)\n      // console.log(\"result\",result);\n      resolve(result);\n    })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\n// getCoverInput,\nexport const getCoverInput = (companyNumber, companyName, siteID) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getCoverInput`,\n      {\n        'queryStringParameters': {\n          'companyName': companyName,\n          'companyNumber': companyNumber,\n          'siteID': siteID\n        }\n      }\n    )\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\n// getSalesInput\nexport const getSalesInput = (companyNumber, companyName, siteID) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getSalesInput`,\n      {\n        'queryStringParameters': {\n          'companyName': companyName,\n          'companyNumber': companyNumber,\n          'siteID': siteID\n        }\n      }\n    )\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\n// getMasterTableData\nexport const getMasterTableData = (companyName, companyId) => {\n  return new Promise((resolve, reject) => {\n\n    // console.log(\"companyId\",companyId)\n    // console.log(\"companyName\",companyName)\n\n    API.get(\"wastes\", `/masterTableData`,\n      {\n        'queryStringParameters': {\n          'companyId': companyId,\n          'companyName': companyName,\n        }\n      }\n    )\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\n\n//OTHER GET REQUESTS\nexport const getLoginTimeFromUsers = (companyNumber, companyName) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getLoginTimeFromUsers`, {\n      'queryStringParameters': {\n        'companyName': companyName,\n        'companyNumber': companyNumber\n      }\n    }).then((res) => {\n      resolve(res);\n    })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\nexport const addToGroup = (username, groupName) => {\n  // console.log(\"username\",username)\n  // console.log(\"groupName\",groupName)\n\n  return new Promise((resolve, reject) => {\n    API.post(\"wastes\", `/addUserToGroup`, { body: { username, groupName } })\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((error) => {\n        console.log(\"error\", error)\n        reject(error);\n      });\n  });\n};\n\nexport const getLastYearMonthlyWaste = (companyNumber, companyName, siteID) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getLastYearMonthlyWaste`, {\n      'queryStringParameters': {\n        'companyName': companyName,\n        'companyNumber': companyNumber,\n        'siteID': siteID\n      }\n    }).then((res) => {\n      // console.log(\"res\",res)\n      resolve(res);\n    })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\n// getMenuInput,\nexport const getMenuInput = (companyNumber, companyName, siteID) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getMenuInput`,\n      {\n        'queryStringParameters': {\n          'companyName': companyName,\n          'companyNumber': companyNumber,\n          'siteID': siteID\n        }\n      }\n    )\n      .then((res) => {\n        // console.log(\"getMenuInput\",res)\n        resolve(res);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\n//GET WASTE ON A DAY OF THE WEEK\nexport const getWasteOnAdayOfTheWeek = (id, company, site, day, year) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getWasteOnADayOfTheWeek`,\n      {\n        'queryStringParameters': {\n          'id': id,\n          'company': company,\n          'site': site,\n          'day': day,\n          'year': year\n        }\n      }\n    )\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\nexport const getTopCausesOfWaste = (id, companyName, siteId) => {\n\n  // console.log(\"id getTopCausesOfWaste\", id)\n  // console.log(\"companyName getTopCausesOfWaste\", companyName)\n  // console.log(\"siteId getTopCausesOfWaste\", siteId)\n\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getTopCausesOfWaste`, {\n      'queryStringParameters': {\n        'companyName': companyName,\n        'id': id,\n        'siteID': siteId\n      }\n    }).then((res) => {\n      // console.log(\" getTopCausesOfWaste res\", res)\n      resolve(res);\n    })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\nexport const getAllCompanies = () => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getAllCompanies`).then((res) => {\n      resolve(res);\n    })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\n//OTHER UPDATE/POST REQUESTS\n\nexport const updateUsersAttribute = (username, value) => {\n  return new Promise((resolve, reject) => {\n    API.post(\"wastes\", `/updateUsersAttribute`, { body: { username, value } })\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((error) => {\n        console.log(\"error updateUsersAttribute\", error)\n        reject(error);\n      });\n  });\n};\n\nexport const updateUsersLoginTime = (userDetails, companyID, time) => {\n  // console.log(\"userDetails\",userDetails)\n  // console.log(\"companyID\",companyID)\n  // console.log(\"time\",time)\n\n  return new Promise((resolve, reject) => {\n    API.put(\"wastes\", `/updateUsersLoginTime/${companyID}`, { body: { userDetails, time } })\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((error) => {\n        console.log(\"error updateUsersLoginTime\", error)\n        reject(error);\n      });\n  });\n};\n\nexport const createUserLoginTime = (name, username, company, companyID) => {\n  return new Promise((resolve, reject) => {\n    API.post(\"wastes\", `/createUserLoginTime/`, { body: { name, username, company, companyID } })\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((error) => {\n        console.log(\"error\", error)\n        reject(error);\n      });\n  });\n}\n\nexport const addCoverInput = (covers) => {\n  return new Promise((resolve, reject) => {\n    API.post(\"wastes\", `/addCoverInput`, { body: covers })\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((error) => {\n        console.log(\"error\", error)\n        reject(error);\n      });\n  });\n};\n\nexport const addSalesInput = (sales) => {\n  return new Promise((resolve, reject) => {\n    API.post(\"wastes\", `/addSalesInput`, { body: sales })\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((error) => {\n        console.log(\"error\", error)\n        reject(error);\n      });\n  });\n};\n\nexport const postTargets = (data) => {\n  // console.log(\"data\",data)\n  return new Promise((resolve, reject) => {\n    API.put(\"wastes\", `/updateRecommendedTargets`, { body: data })\n      .then((res) => {\n        // console.log(\"res\",res)\n        resolve(res);\n      })\n      .catch((error) => {\n        console.log(\"error\", error)\n        reject(error);\n      });\n  });\n};\n\nexport const postCapping = (data) => {\n  return new Promise((resolve, reject) => {\n    API.put(\"wastes\", `/updateCapping`, { body: data })\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((error) => {\n        console.log(\"error\", error)\n        reject(error);\n      });\n  });\n};\n\nexport const verifyEmail = (email) => {\n  return new Promise((resolve, reject) => {\n    API.post(\"wastes\", `/verifyEmailIdentity`, { body: { email } })\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((error) => {\n        console.log(\"error\", error)\n        reject(error);\n      });\n  });\n};\n\n// getPerformanceData,\nexport const getPerformanceData = (companyNumber, companyName, siteName) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getPerformanceData`, {\n      'queryStringParameters': {\n        'id': companyNumber,\n        'company': companyName,\n        'site': siteName\n      }\n    }).then((res) => {\n      resolve(res);\n    })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\nexport const addMenuInput = (menuItems, siteName, companyName, id) => {\n\n  const companyInformation = {\n    siteName: siteName,\n    companyName: companyName,\n    id: id\n  };\n\n  // console.log(\"menuItems\",menuItems);\n  return new Promise((resolve, reject) => {\n    API.put(\"wastes\", `/addMenuInput`, { body: { menuItems: menuItems, companyInformation: companyInformation } })\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\nexport const addProductionPreparationInputs = (productionPreparation, siteName, companyName, id) => {\n  const companyInformation = {\n    siteName: siteName,\n    companyName: companyName,\n    id: id\n  };\n  // console.log(\"companyInformation\",companyInformation);\n  // console.log(\"productionPreparation\",productionPreparation);\n\n  return new Promise((resolve, reject) => {\n    API.put(\"wastes\", `/addProductionPreparationInputs`, { body: { productionPreparation: productionPreparation, companyInformation: companyInformation } })\n      .then((res) => {\n        // console.log(\"productionPreparation\", res)\n        resolve(res);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\n// getProductionPreparationInputs,\nexport const getProductionPreparationInputs = (companyNumber, companyName, siteID) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getProductionPreparationInputs`,\n      {\n        'queryStringParameters': {\n          'companyName': companyName,\n          'companyNumber': companyNumber,\n          'siteID': siteID\n        }\n      }\n    )\n      .then((res) => {\n        // console.log(\"getProductionPreparationInputs\",res)\n        resolve(res);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\nexport const getProductionPreparationInputsForGraph = (companyNumber, companyName, siteID, weekOfYear) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getProductionPreparationInputsForGraph`,\n      {\n        'queryStringParameters': {\n          'companyName': companyName,\n          'companyNumber': companyNumber,\n          'siteID': siteID,\n          'weekOfYear': weekOfYear\n        }\n      }\n    )\n      .then((res) => {\n        // console.log(\"getProductionPreparationInputsForGraph\",res)\n        resolve(res);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\n// getWasteLabel\nexport const getWasteLabel = (companyName, companyId, siteName) => {\n  return new Promise((resolve, reject) => {\n    // console.log(\"companyId\",companyId)\n    // console.log(\"companyName\",companyName)\n\n    API.get(\"wastes\", `/getWasteLabels`,\n      {\n        'queryStringParameters': {\n          'companyId': companyId,\n          'companyName': companyName,\n          'siteName': siteName\n        }\n      }\n    )\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\n// export const getPublicLiveFeed = (companyNumber, companyName, siteName) => {\n//   return new Promise((resolve, reject) => {\n//     API.get(\"livefeed\", `/getPublicLiveFeed`, {\n//       'queryStringParameters': {\n//         'id': companyNumber,\n//         'companyName': companyName,\n//         'siteName': siteName\n//       }\n//     }).then((res) => {\n//       console.log(\"res\",res)\n//       resolve(res);\n//     })\n//     .catch((error) => {\n//       reject(error);\n//     });\n//   });\n// };\n\nexport const getPublicLiveFeed = (companyNumber, companyName, siteName) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getPublicLiveFeed`, {\n      'queryStringParameters': {\n        'id': companyNumber,\n        'companyName': companyName,\n        'siteName': siteName\n      }\n    }).then((res) => {\n      resolve(res);\n    })\n    .catch((error) => {\n      reject(error);\n    });\n  });\n};\n\nexport const updateLiveFeedContent = (data, siteName, companyName, id) => {\n  const companyInformation = {\n    siteName: siteName,\n    companyName: companyName,\n    id: id\n  };\n  return new Promise((resolve, reject) => {\n    API.post(\"wastes\", `/updateLiveFeedContent`, { body: { contentResponses: data, companyInformation: companyInformation } })\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\nexport const getLiveFeedContent = (companyNumber, companyName, siteName) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/getLiveFeedContent`, {\n      'queryStringParameters': {\n        'id': companyNumber,\n        'companyName': companyName,\n        'siteName': siteName\n      }\n    }).then((res) => {\n      console.log(\"getLiveFeedContent\", res)\n      resolve(res);\n    })\n    .catch((error) => {\n      reject(error);\n    });\n  });\n};\n\nexport const filterLiveFeedContent = (companyNumber, companyName, siteName, weekNumber) => {\n  return new Promise((resolve, reject) => {\n    API.get(\"wastes\", `/filterLiveFeedContent`, {\n      'queryStringParameters': {\n        'id': companyNumber,\n        'companyName': companyName,\n        'siteName': siteName,\n        \"weekNumber\": weekNumber\n      }\n    }).then((res) => {\n      resolve(res);\n    })\n    .catch((error) => {\n      reject(error);\n    });\n  });\n};"]},"metadata":{},"sourceType":"module"}