{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/live-feeds/live-feed-graph.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { AccordionHeading, AccordionBody } from \"../accordion\";\nimport { setItemInLocalStorage, formatSiteName } from \"../../../../utilities.js\";\nimport Subheadings from \"../reuseable-components/labels/subheadings\";\nimport SlackChart from \"../reuseable-components/charts/slack-chart/slack-chart\";\nimport { Bar } from \"react-chartjs-2\";\nimport { DailySalesVsWasteContext } from \"../../../../contexts/daily-sales-vs-waste-context\";\nimport { EventProductionWasteContext } from \"../../../../contexts/event-production-waste-context\";\nimport { ProductionPreparationContext } from \"../../../../contexts/production-preparation-context\";\nimport Pagination from \"./../reuseable-components/pagination/pagination.js\";\nimport { WasteLabelsContext } from \"../../../../contexts/waste-labels-context\";\nexport default function DailySalesVsWasteReport(props) {\n  const {\n    labels\n  } = useContext(WasteLabelsContext);\n  const {\n    siteName,\n    companyName,\n    id,\n    dataFromDB\n  } = useContext(DailySalesVsWasteContext);\n  const {\n    chartData,\n    index,\n    filterDataByDate,\n    callProductionPreparationInputsFunc,\n    prodPrepInputsData\n  } = useContext(EventProductionWasteContext);\n  const {\n    numberOfWeeks,\n    weeklyNumbers,\n    weeklyStartDateArry,\n    paginationIndex\n  } = useContext(ProductionPreparationContext); // const [dateLabels, setDateLabels] = useState([]);\n  // const [formatedDate, setFormatedDate] = useState([]);\n  // const [showDate, setShowDate] = useState(true);\n\n  const [weeksCommencing, setWeeksCommencing] = useState([]);\n  const [dailyCoverWaste, setDailyCoverWaste] = useState([0, 0, 0, 0, 0, 0, 0]);\n  const [dailyPrepWaste, setDailyPrepWaste] = useState([0, 0, 0, 0, 0, 0, 0]);\n  const [dailySpoilageWaste, setDailySpoilageWaste] = useState([0, 0, 0, 0, 0, 0, 0]);\n  const [dailyTotalWaste, setDailyTotalWaste] = useState([0, 0, 0, 0, 0, 0, 0]);\n  useEffect(() => {\n    // setDateLabels(props.weeklyDailyRange)\n    // if (props.weeklyDailyLabels) {\n    //   setFormatedDate(props.weeklyDailyLabels)\n    // }\n    if (prodPrepInputsData.dailyCoverWasteArrayFormated !== undefined) {\n      setDailyCoverWaste(prodPrepInputsData.dailyCoverWasteArrayFormated);\n      setDailyPrepWaste(prodPrepInputsData.dailyPrepWasteArrayFormated);\n      setDailySpoilageWaste(prodPrepInputsData.dailySpoilageWasteArrayFormated);\n      setDailyTotalWaste(prodPrepInputsData.totalDailyWaste);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [siteName, companyName, id, props, chartData, numberOfWeeks]);\n\n  const changePageForWeeks = ({\n    selected\n  }) => {\n    const date = \"w/c\" + \" \" + weeklyStartDateArry[selected];\n    setWeeksCommencing(date); // setShowDate(false)\n    //get the data for the graph\n\n    if (id && companyName && siteName && weeklyNumbers[selected]) {\n      callProductionPreparationInputsFunc(id, companyName, siteName, weeklyNumbers[selected]);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dailyWasteChart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"originalTheme__reportBackgroundColor addPaddingOfHalveRem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Subheadings, {\n    site: formatSiteName(siteName),\n    title: \"Live Green Feeds - Survey Weekly\",\n    date: weeksCommencing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyBlueTuckGreen cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, \"Survey Results\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      flexDirection: \"row\",\n      justifyContent: \"space-between\",\n      display: \"flex\",\n      padding: \"10px\",\n      fontSize: \"10px\",\n      color: \"rgb(140, 112, 140)\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyBlueTuckGreen cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  }, \"Sample Number:\")), /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: [\"C  S  P\", \"C  S  P\", \"C  S  P\", \"C  S  P\"],\n      datasets: [{\n        label: \"question one\",\n        data: [10, 20, 30, 40, null, 10, 20, 30, 40, null, 10, 20, 30, 40, null, 10, 20, 30, 40, null],\n        fill: false,\n        //   backgroundColor: coverWasteBackgroundColours.slice(),\n        minBarLength: 0.3,\n        barPercentage: 0.3,\n        categoryPercentage: 0.7\n      } // {\n      //   label: \"question two\",\n      //   data: [10, 20, 30, 40],\n      //   fill: false,\n      // //   backgroundColor: coverWasteBackgroundColours.slice(),\n      //   minBarLength: 0.3,\n      //   barPercentage: 0.3,\n      //   categoryPercentage: 0.7,\n      // },\n      // {\n      //   label: \"question three\",\n      //   data: [10, 20, 30, 40],\n      //   fill: false,\n      // //   backgroundColor: coverWasteBackgroundColours.slice(),\n      //   minBarLength: 0.3,\n      //   barPercentage: 0.3,\n      //   categoryPercentage: 0.7,\n      // },\n      // {\n      //   label: \"question four\",\n      //   data: [10, 20, 30, 40],\n      //   fill: false,\n      //   minBarLength: 0.3,\n      //   barPercentage: 0.3,\n      //   categoryPercentage: 0.7,\n      // },\n      ]\n    } // width={dailyWasteWidth}\n    // height={dailyWasteHeight}\n    ,\n    options: {\n      responsive: true,\n      maintainAspectRatio: true,\n      legend: {\n        display: false\n      },\n      scales: {\n        xAxes: [{\n          gridLines: {\n            display: false\n          },\n          ticks: {\n            fontColor: \"rgb(133, 165, 101, 0)\"\n          }\n        }],\n        yAxes: [{\n          gridLines: {\n            display: false\n          },\n          display: false,\n          ticks: {\n            beginAtZero: true\n          }\n        }]\n      },\n      plugins: {\n        datalabels: {\n          anchor: \"start\",\n          align: \"bottom\",\n          display: true,\n          backgroundColor: null,\n          borderColor: null,\n          borderRadius: 4,\n          borderWidth: 1,\n          font: {\n            // size: CSPlabelFont,\n            weight: 600\n          },\n          offset: 4,\n          padding: 0 //   color: function (context) {\n          //     var index = context.dataIndex;\n          //     var value = parseInt(context.dataset.data[index]);\n          //     let warningNum;\n          //     if (context.dataset.label === \"cover waste\") {\n          //       let warningForCoverWasteCap = dailyCoverWastesCap;\n          //       if (props.showPounds) {\n          //         // warningNum = Math.round(warningForCoverWasteCap * 2.775);\n          //         warningNum = dailyWasteCappingInPounds;\n          //       } else {\n          //         warningNum = warningForCoverWasteCap;\n          //       }\n          //       if (value >= warningNum) {\n          //         return \"rgba(255, 0, 0, 0.9)\";\n          //       } else if (value === 0) {\n          //         return \"rgba(255, 255, 255, 0)\";\n          //       } else {\n          //         // return \"rgba(133, 165, 101, 1)\";\n          //         if (props.showDarkTheme) {\n          //         return \"rgb(255, 231, 227)\";\n          //         } else {\n          //           return \"rgba(133, 165, 101, 1)\";\n          //         }\n          //       }\n          //     }\n          //     if (context.dataset.label === \"preparation waste\") {\n          //       let warningForPreparationWasteCap = dailyPeparationWastesCap;\n          //       if (props.showPounds) {\n          //         // warningNum = Math.round(warningForPreparationWasteCap * 2.775);\n          //         warningNum = prepWasteCappingInPounds\n          //       } else {\n          //         warningNum = warningForPreparationWasteCap;\n          //       }\n          //       if (value >= warningNum) {\n          //         return \"rgba(255, 0, 0, 0.9)\";\n          //       } else if (value === 0) {\n          //         return \"rgba(255, 255, 255, 0)\";\n          //       } else {\n          //         // return \"rgba(133, 165, 101, 1)\";\n          //         if (props.showDarkTheme) {\n          //         return \"rgb(255, 231, 227)\";\n          //         } else {\n          //           return \"rgba(133, 165, 101, 1)\";\n          //         }\n          //       }\n          //     }\n          //     if (context.dataset.label === \"spoliage waste\") {\n          //       let warningForSpoilageWasteCap = dailySpoliageWastesCap;\n          //       if (props.showPounds) {\n          //         // warningNum = Math.round(warningForSpoilageWasteCap * 2.775);\n          //         warningNum = spoilageWasteCappingInPounds\n          //       } else {\n          //         warningNum = warningForSpoilageWasteCap;\n          //       }\n          //       if (value >= warningNum) {\n          //         return \"rgba(255, 0, 0, 0.9)\";\n          //       } else if (value === 0) {\n          //         return \"rgba(255, 255, 255, 0)\";\n          //       } else {\n          //         // return \"rgba(133, 165, 101, 1)\";\n          //         if (props.showDarkTheme) {\n          //         return \"rgb(255, 231, 227)\";\n          //         } else {\n          //           return \"rgba(133, 165, 101, 1)\";\n          //         }\n          //       }\n          //     }\n          //   },\n          //   formatter: function (value, context) {\n          //     // var index = context.dataIndex;\n          //     // var value = parseInt(context.dataset.data[index]);\n          //     let warningNum;\n          //     if (context.dataset.label === \"cover waste\") {\n          //       let warningForCoverWasteCap = dailyCoverWastesCap;\n          //       if (props.showPounds) {\n          //         // warningNum = Math.round(warningForCoverWasteCap * 2.775);\n          //         warningNum = dailyWasteCappingInPounds;\n          //       } else {\n          //         warningNum = warningForCoverWasteCap;\n          //       }\n          //     if (value >= warningNum) {\n          //         return `${value}`;\n          //       }\n          //     } else if (context.dataset.label === \"preparation waste\") {\n          //       let warningForPreparationWasteCap = dailyPeparationWastesCap;\n          //       if (props.showPounds) {\n          //         // warningNum = Math.round(warningForPreparationWasteCap * 2.775);\n          //         warningNum = prepWasteCappingInPounds\n          //       } else {\n          //         warningNum = warningForPreparationWasteCap;\n          //       }\n          //       if (value >= warningNum) {\n          //         return `${value}`;\n          //       }\n          //     } else if (context.dataset.label === \"spoliage waste\") {\n          //       let warningForSpoilageWasteCap = dailySpoliageWastesCap;\n          //       if (props.showPounds) {\n          //         // warningNum = Math.round(warningForSpoilageWasteCap * 2.775);\n          //         warningNum = spoilageWasteCappingInPounds\n          //       } else {\n          //         warningNum = warningForSpoilageWasteCap;\n          //       }\n          //       if (value >= warningNum) {\n          //         return `${value}`;\n          //       }\n          //     }\n          //   },\n\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 17\n    }\n  }, \"1 = Bad and 4 = Great\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      padding: \"2rem\",\n      fontSize: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Pagination, {\n    index: paginationIndex,\n    onPageChange: changePageForWeeks,\n    pageCount: numberOfWeeks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 15\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/live-feeds/live-feed-graph.js"],"names":["React","useState","useContext","useEffect","AccordionHeading","AccordionBody","setItemInLocalStorage","formatSiteName","Subheadings","SlackChart","Bar","DailySalesVsWasteContext","EventProductionWasteContext","ProductionPreparationContext","Pagination","WasteLabelsContext","DailySalesVsWasteReport","props","labels","siteName","companyName","id","dataFromDB","chartData","index","filterDataByDate","callProductionPreparationInputsFunc","prodPrepInputsData","numberOfWeeks","weeklyNumbers","weeklyStartDateArry","paginationIndex","weeksCommencing","setWeeksCommencing","dailyCoverWaste","setDailyCoverWaste","dailyPrepWaste","setDailyPrepWaste","dailySpoilageWaste","setDailySpoilageWaste","dailyTotalWaste","setDailyTotalWaste","dailyCoverWasteArrayFormated","undefined","dailyPrepWasteArrayFormated","dailySpoilageWasteArrayFormated","totalDailyWaste","changePageForWeeks","selected","date","flexDirection","justifyContent","display","padding","fontSize","color","datasets","label","data","fill","minBarLength","barPercentage","categoryPercentage","responsive","maintainAspectRatio","legend","scales","xAxes","gridLines","ticks","fontColor","yAxes","beginAtZero","plugins","datalabels","anchor","align","backgroundColor","borderColor","borderRadius","borderWidth","font","weight","offset"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport { AccordionHeading, AccordionBody } from \"../accordion\";\nimport { setItemInLocalStorage, formatSiteName } from \"../../../../utilities.js\";\n\nimport Subheadings from \"../reuseable-components/labels/subheadings\"\nimport SlackChart from \"../reuseable-components/charts/slack-chart/slack-chart\"\n\nimport { Bar } from \"react-chartjs-2\";\nimport { DailySalesVsWasteContext } from \"../../../../contexts/daily-sales-vs-waste-context\";\nimport { EventProductionWasteContext } from \"../../../../contexts/event-production-waste-context\";\nimport { ProductionPreparationContext } from \"../../../../contexts/production-preparation-context\";\n\nimport Pagination from \"./../reuseable-components/pagination/pagination.js\"\n\nimport { WasteLabelsContext } from \"../../../../contexts/waste-labels-context\";\n\nexport default function DailySalesVsWasteReport(props) {\n\n  const {\n    labels\n  } = useContext(WasteLabelsContext);\n\n  const {\n    siteName,\n    companyName,\n    id,\n    dataFromDB,\n   } = useContext(DailySalesVsWasteContext);\n\n   const {\n    chartData,\n    index,\n    filterDataByDate,\n    callProductionPreparationInputsFunc,\n    prodPrepInputsData\n   } = useContext(EventProductionWasteContext);\n\n   const {\n    numberOfWeeks,\n    weeklyNumbers,\n    weeklyStartDateArry,\n    paginationIndex\n   } = useContext(ProductionPreparationContext);\n\n  // const [dateLabels, setDateLabels] = useState([]);\n  // const [formatedDate, setFormatedDate] = useState([]);\n  // const [showDate, setShowDate] = useState(true);\n  const [weeksCommencing, setWeeksCommencing] = useState([]);\n\n  const [dailyCoverWaste, setDailyCoverWaste] = useState([0,0,0,0,0,0,0]);\n  const [dailyPrepWaste, setDailyPrepWaste] = useState([0,0,0,0,0,0,0]);\n  const [dailySpoilageWaste, setDailySpoilageWaste] = useState([0,0,0,0,0,0,0]);\n  const [dailyTotalWaste, setDailyTotalWaste] = useState([0,0,0,0,0,0,0]);\n\n  useEffect(() => {\n    // setDateLabels(props.weeklyDailyRange)\n\n    // if (props.weeklyDailyLabels) {\n    //   setFormatedDate(props.weeklyDailyLabels)\n    // }\n\n    if (prodPrepInputsData.dailyCoverWasteArrayFormated !== undefined) {\n      setDailyCoverWaste(prodPrepInputsData.dailyCoverWasteArrayFormated)\n      setDailyPrepWaste(prodPrepInputsData.dailyPrepWasteArrayFormated)\n      setDailySpoilageWaste(prodPrepInputsData.dailySpoilageWasteArrayFormated)\n      setDailyTotalWaste(prodPrepInputsData.totalDailyWaste)\n    }\n\n   // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[siteName, companyName, id, props, chartData,numberOfWeeks])\n\n  const changePageForWeeks = ({ selected }) => {\n\n    const date = \"w/c\" + \" \" + weeklyStartDateArry[selected]\n    setWeeksCommencing(date)\n    // setShowDate(false)\n    //get the data for the graph\n    if (id && companyName && siteName && weeklyNumbers[selected]) {\n      callProductionPreparationInputsFunc(id ,companyName ,siteName, weeklyNumbers[selected]);\n    }\n};\n\n  return (\n    <div className= \"dailyWasteChart\">\n        <div className=\"originalTheme__reportBackgroundColor addPaddingOfHalveRem\">\n            <Subheadings\n              site={formatSiteName(siteName)}\n              title=\"Live Green Feeds - Survey Weekly\"\n              date={weeksCommencing}\n            />\n\n            <div className=\"applyBlueTuckGreen cooperHewittBold\">\n                <h4>Survey Results</h4>\n            </div>\n\n            <div style={{\n              flexDirection: \"row\",\n              justifyContent: \"space-between\",\n              display:\"flex\",\n              padding: \"10px\",\n              fontSize: \"10px\",\n              color: \"rgb(140, 112, 140)\"\n            }}>\n\n            </div>\n\n            <div className=\"applyBlueTuckGreen cooperHewittBold\">\n              <h4>Sample Number:</h4>\n            </div>\n\n              <Bar\n                data={{\n                  labels: [\n                    \"C  S  P\",\n                    \"C  S  P\",\n                    \"C  S  P\",\n                    \"C  S  P\",\n                  ],\n                  datasets: [\n                    {\n                      label: \"question one\",\n                      data: [10, 20, 30, 40, null, 10, 20, 30, 40, null,10, 20, 30, 40, null,10, 20, 30, 40, null],\n                      fill: false,\n                    //   backgroundColor: coverWasteBackgroundColours.slice(),\n                      minBarLength: 0.3,\n                      barPercentage: 0.3,\n                      categoryPercentage: 0.7,\n                    },\n                    // {\n                    //   label: \"question two\",\n                    //   data: [10, 20, 30, 40],\n                    //   fill: false,\n                    // //   backgroundColor: coverWasteBackgroundColours.slice(),\n                    //   minBarLength: 0.3,\n                    //   barPercentage: 0.3,\n                    //   categoryPercentage: 0.7,\n                    // },\n                    // {\n                    //   label: \"question three\",\n                    //   data: [10, 20, 30, 40],\n                    //   fill: false,\n                    // //   backgroundColor: coverWasteBackgroundColours.slice(),\n                    //   minBarLength: 0.3,\n                    //   barPercentage: 0.3,\n                    //   categoryPercentage: 0.7,\n                    // },\n                    // {\n                    //   label: \"question four\",\n                    //   data: [10, 20, 30, 40],\n                    //   fill: false,\n                    //   minBarLength: 0.3,\n                    //   barPercentage: 0.3,\n                    //   categoryPercentage: 0.7,\n                    // },\n                  ],\n                }}\n                // width={dailyWasteWidth}\n                // height={dailyWasteHeight}\n                options={{\n                  responsive: true,\n                  maintainAspectRatio: true,\n                  legend: {\n                    display: false,\n                  },\n                  scales: {\n                    xAxes: [\n                      {\n                        gridLines: {\n                          display: false,\n                        },\n                        ticks: {\n                          fontColor: \"rgb(133, 165, 101, 0)\",\n                        },\n                      },\n                    ],\n                    yAxes: [\n                      {\n                        gridLines: {\n                          display: false,\n                        },\n                        display: false,\n                        ticks: {\n                          beginAtZero: true,\n                        },\n                      },\n                    ],\n                  },\n\n                  plugins: {\n                    datalabels: {\n                      anchor: \"start\",\n                      align: \"bottom\",\n                      display: true,\n                      backgroundColor: null,\n                      borderColor: null,\n                      borderRadius: 4,\n                      borderWidth: 1,\n                      font: {\n                        // size: CSPlabelFont,\n                        weight: 600,\n                      },\n                      offset: 4,\n                      padding: 0,\n                    //   color: function (context) {\n                    //     var index = context.dataIndex;\n                    //     var value = parseInt(context.dataset.data[index]);\n\n                    //     let warningNum;\n\n                    //     if (context.dataset.label === \"cover waste\") {\n\n                    //       let warningForCoverWasteCap = dailyCoverWastesCap;\n\n                    //       if (props.showPounds) {\n                    //         // warningNum = Math.round(warningForCoverWasteCap * 2.775);\n                    //         warningNum = dailyWasteCappingInPounds;\n                    //       } else {\n                    //         warningNum = warningForCoverWasteCap;\n                    //       }\n\n                    //       if (value >= warningNum) {\n                    //         return \"rgba(255, 0, 0, 0.9)\";\n                    //       } else if (value === 0) {\n                    //         return \"rgba(255, 255, 255, 0)\";\n                    //       } else {\n                    //         // return \"rgba(133, 165, 101, 1)\";\n\n                    //         if (props.showDarkTheme) {\n                    //         return \"rgb(255, 231, 227)\";\n                    //         } else {\n                    //           return \"rgba(133, 165, 101, 1)\";\n                    //         }\n\n                    //       }\n\n                    //     }\n\n                    //     if (context.dataset.label === \"preparation waste\") {\n\n                    //       let warningForPreparationWasteCap = dailyPeparationWastesCap;\n\n                    //       if (props.showPounds) {\n                    //         // warningNum = Math.round(warningForPreparationWasteCap * 2.775);\n                    //         warningNum = prepWasteCappingInPounds\n                    //       } else {\n                    //         warningNum = warningForPreparationWasteCap;\n                    //       }\n\n\n                    //       if (value >= warningNum) {\n                    //         return \"rgba(255, 0, 0, 0.9)\";\n                    //       } else if (value === 0) {\n                    //         return \"rgba(255, 255, 255, 0)\";\n                    //       } else {\n\n                    //         // return \"rgba(133, 165, 101, 1)\";\n\n                    //         if (props.showDarkTheme) {\n                    //         return \"rgb(255, 231, 227)\";\n                    //         } else {\n                    //           return \"rgba(133, 165, 101, 1)\";\n                    //         }\n\n                    //       }\n\n\n                    //     }\n\n                    //     if (context.dataset.label === \"spoliage waste\") {\n\n                    //       let warningForSpoilageWasteCap = dailySpoliageWastesCap;\n\n\n                    //       if (props.showPounds) {\n                    //         // warningNum = Math.round(warningForSpoilageWasteCap * 2.775);\n                    //         warningNum = spoilageWasteCappingInPounds\n                    //       } else {\n                    //         warningNum = warningForSpoilageWasteCap;\n                    //       }\n\n                    //       if (value >= warningNum) {\n                    //         return \"rgba(255, 0, 0, 0.9)\";\n                    //       } else if (value === 0) {\n                    //         return \"rgba(255, 255, 255, 0)\";\n                    //       } else {\n                    //         // return \"rgba(133, 165, 101, 1)\";\n\n                    //         if (props.showDarkTheme) {\n                    //         return \"rgb(255, 231, 227)\";\n                    //         } else {\n                    //           return \"rgba(133, 165, 101, 1)\";\n                    //         }\n\n                    //       }\n\n\n                    //     }\n\n                    //   },\n                    //   formatter: function (value, context) {\n                    //     // var index = context.dataIndex;\n                    //     // var value = parseInt(context.dataset.data[index]);\n\n                    //     let warningNum;\n\n                    //     if (context.dataset.label === \"cover waste\") {\n\n                    //       let warningForCoverWasteCap = dailyCoverWastesCap;\n\n                    //       if (props.showPounds) {\n                    //         // warningNum = Math.round(warningForCoverWasteCap * 2.775);\n                    //         warningNum = dailyWasteCappingInPounds;\n                    //       } else {\n                    //         warningNum = warningForCoverWasteCap;\n                    //       }\n\n                    //     if (value >= warningNum) {\n                    //         return `${value}`;\n\n                    //       }\n\n                    //     } else if (context.dataset.label === \"preparation waste\") {\n\n                    //       let warningForPreparationWasteCap = dailyPeparationWastesCap;\n\n\n                    //       if (props.showPounds) {\n                    //         // warningNum = Math.round(warningForPreparationWasteCap * 2.775);\n                    //         warningNum = prepWasteCappingInPounds\n                    //       } else {\n                    //         warningNum = warningForPreparationWasteCap;\n                    //       }\n\n                    //       if (value >= warningNum) {\n                    //         return `${value}`;\n\n                    //       }\n\n                    //     } else if (context.dataset.label === \"spoliage waste\") {\n\n                    //       let warningForSpoilageWasteCap = dailySpoliageWastesCap;\n\n                    //       if (props.showPounds) {\n                    //         // warningNum = Math.round(warningForSpoilageWasteCap * 2.775);\n                    //         warningNum = spoilageWasteCappingInPounds\n                    //       } else {\n                    //         warningNum = warningForSpoilageWasteCap;\n                    //       }\n\n                    //       if (value >= warningNum) {\n                    //         return `${value}`;\n\n                    //       }\n\n                    //     }\n\n                    //   },\n                    },\n                  },\n                }}\n              />\n\n            <div className=\"graph__row\">\n                <div className=\"graph__message\">\n                  1 = Bad and 4 = Great\n                </div>\n            </div>\n\n            <div style={{\n              display: \"flex\",\n              padding: \"2rem\",\n              fontSize: \"10px\"\n            }}>\n              <Pagination index={paginationIndex} onPageChange={changePageForWeeks} pageCount={numberOfWeeks} />\n            </div>\n\n        </div>\n\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}