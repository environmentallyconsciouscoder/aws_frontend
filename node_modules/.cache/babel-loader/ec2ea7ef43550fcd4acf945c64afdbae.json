{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/CODE/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/user-inputs/cover-inputs.js\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { useForm } from \"react-hook-form\"; // import {\n//   wasteDailyDateRange,\n// } from \"../../../../utilities\";\n\nimport { weeklyDateFormat, getCurrentWeek } from \"../../../../helper\";\nimport { InputsContext } from \"../../../../contexts/inputs-context\";\nimport Pagination from \"./../reuseable-components/pagination/pagination.js\";\nimport Checkbox from '@mui/material/Checkbox';\nexport default function CoverInputs(props) {\n  const label = {\n    inputProps: {\n      'aria-label': 'Checkbox demo'\n    }\n  };\n  const {\n    thisWeekCoverInputs,\n    allWeekCoverInput,\n    selectedSiteValueID,\n    sendDataToDatabase,\n    companyName,\n    companyID,\n    filterMenuItems\n  } = useContext(InputsContext);\n  const {\n    handleSubmit\n  } = useForm();\n  const [covers, setCovers] = useState([{\n    day: \"Monday\",\n    value: 0,\n    require: false,\n    checkBox: false\n  }, {\n    day: \"Tuesday\",\n    value: 0,\n    require: false,\n    checkBox: false\n  }, {\n    day: \"Wednesday\",\n    value: 0,\n    require: false,\n    checkBox: false\n  }, {\n    day: \"Thursday\",\n    value: 0,\n    require: false,\n    checkBox: false\n  }, {\n    day: \"Friday\",\n    value: 0,\n    require: false,\n    checkBox: false\n  }, {\n    day: \"Saturday\",\n    value: 0,\n    require: false,\n    checkBox: false\n  }, {\n    day: \"Sunday\",\n    value: 0,\n    require: false,\n    checkBox: false\n  }]);\n  const [isSubmitting, setIsSubmitting] = useState(false); // const dailyChartXaxis = JSON.parse(localStorage.getItem('dailyChartXaxis')) || \"\"\n  // let dateRangeLable = wasteDailyDateRange(dailyChartXaxis);\n\n  const [pageCount, setPageCount] = useState(7);\n  const [date, setDate] = useState(7);\n  const [firstDateOfTheWeek, setFirstDateOfTheWeek] = useState(7);\n  const [weekOfYear, setWeekOfYear] = useState(7);\n  useEffect(() => {\n    if (thisWeekCoverInputs !== undefined) {\n      setFirstDateOfTheWeek(thisWeekCoverInputs.Date);\n      setWeekOfYear(thisWeekCoverInputs.weekOfYear);\n      const date = weeklyDateFormat(thisWeekCoverInputs.Date);\n      setDate(date);\n      setPageCount(allWeekCoverInput.length);\n      let newArray = []; // console.log(\"thisWeekCoverInputs\",thisWeekCoverInputs);\n\n      thisWeekCoverInputs.coversInput.map((data, index) => {\n        covers[index].value = data;\n        covers[index].checkBox = false;\n        newArray.push(covers[index]);\n        return \"\";\n      });\n\n      if (thisWeekCoverInputs.checkBox !== undefined) {\n        thisWeekCoverInputs.checkBox.map((data, index) => {\n          newArray[index].checkBox = data === 1 ? true : false;\n          return \"\";\n        });\n      } // console.log(\"newArray\",newArray);\n\n\n      setCovers(newArray);\n    }\n\n    let numberOfDates;\n    let today = new Date().getDay();\n\n    if (today === 0) {\n      numberOfDates = 7;\n    } else {\n      numberOfDates = today;\n    }\n\n    for (let i = 0; i < numberOfDates; i++) {\n      if (covers[i].value === 0) {\n        covers[i].require = true;\n        setCovers([...covers]);\n      } else {\n        covers[i].require = false;\n        setCovers([...covers]);\n      }\n    }\n\n    setIsSubmitting(isSubmitting); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [thisWeekCoverInputs]);\n\n  const onSubmit = () => {\n    setIsSubmitting(true);\n    const confirmedCovers = covers.map(data => {\n      return parseInt(data.value);\n    });\n    const checkBox = covers.map(data => {\n      if (data.checkBox) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }); // console.log(\"checkBox\",checkBox);\n\n    const params = {\n      companyId: companyID,\n      companyName: companyName,\n      siteName: selectedSiteValueID,\n      covers: confirmedCovers,\n      checkBox: checkBox,\n      firstDateOfTheWeek: firstDateOfTheWeek,\n      weekOfYear: weekOfYear\n    }; // console.log(\"params\",params)\n\n    sendDataToDatabase(\"COVER INPUTS\", params);\n    props.history.push('/dashboard');\n  };\n\n  const handleChange = e => {\n    let newArray = [];\n    covers.map(item => {\n      if (item.day === e.target.name) {\n        item.value = e.target.value;\n        newArray.push(item);\n      } else {\n        newArray.push(item);\n      }\n\n      return \"\";\n    });\n    setCovers(newArray);\n    return \"\";\n  };\n\n  const handleChangeForCheckBox = e => {\n    let newArray = [];\n    covers.map(item => {\n      if (item.day === e.target.name) {\n        const newValue = !item.checkBox;\n        item.checkBox = newValue;\n        newArray.push(item);\n      } else {\n        newArray.push(item);\n      }\n\n      return \"\";\n    }); // console.log(\"newArray\",newArray);\n\n    setCovers(newArray);\n    return \"\";\n  };\n\n  const changePage = ({\n    selected\n  }) => {\n    // console.log(\"selected\", selected)\n    // console.log(\"covers\",covers);\n    filterMenuItems(selected, \"cover-inputs\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inputs__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inputs__row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inputs__column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inputs__wrapperForLabels\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"report-subtitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 23\n    }\n  }, selectedSiteValueID.replace(/[^A-Za-z]+/g, '').toLowerCase()), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 23\n    }\n  }, \"Input No. of Covers\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyBlueTuckGreen cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 23\n    }\n  }, \"WEEK \", date)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inputs__wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inputs__labels\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 21\n    }\n  }, covers.map((data, i) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"applyBlueTuckGreen applyCooperHewittBold marginTop\",\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 27\n      }\n    }, data.day);\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-sm-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"applyBlueTuckGreen applyCooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 23\n    }\n  }, \"People /  Events\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 23\n    }\n  }, covers.map((data, i) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"form-control\",\n      type: \"number\",\n      id: i,\n      name: data.day,\n      onChange: handleChange // placeholder={data.value}\n      ,\n      value: data.value,\n      required: data.require,\n      onKeyDown: evt => [\"e\", \"E\", \"+\", \"-\"].includes(evt.key) && evt.preventDefault(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Checkbox, {\n      checked: data.checkBox,\n      value: data.checkBox,\n      onChange: handleChangeForCheckBox,\n      name: data.day,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 33\n      }\n    }));\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button__wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 27\n    }\n  }, isSubmitting ? \"Submitted\" : \"Submit\")))))), /*#__PURE__*/React.createElement(Pagination, {\n    index: getCurrentWeek(),\n    onPageChange: changePage,\n    pageCount: pageCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 17\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/james/Documents/CODE/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/user-inputs/cover-inputs.js"],"names":["React","useState","useEffect","useContext","useForm","weeklyDateFormat","getCurrentWeek","InputsContext","Pagination","Checkbox","CoverInputs","props","label","inputProps","thisWeekCoverInputs","allWeekCoverInput","selectedSiteValueID","sendDataToDatabase","companyName","companyID","filterMenuItems","handleSubmit","covers","setCovers","day","value","require","checkBox","isSubmitting","setIsSubmitting","pageCount","setPageCount","date","setDate","firstDateOfTheWeek","setFirstDateOfTheWeek","weekOfYear","setWeekOfYear","undefined","Date","length","newArray","coversInput","map","data","index","push","numberOfDates","today","getDay","i","onSubmit","confirmedCovers","parseInt","params","companyId","siteName","history","handleChange","e","item","target","name","handleChangeForCheckBox","newValue","changePage","selected","replace","toLowerCase","evt","includes","key","preventDefault"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\n// import {\n//   wasteDailyDateRange,\n// } from \"../../../../utilities\";\n\nimport {\n  weeklyDateFormat,\n  getCurrentWeek\n} from \"../../../../helper\";\n\nimport { InputsContext } from \"../../../../contexts/inputs-context\";\n\nimport Pagination from \"./../reuseable-components/pagination/pagination.js\"\n\nimport Checkbox from '@mui/material/Checkbox';\n\nexport default function CoverInputs(props) {\n\n  const label = { inputProps: { 'aria-label': 'Checkbox demo' } };\n\n  const {\n    thisWeekCoverInputs,\n    allWeekCoverInput,\n    selectedSiteValueID,\n    sendDataToDatabase,\n    companyName,\n    companyID,\n    filterMenuItems,\n   } = useContext(InputsContext);\n\n  const { handleSubmit } = useForm();\n\n  const [covers, setCovers] = useState([\n    {\n      day: \"Monday\",\n      value: 0,\n      require: false,\n      checkBox: false\n    },\n    {\n      day: \"Tuesday\",\n      value: 0,\n      require: false,\n      checkBox: false\n    },\n    {\n      day: \"Wednesday\",\n      value: 0,\n      require: false,\n      checkBox: false\n    },\n    {\n      day: \"Thursday\",\n      value: 0,\n      require: false,\n      checkBox: false\n    },\n    {\n      day: \"Friday\",\n      value: 0,\n      require: false,\n      checkBox: false\n    },\n    {\n      day: \"Saturday\",\n      value: 0,\n      require: false,\n      checkBox: false\n    },\n    {\n      day: \"Sunday\",\n      value: 0,\n      require: false,\n      checkBox: false\n    }\n  ]);\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // const dailyChartXaxis = JSON.parse(localStorage.getItem('dailyChartXaxis')) || \"\"\n  // let dateRangeLable = wasteDailyDateRange(dailyChartXaxis);\n\n  const [pageCount, setPageCount] = useState(7);\n  const [date, setDate] = useState(7);\n  const [firstDateOfTheWeek, setFirstDateOfTheWeek] = useState(7);\n  const [weekOfYear, setWeekOfYear] = useState(7);\n\n  useEffect(() => {\n\n      if (thisWeekCoverInputs !== undefined) {\n\n        setFirstDateOfTheWeek(thisWeekCoverInputs.Date)\n        setWeekOfYear(thisWeekCoverInputs.weekOfYear)\n\n        const date = weeklyDateFormat(thisWeekCoverInputs.Date)\n        setDate(date)\n        setPageCount(allWeekCoverInput.length)\n\n        let newArray = [];\n\n        // console.log(\"thisWeekCoverInputs\",thisWeekCoverInputs);\n\n        thisWeekCoverInputs.coversInput.map((data, index) => {\n          covers[index].value = data;\n          covers[index].checkBox = false;\n\n          newArray.push(covers[index]);\n          return \"\"\n        });\n\n        if (thisWeekCoverInputs.checkBox !== undefined) {\n          thisWeekCoverInputs.checkBox.map((data, index) => {\n            newArray[index].checkBox = data === 1 ? true : false;\n            return \"\"\n          });\n        }\n\n        // console.log(\"newArray\",newArray);\n\n        setCovers(newArray);\n      }\n\n      let numberOfDates;\n      let today = new Date().getDay();\n      if (today === 0) {\n        numberOfDates = 7;\n      } else {\n        numberOfDates = today;\n      }\n\n      for (let i = 0; i < numberOfDates; i++) {\n\n        if (covers[i].value === 0) {\n          covers[i].require = true;\n          setCovers([...covers]);\n        } else {\n          covers[i].require = false;\n          setCovers([...covers]);\n        }\n      }\n\n      setIsSubmitting(isSubmitting)\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n}, [thisWeekCoverInputs]);\n\n\n  const onSubmit = () => {\n    setIsSubmitting(true)\n\n\n    const confirmedCovers = covers.map((data) => {\n      return parseInt(data.value);\n    });\n\n    const checkBox = covers.map((data) => {\n      if (data.checkBox) {\n        return 1\n      } else {\n        return 0;\n      }\n    });\n    // console.log(\"checkBox\",checkBox);\n\n    const params = {\n      companyId: companyID,\n      companyName: companyName,\n      siteName: selectedSiteValueID,\n      covers: confirmedCovers,\n      checkBox: checkBox,\n      firstDateOfTheWeek: firstDateOfTheWeek,\n      weekOfYear: weekOfYear\n    }\n\n    // console.log(\"params\",params)\n\n    sendDataToDatabase(\"COVER INPUTS\", params)\n\n    props.history.push('/dashboard');\n  };\n\n  const handleChange = (e) => {\n    let newArray = [];\n\n    covers.map((item) => {\n      if (item.day === e.target.name) {\n        item.value = e.target.value;\n        newArray.push(item);\n      } else {\n        newArray.push(item);\n      }\n      return \"\"\n    });\n\n    setCovers(newArray);\n    return \"\"\n  };\n\n  const handleChangeForCheckBox = (e) => {\n    let newArray = [];\n\n    covers.map((item) => {\n      if (item.day === e.target.name) {\n        const newValue = !item.checkBox;\n        item.checkBox = newValue;\n        newArray.push(item);\n      } else {\n        newArray.push(item);\n      }\n      return \"\"\n    });\n\n    // console.log(\"newArray\",newArray);\n\n    setCovers(newArray);\n    return \"\"\n  };\n\n  const changePage = ({ selected }) => {\n    // console.log(\"selected\", selected)\n\n    // console.log(\"covers\",covers);\n\n    filterMenuItems(selected, \"cover-inputs\");\n  };\n\n  return (\n\n        <div className=\"inputs__container\">\n            <div className=\"inputs__row\">\n                <div className=\"inputs__column\">\n\n                  <div className=\"inputs__wrapperForLabels\">\n                      <div className=\"report-subtitle\">{selectedSiteValueID.replace(/[^A-Za-z]+/g, '').toLowerCase()}</div>\n                      <div className=\"section-title\">Input No. of Covers</div>\n                      <div className=\"applyBlueTuckGreen cooperHewittBold\">WEEK {date}</div>\n                    </div>\n                    <div className=\"inputs__wrapper\">\n\n                    <div className=\"inputs__labels\">\n                      {covers.map((data, i) => {\n                        return (\n                          <div className=\"applyBlueTuckGreen applyCooperHewittBold marginTop\" key={i}>{data.day}</div>\n                        )\n                      })}\n                    </div>\n\n                    <div className=\"col-sm-12\">\n                      <h3 className=\"applyBlueTuckGreen applyCooperHewittBold\">People /  Events</h3>\n                      <form onSubmit={handleSubmit(onSubmit)}>\n                        {covers.map((data, i) => {\n                          return (\n                              <div className=\"form-group\" key={i}>\n                                <input\n                                  className=\"form-control\"\n                                  type=\"number\"\n                                  id={i}\n                                  name={data.day}\n                                  onChange={handleChange}\n                                  // placeholder={data.value}\n                                  value={data.value}\n                                  required={data.require}\n                                  onKeyDown={(evt) => [\"e\", \"E\", \"+\", \"-\"].includes(evt.key) && evt.preventDefault()}\n                                />\n                                {/* <Checkbox {...label} /> */}\n                                <Checkbox checked={data.checkBox} value={data.checkBox} onChange={handleChangeForCheckBox} name={data.day} />\n                              </div>\n                          );\n                        })}\n\n                        <div className=\"button__wrapper\">\n                          <button className=\"btn btn-primary\" type=\"submit\">\n                            {isSubmitting ? \"Submitted\" : \"Submit\"}\n                          </button>\n                        </div>\n                      </form>\n                    </div>\n                  </div>\n\n                </div>\n\n                <Pagination index={getCurrentWeek()} onPageChange={changePage} pageCount={pageCount} />\n\n            </div>\n        </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}