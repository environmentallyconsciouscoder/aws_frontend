{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/CODE/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/reports/waste-per-sales-report.js\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport \"chartjs-plugin-annotation\";\nimport \"chartjs-plugin-datalabels\";\nimport useWindowDimensions from \"../../libs/use-window-dimensions\";\nimport { WastePerSalesContext } from \"../../../../contexts/waste-per-sales-context\";\nimport { WasteCapContext } from \"../../../../contexts/waste-cap-context\";\nimport { AccordionHeading, AccordionBody } from \"../accordion\";\nimport { setItemInLocalStorage, maxNumForCoverPerWasteChartFunction } from \"../../../../utilities.js\";\nimport { keepTwoDecimalPlacesWithoutRoundingUp, isInt, getIndexesForBackgroundColours } from \"../../../../helper.js\";\nimport Capping from \"./../reuseable-components/labels/capping\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nlet graphWidth = 500;\nlet graphHeight = 220; // let fontSize = 7\n\nexport default function WastePerSalesGraph(props) {\n  const {\n    allCappingValue,\n    wastePerSalesCoverWastes,\n    wastePerSalesSpoilageWastes,\n    wastePerSalesPrepWastes\n  } = useContext(WasteCapContext);\n  const [tooltipIsOpen, setTooltipIsOpen] = React.useState(true);\n  const {\n    totalCW,\n    count,\n    totalPW,\n    totalSW,\n    totalWaste,\n    monthName,\n    selectedYear,\n    totalSalesInputs,\n    percentageOfInputsAreZeros,\n    display,\n    toggleActive,\n    activeState,\n    montlyArray,\n    yearlyArray,\n    handleSearch,\n    searchError,\n    siteName,\n    // handleYearly,\n    handleMonthly,\n    wasteSteamValue,\n    salesInputDataArray,\n    datesLabel,\n    foodWaste,\n    foodWasteXaxis,\n    showTooltip\n  } = useContext(WastePerSalesContext); // const [ monthly, setMonthlyArray] = React.useState([])\n  // const [ yearly, setYearlyArray ] = React.useState([])\n\n  const [displayValue, setDisplay] = React.useState([]);\n  const [totalCoverWaste, setTotalCW] = useState(0);\n  const [totalPrepWaste, setTotalPW] = useState(0);\n  const [totalSpoilageWaste, setTotalSW] = useState(0);\n  const [totalAllWaste, setTotalWaste] = useState(0);\n  const [showSearchError, setShowSearchError] = useState(false);\n  const [year, setSelectedYear] = React.useState(0); // let maxNumber = 1;\n\n  let [maxNumber, setMaxNumber] = React.useState(1); // let barColors = \"rgba(15, 128, 140, 0.5)\"\n\n  const [inputsData, setInputsData] = useState([]);\n  const [wasteStreamValue, setWasteStreamValue] = useState([]); // const [label, setLabel ] = useState([])\n\n  useEffect(() => {\n    setWasteStreamValue(wasteSteamValue);\n    setInputsData(salesInputDataArray);\n    setDisplay(foodWaste); // setMonthlyArray(montlyArray)\n    // setYearlyArray(yearlyArray)\n    // setDisplay(display)\n\n    setTotalCW(totalCW);\n    setTotalPW(totalPW);\n    setTotalSW(totalSW);\n    setTotalWaste(totalWaste);\n    let maxNumber = maxNumForCoverPerWasteChartFunction(display);\n    setMaxNumber(maxNumber);\n    setShowSearchError(searchError);\n    setSelectedYear(selectedYear);\n\n    if (props.wastePerSales && showTooltip) {\n      setTooltipIsOpen(true);\n    } else {\n      setTooltipIsOpen(false);\n    } // setWeekOneArray(weekOneArray)\n    // setWeekTwo(weekTwoArray)\n    // setWeekThree(weekThreeArray)\n    // setWeekFour(weekFourArray)\n    // setWeekFive(weekFiveArray)\n    // setWeekSix(weekSixArray)\n    // setWeekSeven(weekSevenArray)\n    // setDates(dates)\n    // console.log(\"datesLabel\",datesLabel)\n    // setLabel(datesLabel)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [montlyArray, yearlyArray, count, display, searchError, selectedYear, wasteSteamValue, salesInputDataArray, datesLabel, foodWaste, foodWasteXaxis, props.wastePerSales]); // console.log(\"label\",label)\n\n  if (props.showPounds) {\n    if (display) {\n      const monetaryValues = display.map(data => {\n        return data * 2.775;\n      });\n      maxNumber = maxNumForCoverPerWasteChartFunction(monetaryValues);\n    }\n  } else {\n    maxNumber = maxNumForCoverPerWasteChartFunction(display);\n  }\n\n  const {\n    width\n  } = useWindowDimensions();\n\n  if (width <= 700) {\n    graphWidth = 260;\n    graphHeight = 65;\n  } else if (width >= 1600) {\n    graphWidth = 700;\n    graphHeight = 250;\n  } // if (activeState.coverSelector) {\n  //   barColors = \"rgba(140, 112, 140, 0.5)\"\n  // } else if (activeState.spoilageSelector) {\n  //   barColors = \"#ff8c00\"\n  // } else if (activeState.preparationSelector) {\n  //   barColors = \"rgba(133, 165, 101, 0.5)\"\n  // } else {\n  //   barColors = \"rgba(15, 128, 140, 0.5)\"\n  // }\n\n\n  let indexes;\n  let barColors = [\"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\"];\n  console.log(\"foodWaste\", foodWaste);\n  console.log(\"allCappingValue\", allCappingValue);\n  indexes = getIndexesForBackgroundColours(foodWaste, allCappingValue, \"wastePerSalesCappingValues\", activeState);\n  console.log(\"indexes\", indexes);\n\n  if (indexes) {\n    indexes.targetIndexArray.map(data => {\n      // console.log(\"data\",data)\n      // console.log(\"barColors\",barColors)\n      barColors[data] = \"rgba(255, 0, 0, 0.9)\";\n      return \"\";\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !props.hideReport && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AccordionHeading, {\n    color: \"primPurpleBackgroundColor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 11\n    }\n  }, \"WASTE per SALES\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    onClick: () => {\n      props.setWastePerSales(!props.wastePerSales);\n      setItemInLocalStorage(\"showWastePerSales\", !props.wastePerSales);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }\n  }, props.wastePerSales ? \"X \" : \"| | | \"))), /*#__PURE__*/React.createElement(AccordionBody, {\n    open: props.wastePerSales,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: props.showDarkTheme ? \"darkTheme__reportBackgroundColor addPaddingOfHalveRem\" : \"originalTheme__reportBackgroundColor addPaddingOfHalveRem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__row addSpaceBetween\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"report-subtitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 13\n    }\n  }, siteName), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }\n  }, \"WASTE PER SALES\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 15\n    }\n  }, props.showPounds ? \"(Â£)\" : \"(Kg)\", \" /Person in \", monthName, \" \", year))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__labelWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__label applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 17\n    }\n  }, year), \" \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__label applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 17\n    }\n  }, monthName), \" \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__label applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 17\n    }\n  }, \"Total Waste\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyMarginRightAndLeft graph__label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 17\n    }\n  }, \"C\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: 1,\n    key: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: props.showDarkTheme ? \"darkTheme__numberColor\" : \"applyBlueTuckGreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 19\n    }\n  }, totalCoverWaste)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 17\n    }\n  }, \"+\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__label applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 17\n    }\n  }, \"S\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: 2,\n    key: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: props.showDarkTheme ? \"darkTheme__numberColor\" : \"applyBlueTuckGreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 19\n    }\n  }, totalSpoilageWaste)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 17\n    }\n  }, \"+\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyMarginRightAndLeft graph__label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 17\n    }\n  }, \"P\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: 3,\n    key: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: props.showDarkTheme ? \"darkTheme__numberColor\" : \"applyBlueTuckGreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 19\n    }\n  }, totalPrepWaste, \" = \", totalAllWaste)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__labelWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__label applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 15\n    }\n  }, year, \" \", monthName, \" Total Monthly Sales\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyBlueTuckGreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 15\n    }\n  }, totalSalesInputs))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__labelWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__label applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 15\n    }\n  }, \"Do we have Monthly Sales Inputs data in \", monthName, \" \", year, \"? \", percentageOfInputsAreZeros > 50 ? \"NO\" : \"YES\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard__wrapperForSelector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard__selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    open: tooltipIsOpen // onOpen={() => setTooltipIsOpen(true)}\n    ,\n    onClose: () => setTooltipIsOpen(false),\n    title: \"click on C, S, P or All waste stream\",\n    arrow: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: activeState.coverSelector ? \"active\" : \"inactive\",\n    id: 0,\n    onClick: () => {\n      toggleActive(\"coverSelector\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 17\n    }\n  }, \"C\")), /*#__PURE__*/React.createElement(Tooltip, {\n    open: tooltipIsOpen // onOpen={() => setTooltipIsOpen(true)}\n    ,\n    onClose: () => setTooltipIsOpen(false),\n    arrow: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: activeState.spoilageSelector ? \"active\" : \"inactive\",\n    id: 1,\n    onClick: () => {\n      toggleActive(\"spoilageSelector\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 17\n    }\n  }, \"S\")), /*#__PURE__*/React.createElement(Tooltip, {\n    open: tooltipIsOpen // onOpen={() => setTooltipIsOpen(true)}\n    ,\n    onClose: () => setTooltipIsOpen(false),\n    arrow: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: activeState.preparationSelector ? \"active\" : \"inactive\",\n    id: 2,\n    onClick: () => {\n      toggleActive(\"preparationSelector\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 17\n    }\n  }, \"P\")), /*#__PURE__*/React.createElement(\"h2\", {\n    className: activeState.allSelector ? \"active\" : \"inactive\",\n    id: 3,\n    onClick: () => {\n      toggleActive(\"allSelector\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 17\n    }\n  }, \"ALL\"))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Capping, {\n    coverWastes: wastePerSalesCoverWastes,\n    spoilageWastes: wastePerSalesSpoilageWastes,\n    prepWastes: wastePerSalesPrepWastes,\n    showPounds: props.showPounds,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard__wrapperForGraph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\",\n      overflow: \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: foodWasteXaxis,\n      wasteSteamsValue: wasteStreamValue,\n      inputData: inputsData,\n      datasets: [{\n        label: \"array 1\",\n        data: props.showPounds ? displayValue.map(data => {\n          if (data) {\n            return (data * 2.775).toFixed(2);\n          }\n        }) : displayValue,\n        backgroundColor: barColors,\n        categoryPercentage: 1.0,\n        barPercentage: 0.5\n      }]\n    },\n    width: graphWidth,\n    height: graphHeight,\n    options: {\n      responsive: true,\n      maintainAspectRatio: true,\n      layout: {\n        padding: {\n          left: 25,\n          right: 25,\n          top: 10,\n          bottom: 10\n        }\n      },\n      scales: {\n        xAxes: [{\n          display: true,\n          gridLines: {\n            display: false\n          },\n          ticks: {\n            autoSkip: false,\n            fontSize: 7\n          }\n        }],\n        yAxes: [{\n          gridLines: {\n            display: false\n          },\n          ticks: {\n            maxTicksLimit: 4,\n            display: false,\n            beginAtZero: true,\n            max: maxNumber\n          }\n        }]\n      },\n      plugins: {\n        datalabels: {\n          display: true,\n          color: \"rgb(47, 64, 30)\",\n          anchor: \"end\",\n          align: \"end\",\n          clamp: true,\n          backgroundColor: null,\n          borderColor: null,\n          borderRadius: 4,\n          borderWidth: 1,\n          font: {\n            // size: fontSize,\n            size: 5,\n            weight: 900\n          },\n          offset: 4\n        }\n      },\n      tooltips: {\n        enabled: true,\n        callbacks: {\n          title: function (tooltipItems, data) {\n            return '';\n          },\n          label: function (tooltipItem, data) {\n            // console.log(\"inputData\",data.inputData[tooltipItem.index]);\n            // console.log(\"wasteSteamsValue\",data.wasteSteamsValue[tooltipItem.index]);\n            // console.log(\"data.inputData\",data.inputData)\n            // console.log(\"data.wasteSteamsValue\",data.wasteSteamsValue)\n            // console.log(\"index\",tooltipItem.index);\n            // console.log(\"data\",data);\n            let inputData = data.inputData[tooltipItem.index]; // console.log(\"data\",data)\n            // console.log(\"tooltipItem.index\",tooltipItem.index)\n            // console.log(\"data.wasteSteamsValue[tooltipItem.index]\",data.wasteSteamsValue[tooltipItem.index])\n            // console.log(\"keepTwoDecimalPlacesWithoutRoundingUp(data.wasteSteamsValue[tooltipItem.index]\",keepTwoDecimalPlacesWithoutRoundingUp(data.wasteSteamsValue[tooltipItem.index]))\n\n            let wasteSteamValue = isInt(data.wasteSteamsValue[tooltipItem.index]) ? data.wasteSteamsValue[tooltipItem.index] : keepTwoDecimalPlacesWithoutRoundingUp(data.wasteSteamsValue[tooltipItem.index]);\n            const val = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n            return val + \"(\" + wasteSteamValue + \"/\" + inputData + \")\";\n          }\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dateLabel__wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dateLabel__coverwastesSquare\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 17\n    }\n  }), \"COVER\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dateLabel__spoliageSquare\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 17\n    }\n  }), \"SPOILAGE\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dateLabel__preparationSquare\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 17\n    }\n  }), \"PREPARATION\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dateLabel__allWasteSquare\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 17\n    }\n  }), \"ALL\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__selector-spacing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 15\n    }\n  }, \"MONTH:\"), montlyArray.map((month, i) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: month.show ? \"active applyMarginRightAndLeft applyPurpleColor\" : \"displayNone\",\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 19\n      }\n    }, month.month);\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"applyMarginRightAndLeft clickable\",\n    onClick: () => {\n      handleMonthly(\"NEXT\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 15\n    }\n  }, \"NEXT\"), /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"clickable\",\n    onClick: () => {\n      handleMonthly(\"PREV\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 15\n    }\n  }, \"PREV\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__title clickable applyPurpleColor\",\n    onClick: () => {\n      handleSearch();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 13\n    }\n  }, \"SEARCH\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 611,\n      columnNumber: 14\n    }\n  }, \"(Starts on the first Monday of the Month)\"))))));\n}","map":{"version":3,"sources":["/Users/james/Documents/CODE/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/reports/waste-per-sales-report.js"],"names":["React","useContext","useEffect","useState","Bar","useWindowDimensions","WastePerSalesContext","WasteCapContext","AccordionHeading","AccordionBody","setItemInLocalStorage","maxNumForCoverPerWasteChartFunction","keepTwoDecimalPlacesWithoutRoundingUp","isInt","getIndexesForBackgroundColours","Capping","Tooltip","graphWidth","graphHeight","WastePerSalesGraph","props","allCappingValue","wastePerSalesCoverWastes","wastePerSalesSpoilageWastes","wastePerSalesPrepWastes","tooltipIsOpen","setTooltipIsOpen","totalCW","count","totalPW","totalSW","totalWaste","monthName","selectedYear","totalSalesInputs","percentageOfInputsAreZeros","display","toggleActive","activeState","montlyArray","yearlyArray","handleSearch","searchError","siteName","handleMonthly","wasteSteamValue","salesInputDataArray","datesLabel","foodWaste","foodWasteXaxis","showTooltip","displayValue","setDisplay","totalCoverWaste","setTotalCW","totalPrepWaste","setTotalPW","totalSpoilageWaste","setTotalSW","totalAllWaste","setTotalWaste","showSearchError","setShowSearchError","year","setSelectedYear","maxNumber","setMaxNumber","inputsData","setInputsData","wasteStreamValue","setWasteStreamValue","wastePerSales","showPounds","monetaryValues","map","data","width","indexes","barColors","console","log","targetIndexArray","hideReport","setWastePerSales","showDarkTheme","coverSelector","spoilageSelector","preparationSelector","allSelector","justifyContent","overflow","labels","wasteSteamsValue","inputData","datasets","label","toFixed","backgroundColor","categoryPercentage","barPercentage","responsive","maintainAspectRatio","layout","padding","left","right","top","bottom","scales","xAxes","gridLines","ticks","autoSkip","fontSize","yAxes","maxTicksLimit","beginAtZero","max","plugins","datalabels","color","anchor","align","clamp","borderColor","borderRadius","borderWidth","font","size","weight","offset","tooltips","enabled","callbacks","title","tooltipItems","tooltipItem","index","val","datasetIndex","month","i","show"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState} from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport \"chartjs-plugin-annotation\";\nimport \"chartjs-plugin-datalabels\";\n\nimport useWindowDimensions from \"../../libs/use-window-dimensions\";\n\nimport { WastePerSalesContext } from \"../../../../contexts/waste-per-sales-context\";\n\nimport { WasteCapContext } from \"../../../../contexts/waste-cap-context\";\n\nimport { AccordionHeading, AccordionBody } from \"../accordion\"\n\nimport {\n  setItemInLocalStorage,\n  maxNumForCoverPerWasteChartFunction\n} from \"../../../../utilities.js\";\n\nimport {\n  keepTwoDecimalPlacesWithoutRoundingUp,\n  isInt,\n  getIndexesForBackgroundColours\n} from \"../../../../helper.js\";\n\nimport Capping from \"./../reuseable-components/labels/capping\"\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nlet graphWidth = 500;\nlet graphHeight = 220;\n// let fontSize = 7\n\nexport default function WastePerSalesGraph(props) {\n\nconst {\n  allCappingValue,\n  wastePerSalesCoverWastes,\n  wastePerSalesSpoilageWastes,\n  wastePerSalesPrepWastes,\n} = useContext(WasteCapContext);\n\nconst [tooltipIsOpen, setTooltipIsOpen] = React.useState(true);\n\nconst {\n  totalCW,\n  count,\n  totalPW,\n  totalSW,\n  totalWaste,\n  monthName,\n  selectedYear,\n  totalSalesInputs,\n  percentageOfInputsAreZeros,\n  display,\n  toggleActive,\n  activeState,\n  montlyArray,\n  yearlyArray,\n\n  handleSearch,\n  searchError,\n  siteName,\n  // handleYearly,\n  handleMonthly,\n\n  wasteSteamValue,\n  salesInputDataArray,\n\n  datesLabel,\n  foodWaste,\n  foodWasteXaxis,\n\n  showTooltip\n} = useContext(WastePerSalesContext);\n\n  // const [ monthly, setMonthlyArray] = React.useState([])\n  // const [ yearly, setYearlyArray ] = React.useState([])\n\n  const [ displayValue, setDisplay ] = React.useState([])\n\n  const [totalCoverWaste, setTotalCW ] = useState(0)\n  const [totalPrepWaste, setTotalPW ] = useState(0)\n  const [totalSpoilageWaste, setTotalSW ] = useState(0)\n  const [totalAllWaste, setTotalWaste ] = useState(0)\n\n  const [showSearchError, setShowSearchError ] = useState(false)\n  const [year, setSelectedYear] = React.useState(0);\n\n  // let maxNumber = 1;\n  let [maxNumber, setMaxNumber] = React.useState(1);\n\n  // let barColors = \"rgba(15, 128, 140, 0.5)\"\n\n  const [ inputsData, setInputsData ] = useState([])\n  const [ wasteStreamValue, setWasteStreamValue] = useState([])\n\n  // const [label, setLabel ] = useState([])\n\n  useEffect(() => {\n\n    setWasteStreamValue(wasteSteamValue);\n    setInputsData(salesInputDataArray);\n\n    setDisplay(foodWaste)\n\n    // setMonthlyArray(montlyArray)\n    // setYearlyArray(yearlyArray)\n    // setDisplay(display)\n    setTotalCW(totalCW)\n    setTotalPW(totalPW)\n    setTotalSW(totalSW)\n    setTotalWaste(totalWaste)\n    let maxNumber = maxNumForCoverPerWasteChartFunction(display)\n    setMaxNumber(maxNumber)\n    setShowSearchError(searchError)\n    setSelectedYear(selectedYear)\n\n    if (props.wastePerSales && showTooltip) {\n      setTooltipIsOpen(true)\n    } else {\n      setTooltipIsOpen(false)\n    }\n\n    // setWeekOneArray(weekOneArray)\n    // setWeekTwo(weekTwoArray)\n    // setWeekThree(weekThreeArray)\n    // setWeekFour(weekFourArray)\n    // setWeekFive(weekFiveArray)\n    // setWeekSix(weekSixArray)\n    // setWeekSeven(weekSevenArray)\n    // setDates(dates)\n\n    // console.log(\"datesLabel\",datesLabel)\n    // setLabel(datesLabel)\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    montlyArray,\n    yearlyArray,\n    count,\n    display,\n    searchError,\n    selectedYear,\n\n    wasteSteamValue,\n    salesInputDataArray,\n\n    datesLabel,\n    foodWaste,\n    foodWasteXaxis,\n    props.wastePerSales\n  ])\n\n  // console.log(\"label\",label)\n\n  if (props.showPounds) {\n    if (display) {\n      const monetaryValues = display.map((data) => {\n        return data * 2.775;\n      })\n      maxNumber = maxNumForCoverPerWasteChartFunction(monetaryValues)\n\n    }\n  } else {\n    maxNumber = maxNumForCoverPerWasteChartFunction(display)\n  }\n\n  const { width } = useWindowDimensions();\n\n  if (width <= 700) {\n    graphWidth = 260;\n    graphHeight = 65;\n  } else if (width >= 1600) {\n    graphWidth = 700;\n    graphHeight = 250;\n  }\n\n  // if (activeState.coverSelector) {\n  //   barColors = \"rgba(140, 112, 140, 0.5)\"\n  // } else if (activeState.spoilageSelector) {\n  //   barColors = \"#ff8c00\"\n  // } else if (activeState.preparationSelector) {\n  //   barColors = \"rgba(133, 165, 101, 0.5)\"\n  // } else {\n  //   barColors = \"rgba(15, 128, 140, 0.5)\"\n  // }\n\n  let indexes;\n\n  let barColors = [\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n  ];\n\n\n  console.log(\"foodWaste\",foodWaste)\n  console.log(\"allCappingValue\",allCappingValue)\n\n  indexes = getIndexesForBackgroundColours(foodWaste,allCappingValue, \"wastePerSalesCappingValues\", activeState);\n  console.log(\"indexes\",indexes);\n\n  if (indexes) {\n    indexes.targetIndexArray.map((data) => {\n      // console.log(\"data\",data)\n      // console.log(\"barColors\",barColors)\n\n      barColors[data] = \"rgba(255, 0, 0, 0.9)\";\n      return \"\"\n    })\n  }\n\n  return (\n\n    <>\n      {!props.hideReport &&\n      <>\n        <AccordionHeading color={\"primPurpleBackgroundColor\"}>\n\n          <div className=\"section-title\">WASTE per SALES</div>\n          <div className=\"container\">\n            <span onClick={() =>\n                {\n                  props.setWastePerSales(!props.wastePerSales)\n                  setItemInLocalStorage(\"showWastePerSales\", !props.wastePerSales)\n                }\n                }>\n\n                {props.wastePerSales ? (\n                \"X \")\n                :\n                \"| | | \"\n                }\n            </span>\n          </div>\n\n        </AccordionHeading>\n        <AccordionBody open={props.wastePerSales}>\n\n        <div className= { props.showDarkTheme ? \"darkTheme__reportBackgroundColor addPaddingOfHalveRem\": \"originalTheme__reportBackgroundColor addPaddingOfHalveRem\"}>\n\n          <div className=\"graph__row addSpaceBetween\">\n            <div className=\"report-subtitle\">{siteName}</div>\n            <div className=\"graph__heading\">WASTE PER SALES\n              <div className=\"applyMarginRightAndLeft\">{props.showPounds? \"(Â£)\" : \"(Kg)\" } /Person in {monthName} {year}</div>\n            </div>\n          </div>\n\n          <div className=\"graph__row\">\n\n            <div className=\"graph__labelWrapper\">\n\n                <div className=\"graph__label applyMarginRightAndLeft\">{year}</div>\n                {\" \"}\n                <div className=\"graph__label applyMarginRightAndLeft\">{monthName}</div>\n                {\" \"}\n                <div className=\"graph__label applyMarginRightAndLeft\">\n                  Total Waste\n                </div>\n                <div className=\"applyMarginRightAndLeft graph__label\">\n                    C\n                </div>\n                <div\n                  id={1}\n                  key={0}\n                >\n                  <div className={props.showDarkTheme? \"darkTheme__numberColor\" :\"applyBlueTuckGreen\"}>\n                    {totalCoverWaste}\n                  </div>\n                </div>\n                <div>+</div>\n                <div className=\"graph__label applyMarginRightAndLeft\">\n                    S\n                 </div>\n                <div\n                  id={2}\n                  key={1}\n                >\n                  <div className={props.showDarkTheme? \"darkTheme__numberColor\" :\"applyBlueTuckGreen\"}>\n                    {totalSpoilageWaste}\n                  </div>\n                </div>\n                <div>+</div>\n                <div className=\"applyMarginRightAndLeft graph__label\">\n                  P\n                </div>\n                <div\n                  id={3}\n                  key={2}\n                >\n                  <div className={props.showDarkTheme? \"darkTheme__numberColor\" :\"applyBlueTuckGreen\"}>\n                    {totalPrepWaste} = {totalAllWaste}\n                  </div>\n                </div>\n              </div>\n\n          </div>\n\n          <div className=\"graph__row\">\n            <div className=\"graph__labelWrapper\">\n              <div className=\"graph__label applyMarginRightAndLeft\">{year} {monthName} Total Monthly Sales</div>\n              <div className=\"applyBlueTuckGreen\">{totalSalesInputs}</div>\n            </div>\n          </div>\n          <div className=\"graph__row\">\n            <div className=\"graph__labelWrapper\">\n              <div className=\"graph__label applyMarginRightAndLeft\">Do we have Monthly Sales Inputs data in {monthName} {year}? {percentageOfInputsAreZeros > 50 ? \"NO\" : \"YES\"}</div>\n            </div>\n          </div>\n\n\n          <div className=\"dashboard__wrapperForSelector\">\n              <div className=\"dashboard__selector\">\n\n                <Tooltip\n                  open={tooltipIsOpen}\n                  // onOpen={() => setTooltipIsOpen(true)}\n                  onClose={() => setTooltipIsOpen(false)}\n                  title=\"click on C, S, P or All waste stream\"\n                  arrow\n                >\n\n                <h2\n                  className={activeState.coverSelector ? \"active\" : \"inactive\"}\n                  id={0}\n                  onClick={() => {\n                    toggleActive(\"coverSelector\");\n                  }}\n                  >C</h2>\n\n                </Tooltip>\n\n                <Tooltip\n                  open={tooltipIsOpen}\n                  // onOpen={() => setTooltipIsOpen(true)}\n                  onClose={() => setTooltipIsOpen(false)}\n                  arrow\n                >\n\n                <h2\n                  className={activeState.spoilageSelector ? \"active\" : \"inactive\"}\n                  id={1}\n                  onClick={() => {\n                    toggleActive(\"spoilageSelector\");\n                  }}\n                  >S</h2>\n\n                </Tooltip>\n\n                <Tooltip\n                  open={tooltipIsOpen}\n                  // onOpen={() => setTooltipIsOpen(true)}\n                  onClose={() => setTooltipIsOpen(false)}\n                  arrow\n                >\n\n                <h2\n                  className={activeState.preparationSelector ? \"active\" : \"inactive\"}\n                  id={2}\n                  onClick={() => {\n                    toggleActive(\"preparationSelector\");\n                  }}\n                  >P</h2>\n\n                </Tooltip>\n\n                <h2\n                  className={activeState.allSelector ? \"active\" : \"inactive\"}\n                  id={3}\n                  onClick={() => {\n                    toggleActive(\"allSelector\");\n                  }}\n                  >ALL</h2>\n              </div>\n          </div>\n\n          <div style={{\n            display: \"flex\",\n            justifyContent: \"center\"\n          }}>\n            <Capping\n              coverWastes={wastePerSalesCoverWastes}\n              spoilageWastes={wastePerSalesSpoilageWastes}\n              prepWastes={wastePerSalesPrepWastes}\n              showPounds={props.showPounds}\n            />\n          </div>\n\n          <div className=\"dashboard__wrapperForGraph\">\n            <div\n              style={{\n                width: \"100%\",\n                overflow: \"auto\"\n             }}\n            >\n\n              <Bar\n                  data={{\n                    labels: foodWasteXaxis,\n                    wasteSteamsValue: wasteStreamValue,\n                    inputData: inputsData,\n                    datasets: [\n                      {\n                        label: \"array 1\",\n                        data: props.showPounds? displayValue.map((data) => {\n                          if (data) {\n                            return (data * 2.775).toFixed(2)\n                          }\n                        }) : displayValue,\n                        backgroundColor: barColors,\n                        categoryPercentage: 1.0,\n                        barPercentage: 0.5\n                      },\n                    ],\n                  }}\n                  width={graphWidth}\n                  height={graphHeight}\n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: true,\n                    layout: {\n                      padding: {\n                          left: 25,\n                          right: 25,\n                          top: 10,\n                          bottom: 10\n                      }\n                    },\n                    scales: {\n                      xAxes: [\n                        {\n                          display: true,\n                          gridLines: {\n                            display: false,\n                          },\n                          ticks: {\n                            autoSkip: false,\n                            fontSize: 7\n                          },\n                        },\n                      ],\n                      yAxes: [\n                        {\n                          gridLines: {\n                            display: false,\n                          },\n                          ticks: {\n                            maxTicksLimit: 4,\n                            display: false,\n                            beginAtZero: true,\n                            max: maxNumber\n                          },\n                        },\n                      ],\n                    },\n\n                    plugins: {\n                      datalabels: {\n                        display: true,\n                        color: \"rgb(47, 64, 30)\",\n                        anchor: \"end\",\n                        align: \"end\",\n                        clamp: true,\n                        backgroundColor: null,\n                        borderColor: null,\n                        borderRadius: 4,\n                        borderWidth: 1,\n                        font: {\n                          // size: fontSize,\n                          size: 5,\n                          weight: 900,\n                        },\n                        offset: 4,\n                      },\n                    },\n\n                    tooltips: {\n                      enabled: true,\n                      callbacks: {\n                        title: function(tooltipItems, data) {\n                          return '';\n                        },\n                        label: function(tooltipItem, data) {\n\n                          // console.log(\"inputData\",data.inputData[tooltipItem.index]);\n                          // console.log(\"wasteSteamsValue\",data.wasteSteamsValue[tooltipItem.index]);\n\n                          // console.log(\"data.inputData\",data.inputData)\n                          // console.log(\"data.wasteSteamsValue\",data.wasteSteamsValue)\n\n                          // console.log(\"index\",tooltipItem.index);\n\n                          // console.log(\"data\",data);\n\n                          let inputData = data.inputData[tooltipItem.index];\n\n                          // console.log(\"data\",data)\n                          // console.log(\"tooltipItem.index\",tooltipItem.index)\n\n                          // console.log(\"data.wasteSteamsValue[tooltipItem.index]\",data.wasteSteamsValue[tooltipItem.index])\n                          // console.log(\"keepTwoDecimalPlacesWithoutRoundingUp(data.wasteSteamsValue[tooltipItem.index]\",keepTwoDecimalPlacesWithoutRoundingUp(data.wasteSteamsValue[tooltipItem.index]))\n\n                          let wasteSteamValue = isInt(data.wasteSteamsValue[tooltipItem.index]) ? data.wasteSteamsValue[tooltipItem.index] :  keepTwoDecimalPlacesWithoutRoundingUp(data.wasteSteamsValue[tooltipItem.index])\n\n                          const val = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n                          return val + \"(\" +  wasteSteamValue + \"/\" + inputData + \")\"\n                        }\n                      }\n                    }\n\n                  }}\n              />\n\n            </div>\n          </div>\n\n\n          <div className=\"graph__row\">\n              <div className=\"dateLabel__wrapper\">\n                <div className=\"dateLabel__coverwastesSquare\"></div>\n                COVER\n                <div className=\"dateLabel__spoliageSquare\"></div>\n                SPOILAGE\n                <div className=\"dateLabel__preparationSquare\"></div>\n                PREPARATION\n                <div className=\"dateLabel__allWasteSquare\"></div>\n                ALL\n              </div>\n          </div>\n\n\n          <div className=\"graph__row\">\n            <div className=\"graph__selector-spacing\">\n              <div className=\"graph__title\">MONTH:\n              </div>\n\n              {montlyArray.map((month, i) => {\n                return (\n                  <div className={month.show? \"active applyMarginRightAndLeft applyPurpleColor\": \"displayNone\"} key={i} >\n                    {month.month}\n                  </div>\n                )\n              })}\n\n              <h2 className=\"applyMarginRightAndLeft clickable\" onClick={() => {handleMonthly(\"NEXT\")}}>NEXT</h2>\n              <h2 className=\"clickable\" onClick={() => {handleMonthly(\"PREV\")}}>PREV</h2>\n            </div>\n            {/* <div className=\"graph__selector-spacing\">\n              <div className=\"graph__title\">YEAR:\n              </div>\n              {yearly.map((year, i) =>{\n                return (\n                  <div className={year.show? \"active applyMarginRightAndLeft applyPurpleColor\": \"displayNone\"} key={i} >\n                    {year.year}\n                  </div>\n                )\n              })}\n              <h2 className=\"applyMarginRightAndLeft clickable\" onClick={() => {handleYearly(\"NEXT\")}}>NEXT</h2>\n              <h2 className=\"clickable\" onClick={() => {handleYearly(\"PREV\")}}>PREV</h2>\n            </div> */}\n            <div className=\"graph__title clickable applyPurpleColor\" onClick={() => {handleSearch()}}>\n              SEARCH\n            </div>\n          </div>\n\n          {/* <div className=\"graph__row\">\n             <div className=\"warning\">\n              {showSearchError? \"Please note the Data you have requested is not available\":\"\"}\n             </div>\n          </div> */}\n\n          <div className=\"graph__row\">\n             <div className=\"graph__message\">\n              (Starts on the first Monday of the Month)\n             </div>\n          </div>\n\n        </div>\n\n      </AccordionBody>\n      </>\n      }\n    </>\n\n  );\n}\n"]},"metadata":{},"sourceType":"module"}