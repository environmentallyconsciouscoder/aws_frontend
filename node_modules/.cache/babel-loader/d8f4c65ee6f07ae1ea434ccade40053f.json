{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/live-feeds/public-live-feed.js\";\nimport React, { useRef, useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./public-live-feed.css\";\nimport { s3Upload } from \"./file-uploader\";\nexport default function PublicLiveFeed() {\n  const file = useRef(null);\n  const history = useHistory();\n  const [content, setContent] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  function validateForm() {\n    return content.length > 0;\n  }\n\n  function handleFileChange(event) {\n    file.current = event.target.files[0];\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n\n    if (file.current && file.current.size > 5000000) {\n      alert(`Please pick a file smaller than ${5000000 / 1000000} MB.`);\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      // console.log(\"file.current\",file.current);\n      // const attachment = file.current ? await s3Upload(file.current) : null;\n      // console.log(\"attachment\",attachment);\n      const test = \"1638021221938-fxplus_logo.jpeg\";\n      const note = Storage.vault.get(test);\n      console.log(\"note\", note); // await createNote({ content, attachment });\n      // history.push(\"/\");\n    } catch (e) {\n      // onError(e);\n      setIsLoading(false);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"contentManagement\",\n    style: {\n      width: \"100%\",\n      height: \"100%\",\n      paddingTop: \"15rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/live-feeds/public-live-feed.js"],"names":["React","useRef","useState","Form","useHistory","s3Upload","PublicLiveFeed","file","history","content","setContent","isLoading","setIsLoading","validateForm","length","handleFileChange","event","current","target","files","handleSubmit","preventDefault","size","alert","test","note","Storage","vault","get","console","log","e","width","height","paddingTop"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAO,wBAAP;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAEA,eAAe,SAASC,cAAT,GAA0B;AACvC,QAAMC,IAAI,GAAGN,MAAM,CAAC,IAAD,CAAnB;AACA,QAAMO,OAAO,GAAGJ,UAAU,EAA1B;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;;AAEA,WAASW,YAAT,GAAwB;AACtB,WAAOJ,OAAO,CAACK,MAAR,GAAiB,CAAxB;AACD;;AAED,WAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/BT,IAAAA,IAAI,CAACU,OAAL,GAAeD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAf;AACD;;AAED,iBAAeC,YAAf,CAA4BJ,KAA5B,EAAmC;AACjCA,IAAAA,KAAK,CAACK,cAAN;;AAEA,QAAId,IAAI,CAACU,OAAL,IAAgBV,IAAI,CAACU,OAAL,CAAaK,IAAb,GAAoB,OAAxC,EAAiD;AAC/CC,MAAAA,KAAK,CACF,mCACC,UAAU,OACX,MAHE,CAAL;AAKA;AACD;;AAEDX,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,QAAI;AACF;AACA;AACA;AAEA,YAAMY,IAAI,GAAG,gCAAb;AACA,YAAMC,IAAI,GAAGC,OAAO,CAACC,KAAR,CAAcC,GAAd,CAAkBJ,IAAlB,CAAb;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBL,IAAnB,EAPE,CASF;AACA;AACD,KAXD,CAWE,OAAOM,CAAP,EAAU;AACV;AACAnB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAmC,IAAA,KAAK,EAAE;AACxCoB,MAAAA,KAAK,EAAE,MADiC;AAExCC,MAAAA,MAAM,EAAE,MAFgC;AAGxCC,MAAAA,UAAU,EAAE;AAH4B,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CALF,CADF;AA6BD","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport { useHistory } from \"react-router-dom\";\n\nimport \"./public-live-feed.css\";\nimport { s3Upload } from \"./file-uploader\";\n\nexport default function PublicLiveFeed() {\n  const file = useRef(null);\n  const history = useHistory();\n  const [content, setContent] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  function validateForm() {\n    return content.length > 0;\n  }\n\n  function handleFileChange(event) {\n    file.current = event.target.files[0];\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n\n    if (file.current && file.current.size > 5000000) {\n      alert(\n        `Please pick a file smaller than ${\n          5000000 / 1000000\n        } MB.`\n      );\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      // console.log(\"file.current\",file.current);\n      // const attachment = file.current ? await s3Upload(file.current) : null;\n      // console.log(\"attachment\",attachment);\n\n      const test = \"1638021221938-fxplus_logo.jpeg\"\n      const note = Storage.vault.get(test);\n      console.log(\"note\",note);\n\n      // await createNote({ content, attachment });\n      // history.push(\"/\");\n    } catch (e) {\n      // onError(e);\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <div className=\"contentManagement\" style={{\n      width: \"100%\",\n      height: \"100%\",\n      paddingTop: \"15rem\"\n    }}>\n      <div>\n        <div></div>\n        <div></div>\n      </div>\n      {/* <Form onSubmit={handleSubmit} className=\"contentManagement_form\">\n        <Form.Group controlId=\"content\">\n          <h2>Write your opening lines for the live feed below:</h2>\n          <Form.Control\n            value={content}\n            as=\"textarea\"\n            onChange={(e) => setContent(e.target.value)}\n          />\n        </Form.Group>\n        <Form.Group controlId=\"file\">\n          <Form.Label>Attachment (add company logo for live feed)</Form.Label>\n          <Form.Control onChange={handleFileChange} type=\"file\" />\n        </Form.Group>\n            <button>\n                <h3>Submit</h3>\n            </button>\n      </Form> */}\n    </div>\n  );\n}\n\n\n"]},"metadata":{},"sourceType":"module"}