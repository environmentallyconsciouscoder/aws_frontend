{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/contexts/live-feed-context.js\";\nimport React, { createContext, useEffect, useState } from 'react';\nimport { getLiveFeedContent, filterLiveFeedContent } from \"../api\";\nimport { getCurrentWeekNumberInTheYear } from \"./../helper.js\";\nexport const LiveFeedContext = createContext();\n\nconst LiveFeedContextProvider = props => {\n  const [siteName, setSiteName] = useState(\"\");\n  const [companyName, setCompanyName] = useState(\"\");\n  const [companyId, setCompanyId] = useState(\"\");\n  const [introduction, setIntroduction] = useState(\"\");\n  const [surveyOne, setSurveyOne] = useState(\"\");\n  const [surveyTwo, setSurveyTwo] = useState(\"\");\n  const [surveyThree, setSurveyThree] = useState(\"\");\n  const [surveyFour, setSurveyFour] = useState(\"\");\n  const [dataForGraph, setDataForGraph] = useState(\"\");\n  const [maxValue, setMaxValue] = useState(\"\");\n  const [numberOfWeeks, setNumberOfWeeks] = useState(\"\");\n  const [questions, setQuestions] = useState(\"\");\n  const [sampleTotal, setSampleTotal] = useState(\"\");\n  const [weekCommence, setWeekCommence] = useState(\"\");\n  const [allWeeksOfTheYear, setAllWeeksOfTheYear] = useState(\"\");\n  useEffect(() => {\n    // console.log(\"props\",props);\n    setSiteName(props.siteName);\n    setCompanyName(props.companyName);\n    setCompanyId(props.companyId);\n    const date = new Date();\n    const currentWeekNumberInTheYear = getCurrentWeekNumberInTheYear(date);\n\n    if (props.siteName, props.companyName, props.companyId) {\n      console.log(\"currentWeekNumberInTheYear\", date);\n      console.log(\"currentWeekNumberInTheYear\", currentWeekNumberInTheYear);\n      filterLiveFeedContent(props.companyId, props.companyName, props.siteName, currentWeekNumberInTheYear).then(data => {\n        // console.log(\"filterLiveFeedContent\",data)\n        if (data.dataForGraph) {\n          setDataForGraph(data.dataForGraph);\n          setMaxValue(data.maxValue);\n          setNumberOfWeeks(data.numberOfWeeks);\n          setQuestions(data.questions);\n          setSampleTotal(data.sampleTotal);\n          setWeekCommence(data.weekCommence);\n          setAllWeeksOfTheYear(data.allWeeksOfTheYear);\n        }\n      });\n    }\n\n    ;\n\n    if (props.siteName, props.companyName, props.companyId) {\n      getLiveFeedContent(props.companyId, props.companyName, props.siteName).then(data => {\n        if (data[0] !== undefined) {\n          const content = data[0][0];\n          setIntroduction(content.openingContent);\n          setSurveyOne(content.surveyQuestionOne);\n          setSurveyTwo(content.surveyQuestionTwo);\n          setSurveyThree(content.surveyQuestionThree);\n          setSurveyFour(content.surveyQuestionFour);\n        }\n      });\n    }\n\n    ;\n  }, [props.siteName, props.companyName, props.companyId]);\n  return /*#__PURE__*/React.createElement(LiveFeedContext.Provider, {\n    value: {\n      siteName,\n      companyName,\n      companyId,\n      introduction,\n      surveyOne,\n      surveyTwo,\n      surveyThree,\n      surveyFour,\n      dataForGraph,\n      maxValue,\n      numberOfWeeks,\n      questions,\n      sampleTotal,\n      weekCommence,\n      allWeeksOfTheYear,\n      siteName,\n      companyName,\n      companyId\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default LiveFeedContextProvider;","map":{"version":3,"sources":["/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/contexts/live-feed-context.js"],"names":["React","createContext","useEffect","useState","getLiveFeedContent","filterLiveFeedContent","getCurrentWeekNumberInTheYear","LiveFeedContext","LiveFeedContextProvider","props","siteName","setSiteName","companyName","setCompanyName","companyId","setCompanyId","introduction","setIntroduction","surveyOne","setSurveyOne","surveyTwo","setSurveyTwo","surveyThree","setSurveyThree","surveyFour","setSurveyFour","dataForGraph","setDataForGraph","maxValue","setMaxValue","numberOfWeeks","setNumberOfWeeks","questions","setQuestions","sampleTotal","setSampleTotal","weekCommence","setWeekCommence","allWeeksOfTheYear","setAllWeeksOfTheYear","date","Date","currentWeekNumberInTheYear","console","log","then","data","undefined","content","openingContent","surveyQuestionOne","surveyQuestionTwo","surveyQuestionThree","surveyQuestionFour","children"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState} from 'react'\nimport { getLiveFeedContent, filterLiveFeedContent } from \"../api\";\n\nimport { getCurrentWeekNumberInTheYear } from \"./../helper.js\"\n\nexport const LiveFeedContext = createContext()\n\nconst LiveFeedContextProvider = props => {\n\n  const [siteName, setSiteName] = useState(\"\")\n  const [companyName, setCompanyName] = useState(\"\")\n  const [companyId, setCompanyId] = useState(\"\")\n\n  const [introduction, setIntroduction] = useState(\"\")\n  const [surveyOne, setSurveyOne] = useState(\"\")\n  const [surveyTwo, setSurveyTwo] = useState(\"\")\n  const [surveyThree, setSurveyThree] = useState(\"\")\n  const [surveyFour, setSurveyFour] = useState(\"\")\n\n  const [dataForGraph, setDataForGraph] = useState(\"\")\n  const [maxValue, setMaxValue] = useState(\"\")\n  const [numberOfWeeks, setNumberOfWeeks] = useState(\"\")\n  const [questions, setQuestions] = useState(\"\")\n  const [sampleTotal, setSampleTotal] = useState(\"\")\n  const [weekCommence, setWeekCommence] = useState(\"\")\n  const [allWeeksOfTheYear, setAllWeeksOfTheYear] = useState(\"\")\n\n  useEffect(() => {\n\n    // console.log(\"props\",props);\n    setSiteName(props.siteName);\n    setCompanyName(props.companyName);\n    setCompanyId(props.companyId);\n\n    const date = new Date();\n    const currentWeekNumberInTheYear = getCurrentWeekNumberInTheYear(date);\n\n    if (props.siteName, props.companyName, props.companyId) {\n      console.log(\"currentWeekNumberInTheYear\",date);\n      console.log(\"currentWeekNumberInTheYear\",currentWeekNumberInTheYear);\n      filterLiveFeedContent(props.companyId, props.companyName, props.siteName, currentWeekNumberInTheYear).then((data) => {\n        // console.log(\"filterLiveFeedContent\",data)\n        if (data.dataForGraph) {\n          setDataForGraph(data.dataForGraph);\n          setMaxValue(data.maxValue);\n          setNumberOfWeeks(data.numberOfWeeks);\n          setQuestions(data.questions);\n          setSampleTotal(data.sampleTotal);\n          setWeekCommence(data.weekCommence);\n          setAllWeeksOfTheYear(data.allWeeksOfTheYear);\n        }\n      });\n    };\n\n    if (props.siteName, props.companyName, props.companyId) {\n      getLiveFeedContent(props.companyId, props.companyName, props.siteName).then((data) => {\n        if (data[0] !== undefined) {\n          const content = data[0][0];\n          setIntroduction(content.openingContent)\n          setSurveyOne(content.surveyQuestionOne)\n          setSurveyTwo(content.surveyQuestionTwo)\n          setSurveyThree(content.surveyQuestionThree)\n          setSurveyFour(content.surveyQuestionFour)\n        }\n      });\n\n    };\n\n  }, [ props.siteName, props.companyName, props.companyId]);\n\n  return (\n    <LiveFeedContext.Provider\n      value={{\n        siteName,\n        companyName,\n        companyId,\n\n        introduction,\n        surveyOne,\n        surveyTwo,\n        surveyThree,\n        surveyFour,\n\n        dataForGraph,\n        maxValue,\n        numberOfWeeks,\n        questions,\n        sampleTotal,\n        weekCommence,\n        allWeeksOfTheYear,\n\n        siteName,\n        companyName,\n        companyId\n      }}\n    >\n      {props.children}\n    </LiveFeedContext.Provider>\n  )\n}\n\nexport default LiveFeedContextProvider"]},"metadata":{},"sourceType":"module"}