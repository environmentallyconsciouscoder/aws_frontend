{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/contexts/hourly-food-waste-context.js\";\nimport React, { createContext, useEffect, useState } from 'react';\nimport { roundedUpNumberAndTurnBackToString, roundedUpNumberAndTurnBackToNumber } from \"./../utilities.js\";\nexport const HourlyFoodWasteContext = createContext();\n\nconst HourlyFoodWasteContextProvider = props => {\n  const [hourlyWasteDate, setHourlyWasteDate] = useState(false);\n  const [index, setIndex] = useState(0);\n  const [hourlyWasteSelector, setHourlyWasteSelector] = React.useState(\"production\");\n  const [hourlyWasteValues, setHourlyWasteValues] = React.useState([]);\n  const [clickOnHourlyBarChart, setClickOnHourlyChart] = React.useState(false);\n  const [hourlyCoverWasteData, setHourlyCoverWaste] = React.useState([]);\n  const [hourlyPreparationWasteData, setHourlyPrepWaste] = React.useState([]);\n  const [hourlySpoilageWasteData, setHourlySpoilageWaste] = React.useState([]);\n  const [allHourlyWasteData, setAllHourlyWasteData] = React.useState([]);\n  const [showTooltip, setTooltip] = React.useState(true);\n  useEffect(() => {\n    if (props.hourlyWaste) {\n      // console.log(\"props.hourlyWaste\",props.hourlyWaste)\n      setAllHourlyWasteData(props.hourlyWaste);\n      handleHourlyWaste(props.hourlyWaste); // console.log(\"hourlyWasteValues\",hourlyWasteValues)\n    }\n  }, [props.siteName, props.hourlyWaste]);\n\n  const handleHourlyWaste = item => {\n    if (item) {\n      const index = item.index;\n      setIndex(index);\n      let date = item.date;\n      setHourlyWasteDate(date); // console.log(\"item\",item)\n      // console.log(\"item.index\",item.index)\n      // console.log(\"index\",index)\n      // console.log(\"date\",date)\n\n      const hourlyWaste = item.hourlyWaste ? item.hourlyWaste : []; // console.log(\"hourlyWaste\",hourlyWaste)\n\n      if (hourlyWaste.length > 0) {\n        const selectedHourlyWaste = hourlyWaste[index]; // console.log(\"selectedHourlyWaste\",selectedHourlyWaste)\n\n        if (selectedHourlyWaste) {\n          setHourlyCoverWaste(selectedHourlyWaste.data.coverWaste);\n          setHourlyPrepWaste(selectedHourlyWaste.data.preparationWaste);\n          setHourlySpoilageWaste(selectedHourlyWaste.data.spoilageWaste);\n          let hourlyWasteDataFormated = [];\n          selectedHourlyWaste.data.preparationWaste.map(data => {\n            const formatedData = roundedUpNumberAndTurnBackToNumber(data);\n            hourlyWasteDataFormated.push(formatedData);\n            return \"\";\n          });\n          setHourlyWasteValues(hourlyWasteDataFormated);\n          setClickOnHourlyChart(true);\n          setHourlyWasteSelector(\"production\");\n        }\n      }\n    }\n  };\n\n  const showCoverWasteLabelRed = (cap, values, showPounds, capInPounds) => {\n    // console.log(\"cap\",cap)\n    // console.log(\"values\",values)\n    // console.log(\"showPounds\",showPounds)\n    // console.log(\"converterValue\",converterValue)\n    // console.log(\"capInPounds\",capInPounds)\n    const converterValue = 2.775;\n\n    if (showPounds) {\n      const convertedValues = [];\n      values.map(data => {\n        convertedValues.push(data * converterValue);\n        return \"\";\n      });\n      let showRed;\n      let check = convertedValues.map(item => {\n        let value = roundedUpNumberAndTurnBackToString(item);\n\n        if (value >= capInPounds) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n\n      if (check.includes(true)) {\n        showRed = true;\n      } else {\n        showRed = false;\n      }\n\n      return showRed;\n    } else {\n      let showRed;\n      let check = values.map(item => {\n        let value = roundedUpNumberAndTurnBackToString(item);\n\n        if (value >= cap) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n\n      if (check.includes(true)) {\n        showRed = true;\n      } else {\n        showRed = false;\n      }\n\n      return showRed;\n    }\n  };\n\n  const handleHourlyWasteCategory = e => {\n    const value = e.target.id;\n\n    if (value === \"C\") {\n      // setHourlyWasteValues(hourlyCoverWasteData);\n      reformatData(hourlyCoverWasteData);\n      setHourlyWasteSelector(\"cover\");\n    } else if (value === \"S\") {\n      // setHourlyWasteValues(hourlySpoilageWasteData);\n      reformatData(hourlySpoilageWasteData);\n      setHourlyWasteSelector(\"spoliage\");\n    } else if (value === \"P\") {\n      // setHourlyWasteValues(hourlyPreparationWasteData);\n      reformatData(hourlyPreparationWasteData);\n      setHourlyWasteSelector(\"production\");\n    }\n\n    console.log(\"handleHourlyWasteCategory HERE\");\n    setTooltip(false);\n  };\n\n  const reformatData = selectedData => {\n    let hourlyWasteDataFormated = [];\n    selectedData.map(data => {\n      const formatedData = roundedUpNumberAndTurnBackToNumber(data);\n      hourlyWasteDataFormated.push(formatedData);\n      return \"\";\n    });\n    setHourlyWasteValues(hourlyWasteDataFormated);\n  };\n\n  const getIndexesForBackgroundColours = (showPounds, targetsInPounds, allCappings) => {\n    let cwTarget = allCappings.hourlyCoverWastesCap;\n    let prepTarget = allCappings.hourlyPeparationWastesCap;\n    let spoilageTarget = allCappings.hourlySpoliageWastesCap;\n    let coverWasteOverTargetIndexArray = [];\n    let spoilageWasteOverTargetIndexArray = [];\n    let prepWasteOverTargetIndexArray = [];\n\n    if (hourlyCoverWasteData) {\n      hourlyCoverWasteData.map((data, i) => {\n        const formatedNumber = roundedUpNumberAndTurnBackToNumber(data);\n\n        if (formatedNumber >= cwTarget) {\n          coverWasteOverTargetIndexArray.push(i);\n        }\n\n        return \"\";\n      });\n      hourlyPreparationWasteData.map((data, i) => {\n        const formatedNumber = roundedUpNumberAndTurnBackToNumber(data);\n\n        if (formatedNumber >= prepTarget) {\n          prepWasteOverTargetIndexArray.push(i);\n        }\n\n        return \"\";\n      });\n      hourlySpoilageWasteData.map((data, i) => {\n        const formatedNumber = roundedUpNumberAndTurnBackToNumber(data);\n\n        if (formatedNumber >= spoilageTarget) {\n          spoilageWasteOverTargetIndexArray.push(i);\n        }\n\n        return \"\";\n      });\n    }\n\n    return {\n      coverWasteOverTargetIndexArray: coverWasteOverTargetIndexArray,\n      spoilageWasteOverTargetIndexArray: spoilageWasteOverTargetIndexArray,\n      prepWasteOverTargetIndexArray: prepWasteOverTargetIndexArray\n    };\n  };\n\n  return /*#__PURE__*/React.createElement(HourlyFoodWasteContext.Provider, {\n    value: {\n      index,\n      hourlyWasteValues,\n      hourlyWasteDate,\n      clickOnHourlyBarChart,\n      hourlyWasteSelector,\n      hourlyCoverWasteData,\n      hourlyPreparationWasteData,\n      hourlySpoilageWasteData,\n      showCoverWasteLabelRed,\n      handleHourlyWasteCategory,\n      allHourlyWasteData,\n      handleHourlyWaste,\n      getIndexesForBackgroundColours,\n      showTooltip\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default HourlyFoodWasteContextProvider;","map":{"version":3,"sources":["/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/contexts/hourly-food-waste-context.js"],"names":["React","createContext","useEffect","useState","roundedUpNumberAndTurnBackToString","roundedUpNumberAndTurnBackToNumber","HourlyFoodWasteContext","HourlyFoodWasteContextProvider","props","hourlyWasteDate","setHourlyWasteDate","index","setIndex","hourlyWasteSelector","setHourlyWasteSelector","hourlyWasteValues","setHourlyWasteValues","clickOnHourlyBarChart","setClickOnHourlyChart","hourlyCoverWasteData","setHourlyCoverWaste","hourlyPreparationWasteData","setHourlyPrepWaste","hourlySpoilageWasteData","setHourlySpoilageWaste","allHourlyWasteData","setAllHourlyWasteData","showTooltip","setTooltip","hourlyWaste","handleHourlyWaste","siteName","item","date","length","selectedHourlyWaste","data","coverWaste","preparationWaste","spoilageWaste","hourlyWasteDataFormated","map","formatedData","push","showCoverWasteLabelRed","cap","values","showPounds","capInPounds","converterValue","convertedValues","showRed","check","value","includes","handleHourlyWasteCategory","e","target","id","reformatData","console","log","selectedData","getIndexesForBackgroundColours","targetsInPounds","allCappings","cwTarget","hourlyCoverWastesCap","prepTarget","hourlyPeparationWastesCap","spoilageTarget","hourlySpoliageWastesCap","coverWasteOverTargetIndexArray","spoilageWasteOverTargetIndexArray","prepWasteOverTargetIndexArray","i","formatedNumber","children"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from 'react'\n\nimport { roundedUpNumberAndTurnBackToString, roundedUpNumberAndTurnBackToNumber } from \"./../utilities.js\"\n\nexport const HourlyFoodWasteContext = createContext()\n\nconst HourlyFoodWasteContextProvider = props => {\n\n  const [hourlyWasteDate, setHourlyWasteDate] = useState(false);\n  const [index, setIndex] = useState(0);\n\n  const [hourlyWasteSelector, setHourlyWasteSelector] = React.useState(\"production\");\n  const [hourlyWasteValues, setHourlyWasteValues] = React.useState([]);\n\n  const [clickOnHourlyBarChart, setClickOnHourlyChart] = React.useState(false);\n\n  const [hourlyCoverWasteData, setHourlyCoverWaste] = React.useState([]);\n  const [hourlyPreparationWasteData, setHourlyPrepWaste] = React.useState([]);\n  const [hourlySpoilageWasteData, setHourlySpoilageWaste] = React.useState([]);\n\n  const [allHourlyWasteData, setAllHourlyWasteData] = React.useState([]);\n\n  const [showTooltip, setTooltip] = React.useState(true);\n\n  useEffect(() => {\n\n    if(props.hourlyWaste) {\n      // console.log(\"props.hourlyWaste\",props.hourlyWaste)\n      setAllHourlyWasteData(props.hourlyWaste)\n      handleHourlyWaste(props.hourlyWaste)\n      // console.log(\"hourlyWasteValues\",hourlyWasteValues)\n    }\n\n  }, [ props.siteName, props.hourlyWaste])\n\n  const handleHourlyWaste = (item) => {\n    if (item) {\n      const index = item.index;\n      setIndex(index);\n\n      let date = item.date;\n      setHourlyWasteDate(date);\n\n      // console.log(\"item\",item)\n      // console.log(\"item.index\",item.index)\n      // console.log(\"index\",index)\n      // console.log(\"date\",date)\n\n\n      const hourlyWaste = item.hourlyWaste ? item.hourlyWaste: []\n      // console.log(\"hourlyWaste\",hourlyWaste)\n      if (hourlyWaste.length > 0) {\n        const selectedHourlyWaste = hourlyWaste[index];\n        // console.log(\"selectedHourlyWaste\",selectedHourlyWaste)\n        if (selectedHourlyWaste) {\n          setHourlyCoverWaste(selectedHourlyWaste.data.coverWaste)\n          setHourlyPrepWaste(selectedHourlyWaste.data.preparationWaste)\n          setHourlySpoilageWaste(selectedHourlyWaste.data.spoilageWaste)\n\n          let hourlyWasteDataFormated = []\n          selectedHourlyWaste.data.preparationWaste.map((data) => {\n            const formatedData = roundedUpNumberAndTurnBackToNumber(data)\n            hourlyWasteDataFormated.push(formatedData);\n            return \"\"\n          })\n          setHourlyWasteValues(hourlyWasteDataFormated)\n\n          setClickOnHourlyChart(true);\n\n          setHourlyWasteSelector(\"production\");\n        }\n\n      }\n\n    }\n  }\n\n  const showCoverWasteLabelRed = (cap, values, showPounds, capInPounds) => {\n    // console.log(\"cap\",cap)\n    // console.log(\"values\",values)\n    // console.log(\"showPounds\",showPounds)\n    // console.log(\"converterValue\",converterValue)\n    // console.log(\"capInPounds\",capInPounds)\n\n    const converterValue = 2.775\n\n    if (showPounds) {\n      const convertedValues = []\n\n      values.map((data) => {\n        convertedValues.push(data * converterValue)\n        return \"\"\n      })\n\n      let showRed;\n\n      let check = convertedValues.map((item) => {\n        let value = roundedUpNumberAndTurnBackToString(item)\n\n        if (value >= capInPounds) {\n          return true;\n        } else {\n          return false;\n        }\n      })\n\n      if (check.includes(true)) {\n        showRed = true;\n      } else {\n        showRed = false;\n      }\n\n      return showRed;\n\n    } else {\n\n      let showRed;\n\n      let check = values.map((item) => {\n        let value = roundedUpNumberAndTurnBackToString(item)\n        if (value >= cap) {\n          return true;\n        } else {\n          return false;\n        }\n      })\n\n      if (check.includes(true)) {\n        showRed = true;\n      } else {\n        showRed = false;\n      }\n\n    return showRed;\n\n    }\n  }\n\n  const handleHourlyWasteCategory = (e) => {\n    const value = e.target.id;\n    if (value === \"C\") {\n      // setHourlyWasteValues(hourlyCoverWasteData);\n      reformatData(hourlyCoverWasteData)\n      setHourlyWasteSelector(\"cover\");\n    } else if (value === \"S\") {\n      // setHourlyWasteValues(hourlySpoilageWasteData);\n      reformatData(hourlySpoilageWasteData)\n      setHourlyWasteSelector(\"spoliage\");\n    } else if (value === \"P\") {\n      // setHourlyWasteValues(hourlyPreparationWasteData);\n      reformatData(hourlyPreparationWasteData)\n      setHourlyWasteSelector(\"production\");\n    }\n\n    console.log(\"handleHourlyWasteCategory HERE\")\n    setTooltip(false);\n  };\n\n  const reformatData = (selectedData) => {\n    let hourlyWasteDataFormated = []\n    selectedData.map((data) => {\n      const formatedData = roundedUpNumberAndTurnBackToNumber(data)\n      hourlyWasteDataFormated.push(formatedData);\n      return \"\"\n    })\n    setHourlyWasteValues(hourlyWasteDataFormated)\n  }\n\n  const getIndexesForBackgroundColours =(showPounds, targetsInPounds, allCappings) => {\n\n    let cwTarget = allCappings.hourlyCoverWastesCap\n    let prepTarget =  allCappings.hourlyPeparationWastesCap\n    let spoilageTarget =  allCappings.hourlySpoliageWastesCap\n\n    let coverWasteOverTargetIndexArray = []\n    let spoilageWasteOverTargetIndexArray = []\n    let prepWasteOverTargetIndexArray = []\n\n    if (hourlyCoverWasteData) {\n      hourlyCoverWasteData.map((data, i) => {\n\n          const formatedNumber = roundedUpNumberAndTurnBackToNumber(data)\n\n          if (formatedNumber >= cwTarget) {\n            coverWasteOverTargetIndexArray.push(i)\n          }\n          return \"\"\n\n      })\n\n\n      hourlyPreparationWasteData.map((data, i) => {\n\n          const formatedNumber = roundedUpNumberAndTurnBackToNumber(data)\n\n          if (formatedNumber >= prepTarget) {\n            prepWasteOverTargetIndexArray.push(i)\n          }\n          return \"\"\n\n      })\n\n      hourlySpoilageWasteData.map((data, i) => {\n\n          const formatedNumber = roundedUpNumberAndTurnBackToNumber(data)\n\n          if (formatedNumber >= spoilageTarget) {\n            spoilageWasteOverTargetIndexArray.push(i)\n          }\n          return \"\"\n      })\n\n    }\n\n    return {\n      coverWasteOverTargetIndexArray: coverWasteOverTargetIndexArray,\n      spoilageWasteOverTargetIndexArray: spoilageWasteOverTargetIndexArray,\n      prepWasteOverTargetIndexArray: prepWasteOverTargetIndexArray\n    }\n\n  }\n\n\n  return (\n    <HourlyFoodWasteContext.Provider\n      value={{\n        index,\n        hourlyWasteValues,\n        hourlyWasteDate,\n        clickOnHourlyBarChart,\n        hourlyWasteSelector,\n\n        hourlyCoverWasteData,\n        hourlyPreparationWasteData,\n        hourlySpoilageWasteData,\n\n        showCoverWasteLabelRed,\n        handleHourlyWasteCategory,\n\n        allHourlyWasteData,\n        handleHourlyWaste,\n\n        getIndexesForBackgroundColours,\n\n        showTooltip\n      }}\n    >\n      {props.children}\n    </HourlyFoodWasteContext.Provider>\n  )\n}\n\nexport default HourlyFoodWasteContextProvider"]},"metadata":{},"sourceType":"module"}