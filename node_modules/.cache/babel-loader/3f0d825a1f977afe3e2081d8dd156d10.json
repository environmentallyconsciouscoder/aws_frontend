{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/capping/add-capping.js\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { TableHead, Table, TableContainer, TableBody } from \"@material-ui/core\"; // import TextField from \"@material-ui/core/TextField\";\n\nimport { postCapping } from \"../../../../api.js\";\nimport { roundedUpNumberAndTurnBackToString } from \"../../../../utilities\";\nimport { WasteCapContext } from \"../../../../contexts/waste-cap-context\";\nimport { WasteLabelsContext } from \"../../../../contexts/waste-labels-context\";\nlet hourlyCoverWastesCap = 0;\nlet hourlySpoliageWastesCap = 0;\nlet hourlyPeparationWastesCap = 0;\nlet dailyCoverWastesCap = 0;\nlet dailySpoliageWastesCap = 0;\nlet dailyPeparationWastesCap = 0;\nlet weeklyCoverCap = 0;\nlet weeklySpoliageCap = 0;\nlet weeklyPreparationCap = 0;\nlet monthlyCoverCap = 0;\nlet monthlySpoliageCap = 0;\nlet monthlyPreparationCap = 0;\nlet totalCoverCap = 0;\nlet totalSpoliageCap = 0;\nlet totalPreparationCap = 0;\nlet wastePerCoverCoverCap = 0;\nlet wastePerCoverSpoliageCap = 0;\nlet wastePerCoverPreparationCap = 0;\nlet wastePerSalesCoverCap = 0;\nlet wastePerSalesSpoliageCap = 0;\nlet wastePerSalesPreparationCap = 0;\nexport default function AddCapping(props) {\n  const {\n    allCappingValue\n  } = useContext(WasteCapContext);\n  const {\n    labels\n  } = useContext(WasteLabelsContext);\n  let [totalCappingValues, setTotalCappingValues] = useState([{\n    id: 0,\n    value: totalCoverCap,\n    label: \"totalCoverWastes\",\n    type: \"C\"\n  }, {\n    id: 1,\n    value: totalSpoliageCap,\n    label: \"totalSpoilageWastes\",\n    type: \"S\"\n  }, {\n    id: 2,\n    value: totalPreparationCap,\n    label: \"totalPreparationWastes\",\n    type: \"P\"\n  }]);\n  let [monthlyCappingValues, setMonthlyCappingValues] = useState([{\n    id: 0,\n    value: monthlyCoverCap,\n    label: \"monthlyCoverWastes\",\n    type: \"C\"\n  }, {\n    id: 1,\n    value: monthlySpoliageCap,\n    label: \"monthlySpoilageWastes\",\n    type: \"S\"\n  }, {\n    id: 2,\n    value: monthlyPreparationCap,\n    label: \"monthlyPreparationWastes\",\n    type: \"P\"\n  }]);\n  let [weeklyCappingValues, setWeeklyCappingValues] = useState([{\n    id: 0,\n    value: weeklyCoverCap,\n    label: \"weeklyCoverWastes\",\n    type: \"C\"\n  }, {\n    id: 1,\n    value: weeklySpoliageCap,\n    label: \"weeklySpoilageWastes\",\n    type: \"S\"\n  }, {\n    id: 2,\n    value: weeklyPreparationCap,\n    label: \"weeklyPreparationWastes\",\n    type: \"P\"\n  }]);\n  let [dailyCappingValues, setDailyCappingValues] = useState([{\n    id: 0,\n    value: dailyCoverWastesCap,\n    label: \"dailyCoverWastes\",\n    type: \"C\"\n  }, {\n    id: 1,\n    value: dailySpoliageWastesCap,\n    label: \"dailySpoilageWastes\",\n    type: \"S\"\n  }, {\n    id: 2,\n    value: dailyPeparationWastesCap,\n    label: \"dailyPreparationWastes\",\n    type: \"P\"\n  }]);\n  let [hourlyCappingValues, setHourlyCappingValues] = useState([{\n    id: 0,\n    value: hourlyCoverWastesCap,\n    label: \"hourlyCoverWastes\",\n    type: \"C\"\n  }, {\n    id: 1,\n    value: hourlySpoliageWastesCap,\n    label: \"hourlySpoilageWastes\",\n    type: \"S\"\n  }, {\n    id: 2,\n    value: hourlyPeparationWastesCap,\n    label: \"hourlyPreparationWastes\",\n    type: \"P\"\n  }]);\n  let [wastePerCoverCappingValues, setWastePerCoverCappingValues] = useState([{\n    id: 0,\n    value: wastePerCoverCoverCap,\n    label: \"wastePerCoverCoverWastes\",\n    type: \"C\"\n  }, {\n    id: 1,\n    value: wastePerCoverSpoliageCap,\n    label: \"wastePerCoverSpoilageWastes\",\n    type: \"S\"\n  }, {\n    id: 2,\n    value: wastePerCoverPreparationCap,\n    label: \"wastePerCoverPreparationWastes\",\n    type: \"P\"\n  }]);\n  let [wastePerSalesCappingValues, setWastePerSalesCappingValues] = useState([{\n    id: 0,\n    value: wastePerSalesCoverCap,\n    label: \"wastePerSalesCoverWastes\",\n    type: \"C\"\n  }, {\n    id: 1,\n    value: wastePerSalesSpoliageCap,\n    label: \"wastePerSalesSpoilageWastes\",\n    type: \"S\"\n  }, {\n    id: 2,\n    value: wastePerSalesPreparationCap,\n    label: \"wastePerSalesPreparationWastes\",\n    type: \"P\"\n  }]);\n  const [companyName, setCompanyName] = useState(\"\");\n  const [companyId, setCompanyId] = useState(\"\");\n  const [siteId, setSiteId] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  useEffect(() => {\n    setCompanyName(props.companyName);\n    setCompanyId(props.companyID);\n    setSiteId(props.selectedSiteValueID);\n\n    if (allCappingValue) {\n      // console.log(\"YES allCappingValue\", allCappingValue)\n      setWastePerCoverCappingValues(allCappingValue.wastePerCoverCappingValues);\n      setWastePerSalesCappingValues(allCappingValue.wastePerSalesCappingValues);\n      setTotalCappingValues(allCappingValue.totalCappingValues);\n      setMonthlyCappingValues(allCappingValue.monthlyCappingValues);\n      setWeeklyCappingValues(allCappingValue.weeklyCappingValues);\n      setDailyCappingValues(allCappingValue.dailyCappingValues);\n      setHourlyCappingValues(allCappingValue.hourlyCappingValues);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [props]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setIsSubmitting(true);\n    const data = {\n      totalCappingValues: totalCappingValues,\n      monthlyCappingValues: monthlyCappingValues,\n      weeklyCappingValues: weeklyCappingValues,\n      dailyCappingValues: dailyCappingValues,\n      hourlyCappingValues: hourlyCappingValues,\n      wastePerCoverCappingValues: wastePerCoverCappingValues,\n      wastePerSalesCappingValues: wastePerSalesCappingValues,\n      companyName: companyName,\n      companyId: companyId,\n      siteId: siteId\n    };\n    postCapping(data).then(() => {\n      props.callGetCappingAPI(companyId, companyName, siteId);\n      setIsSubmitting(false);\n    });\n  };\n\n  const handleFieldChange = event => {\n    const {\n      name,\n      value,\n      id\n    } = event.target;\n\n    switch (name) {\n      case \"totalCoverWastes\":\n        let num = roundedUpNumberAndTurnBackToString(value);\n        totalCappingValues[id].value = isNaN(num) ? 0 : num;\n        break;\n\n      case \"totalSpoilageWastes\":\n        let numTwo = roundedUpNumberAndTurnBackToString(value);\n        totalCappingValues[id].value = isNaN(numTwo) ? 0 : numTwo;\n        break;\n\n      case \"totalPreparationWastes\":\n        let numThree = roundedUpNumberAndTurnBackToString(value);\n        totalCappingValues[id].value = isNaN(numThree) ? 0 : numThree;\n        break;\n\n      case \"monthlyCoverWastes\":\n        let numFour = roundedUpNumberAndTurnBackToString(value);\n        monthlyCappingValues[id].value = isNaN(numFour) ? 0 : numFour;\n        break;\n\n      case \"monthlySpoilageWastes\":\n        let numFive = roundedUpNumberAndTurnBackToString(value);\n        monthlyCappingValues[id].value = isNaN(numFive) ? 0 : numFive;\n        break;\n\n      case \"monthlyPreparationWastes\":\n        let numSix = roundedUpNumberAndTurnBackToString(value);\n        monthlyCappingValues[id].value = isNaN(numSix) ? 0 : numSix;\n        break;\n\n      case \"weeklyCoverWastes\":\n        let numSeven = roundedUpNumberAndTurnBackToString(value);\n        weeklyCappingValues[id].value = isNaN(numSeven) ? 0 : numSeven;\n        break;\n\n      case \"weeklySpoilageWastes\":\n        let numEight = roundedUpNumberAndTurnBackToString(value);\n        weeklyCappingValues[id].value = isNaN(numEight) ? 0 : numEight;\n        break;\n\n      case \"weeklyPreparationWastes\":\n        let numNine = roundedUpNumberAndTurnBackToString(value);\n        weeklyCappingValues[id].value = isNaN(numNine) ? 0 : numNine;\n        break;\n\n      case \"dailyCoverWastes\":\n        let numTen = roundedUpNumberAndTurnBackToString(value);\n        dailyCappingValues[id].value = isNaN(numTen) ? 0 : numTen;\n        break;\n\n      case \"dailySpoilageWastes\":\n        let numEleven = roundedUpNumberAndTurnBackToString(value);\n        dailyCappingValues[id].value = isNaN(numEleven) ? 0 : numEleven;\n        break;\n\n      case \"dailyPreparationWastes\":\n        let numTwelve = roundedUpNumberAndTurnBackToString(value);\n        dailyCappingValues[id].value = isNaN(numTwelve) ? 0 : numTwelve;\n        break;\n\n      case \"hourlyCoverWastes\":\n        let numThirteen = roundedUpNumberAndTurnBackToString(value);\n        hourlyCappingValues[id].value = isNaN(numThirteen) ? 0 : numThirteen;\n        break;\n\n      case \"hourlySpoilageWastes\":\n        let numFourteen = roundedUpNumberAndTurnBackToString(value);\n        hourlyCappingValues[id].value = isNaN(numFourteen) ? 0 : numFourteen;\n        break;\n\n      case \"hourlyPreparationWastes\":\n        let numFifteen = roundedUpNumberAndTurnBackToString(value);\n        hourlyCappingValues[id].value = isNaN(numFifteen) ? 0 : numFifteen;\n        break;\n\n      case \"wastePerCoverCoverWastes\":\n        // let numSixteen = roundedUpNumberAndTurnBackToString(value);\n        wastePerCoverCappingValues[id].value = isNaN(value) ? 0 : parseFloat(value);\n        break;\n\n      case \"wastePerCoverSpoilageWastes\":\n        // let numSeventeen = roundedUpNumberAndTurnBackToString(value);\n        wastePerCoverCappingValues[id].value = isNaN(value) ? 0 : parseFloat(value);\n        break;\n\n      case \"wastePerCoverPreparationWastes\":\n        // let numEighteen = roundedUpNumberAndTurnBackToString(value);\n        wastePerCoverCappingValues[id].value = isNaN(value) ? 0 : parseFloat(value);\n        break;\n\n      case \"wastePerSalesCoverWastes\":\n        // let numNineteen = roundedUpNumberAndTurnBackToString(value);\n        wastePerSalesCappingValues[id].value = isNaN(value) ? 0 : parseFloat(value);\n        break;\n\n      case \"wastePerSalesSpoilageWastes\":\n        // let numTwenty = roundedUpNumberAndTurnBackToString(value);\n        wastePerSalesCappingValues[id].value = isNaN(value) ? 0 : parseFloat(value);\n        break;\n\n      case \"wastePerSalesPreparationWastes\":\n        // let numTwentyOne = roundedUpNumberAndTurnBackToString(value);\n        wastePerSalesCappingValues[id].value = isNaN(value) ? 0 : parseFloat(value);\n        break;\n\n      default:\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"capping-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 13\n    }\n  }, siteId.replace(/[^A-Za-z]+/g, '').toUpperCase(), \" Capping (in KG)\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    className: \"dashboard__tableContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    stickyHeader: true,\n    \"aria-label\": \"sticky table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    className: \"userInput__tableCell cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 33\n    }\n  }, \"Capping CSP\", \" \"), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"userInput__tableCell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 33\n    }\n  }, labels.titleLabels.c), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"userInput__tableCell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 33\n    }\n  }, labels.titleLabels.setCompanyId), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"userInput__tableCell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 33\n    }\n  }, labels.titleLabels.p))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"userInput__tableCell cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 33\n    }\n  }, \"Total Waste\"), totalCappingValues.map((data, i) => /*#__PURE__*/React.createElement(\"td\", {\n    className: \"userInput__tableCell userInput__input cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 33\n    }\n  }, data.type, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"capping__itemStyling applyMarginRightAndLeft inputBox\",\n    InputProps: {\n      disableUnderline: true\n    },\n    placeholder: data.value.toFixed(2),\n    type: \"number\",\n    id: i,\n    name: data.label,\n    onChange: handleFieldChange,\n    onKeyDown: evt => [\"e\", \"E\", \"+\", \"-\", \"NaN\"].includes(evt.key) && evt.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 37\n    }\n  })))), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"userInput__tableCell cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 33\n    }\n  }, \"Monthly Waste \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 101\n    }\n  }, \"(SMS Alerts Available)\"), \" \"), monthlyCappingValues.map((data, i) => /*#__PURE__*/React.createElement(\"td\", {\n    className: \"userInput__tableCell userInput__input cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 33\n    }\n  }, data.type, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"capping__itemStyling applyMarginRightAndLeft inputBox\",\n    placeholder: data.value.toFixed(2),\n    InputProps: {\n      disableUnderline: true\n    },\n    type: \"number\",\n    id: i,\n    name: data.label,\n    onChange: handleFieldChange,\n    onKeyDown: evt => [\"e\", \"E\", \"+\", \"-\"].includes(evt.key) && evt.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 37\n    }\n  })))), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"userInput__tableCell cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 33\n    }\n  }, \"Weekly Waste \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 100\n    }\n  }, \"(SMS Alerts Available)\")), weeklyCappingValues.map((data, i) => /*#__PURE__*/React.createElement(\"td\", {\n    className: \"userInput__tableCell userInput__input cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 33\n    }\n  }, data.type, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"capping__itemStyling inputBox\",\n    placeholder: data.value.toFixed(2),\n    InputProps: {\n      disableUnderline: true\n    },\n    type: \"number\",\n    id: i,\n    name: data.label,\n    onChange: handleFieldChange,\n    onKeyDown: evt => [\"e\", \"E\", \"+\", \"-\"].includes(evt.key) && evt.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 37\n    }\n  })))), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"userInput__tableCell cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 33\n    }\n  }, \"Daily Waste \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 99\n    }\n  }, \"(SMS Alerts Available)\")), dailyCappingValues.map((data, i) => /*#__PURE__*/React.createElement(\"td\", {\n    className: \"userInput__tableCell userInput__input cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 33\n    }\n  }, data.type, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"capping__itemStyling inputBox\",\n    placeholder: data.value.toFixed(2),\n    InputProps: {\n      disableUnderline: true\n    },\n    type: \"number\",\n    id: i,\n    name: data.label,\n    onChange: handleFieldChange,\n    onKeyDown: evt => [\"e\", \"E\", \"+\", \"-\"].includes(evt.key) && evt.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 37\n    }\n  })))), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"userInput__tableCell cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 33\n    }\n  }, \"Hourly Waste\"), hourlyCappingValues.map((data, i) => /*#__PURE__*/React.createElement(\"td\", {\n    className: \"userInput__tableCell userInput__input cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 33\n    }\n  }, data.type, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"capping__itemStyling inputBox\",\n    placeholder: data.value.toFixed(2),\n    InputProps: {\n      disableUnderline: true\n    },\n    type: \"number\",\n    id: i,\n    name: data.label,\n    onChange: handleFieldChange,\n    onKeyDown: evt => [\"e\", \"E\", \"+\", \"-\"].includes(evt.key) && evt.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 37\n    }\n  })))), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"userInput__tableCell cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 33\n    }\n  }, \"Waste Per Cover (SMS Alerts Available)\"), wastePerCoverCappingValues.map((data, i) => /*#__PURE__*/React.createElement(\"td\", {\n    className: \"userInput__tableCell userInput__input cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 33\n    }\n  }, data.type, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"capping__itemStyling applyMarginRightAndLeft inputBox\",\n    InputProps: {\n      disableUnderline: true\n    },\n    placeholder: data.value.toFixed(2) // type=\"number\"\n    ,\n    id: i,\n    name: data.label,\n    onChange: handleFieldChange,\n    onKeyDown: evt => [\"e\", \"E\", \"+\", \"-\", \"NaN\"].includes(evt.key) && evt.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 37\n    }\n  })))), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"userInput__tableCell cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 33\n    }\n  }, \"Waste Per Sales\"), wastePerSalesCappingValues.map((data, i) => /*#__PURE__*/React.createElement(\"td\", {\n    className: \"userInput__tableCell userInput__input cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 33\n    }\n  }, data.type, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"capping__itemStyling applyMarginRightAndLeft inputBox\",\n    InputProps: {\n      disableUnderline: true\n    },\n    placeholder: data.value.toFixed(2) // type=\"number\"\n    ,\n    id: i,\n    name: data.label,\n    onChange: handleFieldChange,\n    onKeyDown: evt => [\"e\", \"E\", \"+\", \"-\", \"NaN\"].includes(evt.key) && evt.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 37\n    }\n  }))))))), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"marginTop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 17\n    }\n  }, isSubmitting ? \"resubmit\" : \"Save Cap\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"capping-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"applyPurpleColor cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 17\n    }\n  }, \"Daily waste values\"), \" are checked against the daily capping values every day at \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"applyPurpleColor cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 153\n    }\n  }, \"3 pm\"), \".\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"applyPurpleColor cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 17\n    }\n  }, \"Weekly waste values\"), \" are checked against the weekly capping values every week at \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"applyPurpleColor cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 156\n    }\n  }, \"12 pm\"), \" on a Monday.\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"applyPurpleColor cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 17\n    }\n  }, \"Monthly waste values\"), \" are checked against the monthly capping values on the 1st of the Month at \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"applyPurpleColor cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 171\n    }\n  }, \"3 pm\"), \".\")));\n}","map":{"version":3,"sources":["/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/capping/add-capping.js"],"names":["React","useEffect","useState","useContext","TableHead","Table","TableContainer","TableBody","postCapping","roundedUpNumberAndTurnBackToString","WasteCapContext","WasteLabelsContext","hourlyCoverWastesCap","hourlySpoliageWastesCap","hourlyPeparationWastesCap","dailyCoverWastesCap","dailySpoliageWastesCap","dailyPeparationWastesCap","weeklyCoverCap","weeklySpoliageCap","weeklyPreparationCap","monthlyCoverCap","monthlySpoliageCap","monthlyPreparationCap","totalCoverCap","totalSpoliageCap","totalPreparationCap","wastePerCoverCoverCap","wastePerCoverSpoliageCap","wastePerCoverPreparationCap","wastePerSalesCoverCap","wastePerSalesSpoliageCap","wastePerSalesPreparationCap","AddCapping","props","allCappingValue","labels","totalCappingValues","setTotalCappingValues","id","value","label","type","monthlyCappingValues","setMonthlyCappingValues","weeklyCappingValues","setWeeklyCappingValues","dailyCappingValues","setDailyCappingValues","hourlyCappingValues","setHourlyCappingValues","wastePerCoverCappingValues","setWastePerCoverCappingValues","wastePerSalesCappingValues","setWastePerSalesCappingValues","companyName","setCompanyName","companyId","setCompanyId","siteId","setSiteId","isSubmitting","setIsSubmitting","companyID","selectedSiteValueID","handleSubmit","event","preventDefault","data","then","callGetCappingAPI","handleFieldChange","name","target","num","isNaN","numTwo","numThree","numFour","numFive","numSix","numSeven","numEight","numNine","numTen","numEleven","numTwelve","numThirteen","numFourteen","numFifteen","parseFloat","replace","toUpperCase","titleLabels","c","p","map","i","disableUnderline","toFixed","evt","includes","key"],"mappings":"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","sourcesContent":["import React, {  useEffect, useState, useContext } from \"react\";\nimport { TableHead, Table, TableContainer, TableBody } from \"@material-ui/core\";\n// import TextField from \"@material-ui/core/TextField\";\nimport { postCapping } from \"../../../../api.js\";\n\nimport { roundedUpNumberAndTurnBackToString } from \"../../../../utilities\";\n\nimport { WasteCapContext } from \"../../../../contexts/waste-cap-context\";\n\nimport { WasteLabelsContext } from \"../../../../contexts/waste-labels-context\";\n\nlet hourlyCoverWastesCap = 0\nlet hourlySpoliageWastesCap = 0\nlet hourlyPeparationWastesCap = 0\n\nlet dailyCoverWastesCap = 0\nlet dailySpoliageWastesCap = 0\nlet dailyPeparationWastesCap = 0\n\nlet weeklyCoverCap = 0\nlet weeklySpoliageCap = 0\nlet weeklyPreparationCap = 0\n\nlet monthlyCoverCap = 0\nlet monthlySpoliageCap = 0\nlet monthlyPreparationCap = 0\n\nlet totalCoverCap = 0\nlet totalSpoliageCap = 0\nlet totalPreparationCap = 0\n\nlet wastePerCoverCoverCap = 0\nlet wastePerCoverSpoliageCap = 0\nlet wastePerCoverPreparationCap = 0\n\nlet wastePerSalesCoverCap = 0\nlet wastePerSalesSpoliageCap = 0\nlet wastePerSalesPreparationCap = 0\n\nexport default function AddCapping(props) {\n\n    const {\n        allCappingValue\n    } = useContext(WasteCapContext);\n\n    const {\n        labels\n       } = useContext(WasteLabelsContext);\n\n    let [ totalCappingValues, setTotalCappingValues] = useState([\n            {\n              id: 0,\n              value: totalCoverCap,\n              label: \"totalCoverWastes\",\n              type: \"C\"\n            },\n            {\n              id: 1,\n              value: totalSpoliageCap,\n              label: \"totalSpoilageWastes\",\n              type: \"S\"\n            },\n            {\n              id: 2,\n              value: totalPreparationCap,\n              label: \"totalPreparationWastes\",\n              type: \"P\"\n            }\n          ]\n        )\n\n    let [ monthlyCappingValues, setMonthlyCappingValues] = useState([\n            {\n                id: 0,\n                value: monthlyCoverCap,\n                label: \"monthlyCoverWastes\",\n                type: \"C\"\n            },\n            {\n                id: 1,\n                value: monthlySpoliageCap,\n                label: \"monthlySpoilageWastes\",\n                type: \"S\"\n            },\n            {\n                id: 2,\n                value: monthlyPreparationCap,\n                label: \"monthlyPreparationWastes\",\n                type: \"P\"\n            }\n        ]\n    )\n\n    let [ weeklyCappingValues, setWeeklyCappingValues] = useState([\n        {\n            id: 0,\n            value: weeklyCoverCap,\n            label: \"weeklyCoverWastes\",\n            type: \"C\"\n        },\n        {\n            id: 1,\n            value: weeklySpoliageCap,\n            label: \"weeklySpoilageWastes\",\n            type: \"S\"\n        },\n        {\n            id: 2,\n            value: weeklyPreparationCap,\n            label: \"weeklyPreparationWastes\",\n            type: \"P\"\n        }\n    ]\n    )\n\n    let [ dailyCappingValues, setDailyCappingValues] = useState([\n        {\n            id: 0,\n            value: dailyCoverWastesCap,\n            label: \"dailyCoverWastes\",\n            type: \"C\"\n        },\n        {\n            id: 1,\n            value: dailySpoliageWastesCap,\n            label: \"dailySpoilageWastes\",\n            type: \"S\"\n        },\n        {\n            id: 2,\n            value: dailyPeparationWastesCap,\n            label: \"dailyPreparationWastes\",\n            type: \"P\"\n        },\n    ]\n    )\n\n    let [ hourlyCappingValues, setHourlyCappingValues] = useState([\n        {\n            id: 0,\n            value: hourlyCoverWastesCap,\n            label: \"hourlyCoverWastes\",\n            type: \"C\"\n        },\n        {\n            id: 1,\n            value: hourlySpoliageWastesCap,\n            label: \"hourlySpoilageWastes\",\n            type: \"S\"\n        },\n        {\n            id: 2,\n            value: hourlyPeparationWastesCap,\n            label: \"hourlyPreparationWastes\",\n            type: \"P\"\n        }\n    ]\n    )\n\n    let [ wastePerCoverCappingValues, setWastePerCoverCappingValues] = useState([\n        {\n            id: 0,\n            value: wastePerCoverCoverCap,\n            label: \"wastePerCoverCoverWastes\",\n            type: \"C\"\n        },\n        {\n            id: 1,\n            value: wastePerCoverSpoliageCap,\n            label: \"wastePerCoverSpoilageWastes\",\n            type: \"S\"\n        },\n        {\n            id: 2,\n            value: wastePerCoverPreparationCap,\n            label: \"wastePerCoverPreparationWastes\",\n            type: \"P\"\n        }\n    ]\n    )\n\n    let [ wastePerSalesCappingValues, setWastePerSalesCappingValues] = useState([\n        {\n            id: 0,\n            value: wastePerSalesCoverCap,\n            label: \"wastePerSalesCoverWastes\",\n            type: \"C\"\n        },\n        {\n            id: 1,\n            value: wastePerSalesSpoliageCap,\n            label: \"wastePerSalesSpoilageWastes\",\n            type: \"S\"\n        },\n        {\n            id: 2,\n            value: wastePerSalesPreparationCap,\n            label: \"wastePerSalesPreparationWastes\",\n            type: \"P\"\n        }\n    ]\n    )\n\n    const [ companyName, setCompanyName ] = useState(\"\")\n    const [ companyId, setCompanyId ] = useState(\"\")\n    const [ siteId, setSiteId ] = useState(\"\")\n    const [isSubmitting, setIsSubmitting] = useState(false);\n\n    useEffect(() => {\n        setCompanyName(props.companyName)\n        setCompanyId(props.companyID)\n        setSiteId(props.selectedSiteValueID)\n\n        if (allCappingValue) {\n            // console.log(\"YES allCappingValue\", allCappingValue)\n\n            setWastePerCoverCappingValues(allCappingValue.wastePerCoverCappingValues)\n            setWastePerSalesCappingValues(allCappingValue.wastePerSalesCappingValues)\n\n            setTotalCappingValues(allCappingValue.totalCappingValues)\n            setMonthlyCappingValues(allCappingValue.monthlyCappingValues)\n            setWeeklyCappingValues(allCappingValue.weeklyCappingValues)\n            setDailyCappingValues(allCappingValue.dailyCappingValues)\n            setHourlyCappingValues(allCappingValue.hourlyCappingValues)\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props])\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        setIsSubmitting(true)\n\n        const data = {\n            totalCappingValues: totalCappingValues,\n            monthlyCappingValues: monthlyCappingValues,\n            weeklyCappingValues: weeklyCappingValues,\n            dailyCappingValues: dailyCappingValues,\n            hourlyCappingValues: hourlyCappingValues,\n            wastePerCoverCappingValues: wastePerCoverCappingValues,\n            wastePerSalesCappingValues: wastePerSalesCappingValues,\n            companyName: companyName,\n            companyId: companyId,\n            siteId: siteId\n        }\n\n        postCapping(data).then(() => {\n            props.callGetCappingAPI(companyId, companyName, siteId)\n            setIsSubmitting(false)\n        })\n    };\n\n    const handleFieldChange = (event) => {\n        const { name, value, id } = event.target;\n        switch(name) {\n            case \"totalCoverWastes\":\n                let num = roundedUpNumberAndTurnBackToString(value);\n                totalCappingValues[id].value = isNaN(num) ? 0 : num;\n              break;\n            case \"totalSpoilageWastes\":\n                let numTwo = roundedUpNumberAndTurnBackToString(value);\n                totalCappingValues[id].value = isNaN(numTwo) ? 0 : numTwo;\n              break;\n            case \"totalPreparationWastes\":\n                let numThree = roundedUpNumberAndTurnBackToString(value);\n                totalCappingValues[id].value = isNaN(numThree) ? 0 : numThree;\n              break;\n\n            case \"monthlyCoverWastes\":\n                let numFour = roundedUpNumberAndTurnBackToString(value);\n                monthlyCappingValues[id].value = isNaN(numFour) ? 0 : numFour;\n              break;\n            case \"monthlySpoilageWastes\":\n                let numFive = roundedUpNumberAndTurnBackToString(value);\n                monthlyCappingValues[id].value = isNaN(numFive) ? 0 : numFive;\n              break;\n            case \"monthlyPreparationWastes\":\n                let numSix = roundedUpNumberAndTurnBackToString(value);\n                monthlyCappingValues[id].value = isNaN(numSix) ? 0 : numSix;\n              break;\n\n            case \"weeklyCoverWastes\":\n                let numSeven = roundedUpNumberAndTurnBackToString(value);\n                weeklyCappingValues[id].value = isNaN(numSeven) ? 0 : numSeven;\n              break;\n            case \"weeklySpoilageWastes\":\n                let numEight = roundedUpNumberAndTurnBackToString(value);\n                weeklyCappingValues[id].value = isNaN(numEight) ? 0 : numEight;\n              break;\n            case \"weeklyPreparationWastes\":\n                let numNine = roundedUpNumberAndTurnBackToString(value);\n                weeklyCappingValues[id].value = isNaN(numNine) ? 0 : numNine;\n              break;\n\n            case \"dailyCoverWastes\":\n                let numTen = roundedUpNumberAndTurnBackToString(value);\n                dailyCappingValues[id].value = isNaN(numTen) ? 0 : numTen;\n              break;\n            case \"dailySpoilageWastes\":\n                let numEleven = roundedUpNumberAndTurnBackToString(value);\n                dailyCappingValues[id].value = isNaN(numEleven) ? 0 : numEleven;\n              break;\n            case \"dailyPreparationWastes\":\n                let numTwelve = roundedUpNumberAndTurnBackToString(value);\n                dailyCappingValues[id].value = isNaN(numTwelve) ? 0 : numTwelve;\n              break;\n\n            case \"hourlyCoverWastes\":\n                let numThirteen = roundedUpNumberAndTurnBackToString(value);\n                hourlyCappingValues[id].value = isNaN(numThirteen) ? 0 : numThirteen;\n              break;\n            case \"hourlySpoilageWastes\":\n                let numFourteen = roundedUpNumberAndTurnBackToString(value);\n                hourlyCappingValues[id].value = isNaN(numFourteen) ? 0 : numFourteen;\n              break;\n            case \"hourlyPreparationWastes\":\n                let numFifteen = roundedUpNumberAndTurnBackToString(value);\n                hourlyCappingValues[id].value = isNaN(numFifteen) ? 0 : numFifteen;\n              break;\n\n            case \"wastePerCoverCoverWastes\":\n                // let numSixteen = roundedUpNumberAndTurnBackToString(value);\n                wastePerCoverCappingValues[id].value = isNaN(value) ? 0 : parseFloat(value);\n                break;\n            case \"wastePerCoverSpoilageWastes\":\n                // let numSeventeen = roundedUpNumberAndTurnBackToString(value);\n                wastePerCoverCappingValues[id].value = isNaN(value) ? 0 : parseFloat(value);\n                break;\n            case \"wastePerCoverPreparationWastes\":\n                // let numEighteen = roundedUpNumberAndTurnBackToString(value);\n                wastePerCoverCappingValues[id].value = isNaN(value) ? 0 : parseFloat(value);\n                break;\n\n            case \"wastePerSalesCoverWastes\":\n                // let numNineteen = roundedUpNumberAndTurnBackToString(value);\n                wastePerSalesCappingValues[id].value = isNaN(value) ? 0 : parseFloat(value);\n                break;\n            case \"wastePerSalesSpoilageWastes\":\n                // let numTwenty = roundedUpNumberAndTurnBackToString(value);\n                wastePerSalesCappingValues[id].value = isNaN(value) ? 0 : parseFloat(value);\n                break;\n            case \"wastePerSalesPreparationWastes\":\n                // let numTwentyOne = roundedUpNumberAndTurnBackToString(value);\n                wastePerSalesCappingValues[id].value = isNaN(value) ? 0 : parseFloat(value);\n                break;\n\n            default:\n        }\n    }\n\n    return (\n        <>\n        <div\n            className=\"capping-wrapper\"\n        >\n            <h2>{siteId.replace(/[^A-Za-z]+/g, '').toUpperCase()} Capping (in KG)</h2>\n            <form onSubmit={handleSubmit}>\n                <TableContainer className=\"dashboard__tableContainer\">\n\n                    <Table stickyHeader aria-label=\"sticky table\">\n\n                        <TableHead>\n                            <tr>\n                                <th className=\"userInput__tableCell cooperHewittBold\">\n                                Capping CSP{\" \"}\n                                </th>\n                                <th className=\"userInput__tableCell\">\n                                {/* <b className=\"applyPurpleColor\">C</b>over Waste{\" \"} */}\n                                {labels.titleLabels.c}\n                                </th>\n                                <th className=\"userInput__tableCell\">\n                                {/* <b className=\"applyPurpleColor\">S</b>poilage Waste */}\n                                {labels.titleLabels.setCompanyId}\n                                </th>\n                                <th className=\"userInput__tableCell\">\n                                {/* <b className=\"applyPurpleColor\">P</b>reparation{\" \"} Waste */}\n                                {labels.titleLabels.p}\n                                </th>\n                            </tr>\n                        </TableHead>\n\n                        <TableBody>\n                            <tr>\n                                <td className=\"userInput__tableCell cooperHewittBold\">Total Waste</td>\n                                {totalCappingValues.map((data, i) => (\n                                <td className=\"userInput__tableCell userInput__input cooperHewittBold\">\n                                    {data.type}\n                                    <input\n                                        className=\"capping__itemStyling applyMarginRightAndLeft inputBox\"\n                                        InputProps={{ disableUnderline: true }}\n                                        placeholder={(data.value).toFixed(2)}\n                                        type=\"number\"\n                                        id={i}\n                                        name={data.label}\n                                        onChange={handleFieldChange}\n                                        onKeyDown={(evt) => [\"e\", \"E\", \"+\", \"-\", \"NaN\"].includes(evt.key) && evt.preventDefault()}\n                                    ></input>\n                                </td>\n                                ))}\n                            </tr>\n\n                            <tr>\n                                <td className=\"userInput__tableCell cooperHewittBold\">Monthly Waste <span>(SMS Alerts Available)</span> </td>\n                                {monthlyCappingValues.map((data, i) => (\n                                <td className=\"userInput__tableCell userInput__input cooperHewittBold\">\n                                    {data.type}\n                                    <input\n                                        className=\"capping__itemStyling applyMarginRightAndLeft inputBox\"\n                                        placeholder={(data.value).toFixed(2)}\n                                        InputProps={{ disableUnderline: true }}\n                                        type=\"number\"\n                                        id={i}\n                                        name={data.label}\n                                        onChange={handleFieldChange}\n                                        onKeyDown={(evt) => [\"e\", \"E\", \"+\", \"-\"].includes(evt.key) && evt.preventDefault()}\n                                    ></input>\n                                </td>\n                                ))}\n                            </tr>\n\n                            <tr>\n                                <td className=\"userInput__tableCell cooperHewittBold\">Weekly Waste <span>(SMS Alerts Available)</span></td>\n                                {weeklyCappingValues.map((data, i) => (\n                                <td className=\"userInput__tableCell userInput__input cooperHewittBold\">\n                                    {data.type}\n                                    <input\n                                        className=\"capping__itemStyling inputBox\"\n                                        placeholder={(data.value).toFixed(2)}\n                                        InputProps={{ disableUnderline: true }}\n                                        type=\"number\"\n                                        id={i}\n                                        name={data.label}\n                                        onChange={handleFieldChange}\n                                        onKeyDown={(evt) => [\"e\", \"E\", \"+\", \"-\"].includes(evt.key) && evt.preventDefault()}\n                                    ></input>\n                                </td>\n                                ))}\n                            </tr>\n\n                            <tr>\n                                <td className=\"userInput__tableCell cooperHewittBold\">Daily Waste <span>(SMS Alerts Available)</span></td>\n                                {dailyCappingValues.map((data, i) => (\n                                <td className=\"userInput__tableCell userInput__input cooperHewittBold\">\n                                    {data.type}\n                                    <input\n                                        className=\"capping__itemStyling inputBox\"\n                                        placeholder={(data.value).toFixed(2)}\n                                        InputProps={{ disableUnderline: true }}\n                                        type=\"number\"\n                                        id={i}\n                                        name={data.label}\n                                        onChange={handleFieldChange}\n                                        onKeyDown={(evt) => [\"e\", \"E\", \"+\", \"-\"].includes(evt.key) && evt.preventDefault()}\n                                    ></input>\n                                </td>\n                                ))}\n                            </tr>\n\n                            <tr>\n                                <td className=\"userInput__tableCell cooperHewittBold\">Hourly Waste</td>\n                                {hourlyCappingValues.map((data, i) => (\n                                <td className=\"userInput__tableCell userInput__input cooperHewittBold\">\n                                    {data.type}\n                                    <input\n                                        className=\"capping__itemStyling inputBox\"\n                                        placeholder={(data.value).toFixed(2)}\n                                        InputProps={{ disableUnderline: true }}\n                                        type=\"number\"\n                                        id={i}\n                                        name={data.label}\n                                        onChange={handleFieldChange}\n                                        onKeyDown={(evt) => [\"e\", \"E\", \"+\", \"-\"].includes(evt.key) && evt.preventDefault()}\n                                    ></input>\n                                </td>\n                                ))}\n                            </tr>\n\n                            <tr>\n                                <td className=\"userInput__tableCell cooperHewittBold\">Waste Per Cover (SMS Alerts Available)</td>\n                                {wastePerCoverCappingValues.map((data, i) => (\n                                <td className=\"userInput__tableCell userInput__input cooperHewittBold\">\n                                    {data.type}\n                                    <input\n                                        className=\"capping__itemStyling applyMarginRightAndLeft inputBox\"\n                                        InputProps={{ disableUnderline: true }}\n                                        placeholder={(data.value).toFixed(2)}\n                                        // type=\"number\"\n                                        id={i}\n                                        name={data.label}\n                                        onChange={handleFieldChange}\n                                        onKeyDown={(evt) => [\"e\", \"E\", \"+\", \"-\", \"NaN\"].includes(evt.key) && evt.preventDefault()}\n                                    ></input>\n                                </td>\n                                ))}\n                            </tr>\n\n                            <tr>\n                                <td className=\"userInput__tableCell cooperHewittBold\">Waste Per Sales</td>\n                                {wastePerSalesCappingValues.map((data, i) => (\n                                <td className=\"userInput__tableCell userInput__input cooperHewittBold\">\n                                    {data.type}\n                                    <input\n                                        className=\"capping__itemStyling applyMarginRightAndLeft inputBox\"\n                                        InputProps={{ disableUnderline: true }}\n                                        placeholder={(data.value).toFixed(2)}\n                                        // type=\"number\"\n                                        id={i}\n                                        name={data.label}\n                                        onChange={handleFieldChange}\n                                        onKeyDown={(evt) => [\"e\", \"E\", \"+\", \"-\", \"NaN\"].includes(evt.key) && evt.preventDefault()}\n                                    ></input>\n                                </td>\n                                ))}\n                            </tr>\n\n                        </TableBody>\n\n                    </Table>\n\n                </TableContainer>\n\n                <button className=\"marginTop\">\n                    {isSubmitting ? \"resubmit\" : \"Save Cap\"}\n                </button>\n\n            </form>\n        </div>\n\n        <div className=\"capping-info\">\n           <div>\n                <span className=\"applyPurpleColor cooperHewittBold\">Daily waste values</span> are checked against the daily capping values every day at <span className=\"applyPurpleColor cooperHewittBold\">3 pm</span>.\n           </div>\n           <div>\n                <span className=\"applyPurpleColor cooperHewittBold\">Weekly waste values</span> are checked against the weekly capping values every week at <span className=\"applyPurpleColor cooperHewittBold\">12 pm</span> on a Monday.\n           </div>\n           <div>\n                <span className=\"applyPurpleColor cooperHewittBold\">Monthly waste values</span> are checked against the monthly capping values on the 1st of the Month at <span className=\"applyPurpleColor cooperHewittBold\">3 pm</span>.\n           </div>\n        </div>\n\n        </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}