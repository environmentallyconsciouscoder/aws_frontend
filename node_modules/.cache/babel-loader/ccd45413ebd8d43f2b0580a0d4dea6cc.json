{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/live-feeds/live-feed-graph.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { AccordionHeading, AccordionBody } from \"../accordion\";\nimport { setItemInLocalStorage, formatSiteName } from \"../../../../utilities.js\";\nimport Subheadings from \"../reuseable-components/labels/subheadings\";\nimport SlackChart from \"../reuseable-components/charts/slack-chart/slack-chart\";\nimport { Bar } from \"react-chartjs-2\";\nimport { DailySalesVsWasteContext } from \"../../../../contexts/daily-sales-vs-waste-context\";\nimport { EventProductionWasteContext } from \"../../../../contexts/event-production-waste-context\";\nimport { ProductionPreparationContext } from \"../../../../contexts/production-preparation-context\";\nimport Pagination from \"./../reuseable-components/pagination/pagination.js\";\nimport { WasteLabelsContext } from \"../../../../contexts/waste-labels-context\";\nimport { LiveFeedContext } from \"../../../../contexts/live-feed-context\";\nexport default function DailySalesVsWasteReport(props) {\n  const {\n    labels\n  } = useContext(WasteLabelsContext);\n  const {\n    // introduction,\n    // surveyOne,\n    // surveyTwo,\n    // surveyThree,\n    // surveyFour,\n    dataForGraph,\n    maxValue,\n    numberOfWeeks,\n    questions,\n    sampleTotal,\n    weekCommence,\n    allWeeksOfTheYear\n  } = useContext(LiveFeedContext);\n  const {\n    siteName,\n    companyName,\n    id,\n    dataFromDB\n  } = useContext(DailySalesVsWasteContext);\n  const {\n    chartData,\n    index,\n    filterDataByDate,\n    callProductionPreparationInputsFunc,\n    prodPrepInputsData\n  } = useContext(EventProductionWasteContext);\n  const {\n    // numberOfWeeks,\n    weeklyNumbers,\n    weeklyStartDateArry,\n    paginationIndex\n  } = useContext(ProductionPreparationContext); // const [dateLabels, setDateLabels] = useState([]);\n  // const [formatedDate, setFormatedDate] = useState([]);\n  // const [showDate, setShowDate] = useState(true);\n\n  const [weeksCommencing, setWeeksCommencing] = useState([]); // const [dailyCoverWaste, setDailyCoverWaste] = useState([0,0,0,0,0,0,0]);\n  // const [dailyPrepWaste, setDailyPrepWaste] = useState([0,0,0,0,0,0,0]);\n  // const [dailySpoilageWaste, setDailySpoilageWaste] = useState([0,0,0,0,0,0,0]);\n  // const [dailyTotalWaste, setDailyTotalWaste] = useState([0,0,0,0,0,0,0]);\n\n  let graphHeight = 500;\n  let graphWidth = 1100;\n  useEffect(() => {\n    console.log(\"allWeeksOfTheYear\", allWeeksOfTheYear); // setDateLabels(props.weeklyDailyRange)\n    // if (props.weeklyDailyLabels) {\n    //   setFormatedDate(props.weeklyDailyLabels)\n    // }\n    // if (prodPrepInputsData.dailyCoverWasteArrayFormated !== undefined) {\n    //   setDailyCoverWaste(prodPrepInputsData.dailyCoverWasteArrayFormated)\n    //   setDailyPrepWaste(prodPrepInputsData.dailyPrepWasteArrayFormated)\n    //   setDailySpoilageWaste(prodPrepInputsData.dailySpoilageWasteArrayFormated)\n    //   setDailyTotalWaste(prodPrepInputsData.totalDailyWaste)\n    // }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [siteName, companyName, id, props, chartData, numberOfWeeks]);\n\n  const changePageForWeeks = ({\n    selected\n  }) => {\n    // const date = \"w/c\" + \" \" + weeklyStartDateArry[selected]\n    // setWeeksCommencing(date)\n    console.log(\"selected\", selected);\n    console.log(\"selected\", allWeeksOfTheYear[selected]); // console.log(\"weeklyNumbers\",weeklyNumbers);\n    // if (id && companyName && siteName && weeklyNumbers[selected]) {\n    //   callProductionPreparationInputsFunc(id ,companyName ,siteName, weeklyNumbers[selected]);\n    // }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dailyWasteChart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"originalTheme__reportBackgroundColor addPaddingOfHalveRem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Subheadings, {\n    site: formatSiteName(siteName),\n    title: \"Live Green Feeds - Survey Weekly\",\n    date: weekCommence,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyBlueTuckGreen cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, \"Survey Results\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyCooperHewittBold\",\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      justifyContent: \"space-evenly\",\n      color: \"#0f808c\",\n      fontSize: \"12px\",\n      fontWeight: \"bold\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, questions.map((data, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyPurpleColor\",\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, data))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"applyBlueTuckGreen cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  }, \"Sample Number:\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyCooperHewittBold\",\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      justifyContent: \"space-evenly\",\n      color: \"#0f808c\",\n      fontSize: \"12px\",\n      fontWeight: \"bold\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, sampleTotal.map((data, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyPurpleColor\",\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }\n  }, data))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      flexDirection: \"row\",\n      justifyContent: \"space-between\",\n      display: \"flex\",\n      padding: \"10px\",\n      fontSize: \"10px\",\n      color: \"rgb(140, 112, 140)\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: [1, 2, 3, 4, \"\", 1, 2, 3, 4, \"\", 1, 2, 3, 4, \"\", 1, 2, 3, 4],\n      // wasteSteamsValue: wasteStreamValue,\n      // inputData: inputsData,\n      datasets: [{\n        // label: [\"1,2,3,4\", null,\"1,2,3,4\", null,\"1,2,3,4\", null,\"1,2,3,4\"],\n        // data: [2,2,2,2, \"\",1,2,3,4, \"\",1,2,3,4, \"\",1,2,3,4],\n        data: dataForGraph,\n        backgroundColor: \"rgb(178, 191, 80)\",\n        minBarLength: 0.3,\n        categoryPercentage: 1.0,\n        barPercentage: 0.5\n      }]\n    },\n    width: graphWidth,\n    height: graphHeight,\n    options: {\n      responsive: true,\n      maintainAspectRatio: true,\n      layout: {\n        padding: {\n          left: 25,\n          right: 25,\n          top: 10,\n          bottom: 10\n        }\n      },\n      scales: {\n        xAxes: [{\n          display: true,\n          gridLines: {\n            display: false\n          },\n          ticks: {\n            autoSkip: false,\n            fontSize: 7\n          }\n        }],\n        yAxes: [{\n          gridLines: {\n            display: false\n          },\n          ticks: {\n            maxTicksLimit: 4,\n            display: false,\n            beginAtZero: true,\n            max: maxValue + 5\n          }\n        }]\n      },\n      plugins: {\n        datalabels: {\n          display: true,\n          color: \"rgb(47, 64, 30)\",\n          anchor: \"end\",\n          align: \"end\",\n          clamp: true,\n          font: {\n            size: 10,\n            weight: 900\n          },\n          offset: 4\n        }\n      },\n      tooltips: {// enabled: true,\n        //   callbacks: {\n        //     title: function(tooltipItems, data) {\n        //       return '';\n        //     },\n        //     label: function(tooltipItem, data) {\n        //       let inputData = data.inputData[tooltipItem.index];\n        //       let wasteSteamValue = isInt(data.wasteSteamsValue[tooltipItem.index]) ? data.wasteSteamsValue[tooltipItem.index] :  keepTwoDecimalPlacesWithoutRoundingUp(data.wasteSteamsValue[tooltipItem.index])\n        //       const val = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n        //       return val + \"(\" +  wasteSteamValue + \"/\" + inputData + \")\"\n        //     }\n        //   }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__message cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 17\n    }\n  }, \"1 = Great and 4 = Bad\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyBlueTuckGreen cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"applyBlueTuckGreen cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 15\n    }\n  }, \"Questions:\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      padding: \"2rem\",\n      fontSize: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Pagination, {\n    index: paginationIndex,\n    onPageChange: changePageForWeeks,\n    pageCount: numberOfWeeks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 15\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/live-feeds/live-feed-graph.js"],"names":["React","useState","useContext","useEffect","AccordionHeading","AccordionBody","setItemInLocalStorage","formatSiteName","Subheadings","SlackChart","Bar","DailySalesVsWasteContext","EventProductionWasteContext","ProductionPreparationContext","Pagination","WasteLabelsContext","LiveFeedContext","DailySalesVsWasteReport","props","labels","dataForGraph","maxValue","numberOfWeeks","questions","sampleTotal","weekCommence","allWeeksOfTheYear","siteName","companyName","id","dataFromDB","chartData","index","filterDataByDate","callProductionPreparationInputsFunc","prodPrepInputsData","weeklyNumbers","weeklyStartDateArry","paginationIndex","weeksCommencing","setWeeksCommencing","graphHeight","graphWidth","console","log","changePageForWeeks","selected","display","flexDirection","justifyContent","color","fontSize","fontWeight","map","data","i","padding","datasets","backgroundColor","minBarLength","categoryPercentage","barPercentage","responsive","maintainAspectRatio","layout","left","right","top","bottom","scales","xAxes","gridLines","ticks","autoSkip","yAxes","maxTicksLimit","beginAtZero","max","plugins","datalabels","anchor","align","clamp","font","size","weight","offset","tooltips"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport { AccordionHeading, AccordionBody } from \"../accordion\";\nimport { setItemInLocalStorage, formatSiteName } from \"../../../../utilities.js\";\n\nimport Subheadings from \"../reuseable-components/labels/subheadings\"\nimport SlackChart from \"../reuseable-components/charts/slack-chart/slack-chart\"\n\nimport { Bar } from \"react-chartjs-2\";\nimport { DailySalesVsWasteContext } from \"../../../../contexts/daily-sales-vs-waste-context\";\nimport { EventProductionWasteContext } from \"../../../../contexts/event-production-waste-context\";\nimport { ProductionPreparationContext } from \"../../../../contexts/production-preparation-context\";\n\nimport Pagination from \"./../reuseable-components/pagination/pagination.js\"\n\nimport { WasteLabelsContext } from \"../../../../contexts/waste-labels-context\";\n\nimport { LiveFeedContext } from \"../../../../contexts/live-feed-context\";\n\nexport default function DailySalesVsWasteReport(props) {\n\n  const {\n    labels\n  } = useContext(WasteLabelsContext);\n\n  const {\n    // introduction,\n    // surveyOne,\n    // surveyTwo,\n    // surveyThree,\n    // surveyFour,\n\n    dataForGraph,\n    maxValue,\n    numberOfWeeks,\n    questions,\n    sampleTotal,\n    weekCommence,\n    allWeeksOfTheYear\n  } = useContext(LiveFeedContext);\n\n  const {\n    siteName,\n    companyName,\n    id,\n    dataFromDB,\n   } = useContext(DailySalesVsWasteContext);\n\n   const {\n    chartData,\n    index,\n    filterDataByDate,\n    callProductionPreparationInputsFunc,\n    prodPrepInputsData\n   } = useContext(EventProductionWasteContext);\n\n   const {\n    // numberOfWeeks,\n    weeklyNumbers,\n    weeklyStartDateArry,\n    paginationIndex\n   } = useContext(ProductionPreparationContext);\n\n  // const [dateLabels, setDateLabels] = useState([]);\n  // const [formatedDate, setFormatedDate] = useState([]);\n  // const [showDate, setShowDate] = useState(true);\n  const [weeksCommencing, setWeeksCommencing] = useState([]);\n\n  // const [dailyCoverWaste, setDailyCoverWaste] = useState([0,0,0,0,0,0,0]);\n  // const [dailyPrepWaste, setDailyPrepWaste] = useState([0,0,0,0,0,0,0]);\n  // const [dailySpoilageWaste, setDailySpoilageWaste] = useState([0,0,0,0,0,0,0]);\n  // const [dailyTotalWaste, setDailyTotalWaste] = useState([0,0,0,0,0,0,0]);\n\n  let graphHeight = 500;\n  let graphWidth = 1100;\n\n  useEffect(() => {\n\n    console.log(\"allWeeksOfTheYear\",allWeeksOfTheYear);\n\n    // setDateLabels(props.weeklyDailyRange)\n\n    // if (props.weeklyDailyLabels) {\n    //   setFormatedDate(props.weeklyDailyLabels)\n    // }\n\n    // if (prodPrepInputsData.dailyCoverWasteArrayFormated !== undefined) {\n    //   setDailyCoverWaste(prodPrepInputsData.dailyCoverWasteArrayFormated)\n    //   setDailyPrepWaste(prodPrepInputsData.dailyPrepWasteArrayFormated)\n    //   setDailySpoilageWaste(prodPrepInputsData.dailySpoilageWasteArrayFormated)\n    //   setDailyTotalWaste(prodPrepInputsData.totalDailyWaste)\n    // }\n\n   // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[siteName, companyName, id, props, chartData,numberOfWeeks])\n\n  const changePageForWeeks = ({ selected }) => {\n\n    // const date = \"w/c\" + \" \" + weeklyStartDateArry[selected]\n    // setWeeksCommencing(date)\n\n    console.log(\"selected\",selected);\n    console.log(\"selected\",allWeeksOfTheYear[selected]);\n\n    // console.log(\"weeklyNumbers\",weeklyNumbers);\n    // if (id && companyName && siteName && weeklyNumbers[selected]) {\n    //   callProductionPreparationInputsFunc(id ,companyName ,siteName, weeklyNumbers[selected]);\n    // }\n};\n\n  return (\n    <div className= \"dailyWasteChart\">\n        <div className=\"originalTheme__reportBackgroundColor addPaddingOfHalveRem\">\n            <Subheadings\n              site={formatSiteName(siteName)}\n              title=\"Live Green Feeds - Survey Weekly\"\n              date={weekCommence}\n            />\n\n            <div className=\"applyBlueTuckGreen cooperHewittBold\">\n                <h4 className=\"cooperHewittBold\">Survey Results</h4>\n            </div>\n\n            <div\n            className=\"applyCooperHewittBold\"\n            style={{\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  justifyContent: \"space-evenly\",\n                  color: \"#0f808c\",\n                  fontSize: \"12px\",\n                  fontWeight: \"bold\",\n            }}>\n              {questions.map((data, i) => (\n                <div className=\"applyPurpleColor\" key={i}>{data}</div>\n              ))}\n            </div>\n\n            <div>\n              <h4 className=\"applyBlueTuckGreen cooperHewittBold\">Sample Number:</h4>\n            </div>\n\n            <div\n            className=\"applyCooperHewittBold\"\n            style={{\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  justifyContent: \"space-evenly\",\n                  color: \"#0f808c\",\n                  fontSize: \"12px\",\n                  fontWeight: \"bold\",\n            }}>\n              {sampleTotal.map((data, i) => (\n                <div className=\"applyPurpleColor\" key={i}>{data}</div>\n              ))}\n            </div>\n\n            <div style={{\n              flexDirection: \"row\",\n              justifyContent: \"space-between\",\n              display:\"flex\",\n              padding: \"10px\",\n              fontSize: \"10px\",\n              color: \"rgb(140, 112, 140)\"\n            }}>\n\n            </div>\n\n            <Bar\n                  data={{\n                    labels: [1,2,3,4, \"\",1,2,3,4, \"\",1,2,3,4, \"\",1,2,3,4],\n                    // wasteSteamsValue: wasteStreamValue,\n                    // inputData: inputsData,\n                    datasets: [\n\n                      {\n                        // label: [\"1,2,3,4\", null,\"1,2,3,4\", null,\"1,2,3,4\", null,\"1,2,3,4\"],\n                        // data: [2,2,2,2, \"\",1,2,3,4, \"\",1,2,3,4, \"\",1,2,3,4],\n                        data: dataForGraph,\n                        backgroundColor: \"rgb(178, 191, 80)\",\n                        minBarLength: 0.3,\n                        categoryPercentage: 1.0,\n                        barPercentage: 0.5\n                      },\n\n                    ],\n                  }}\n                  width={graphWidth}\n                  height={graphHeight}\n                  options={{\n\n                    responsive: true,\n                    maintainAspectRatio: true,\n                    layout: {\n                      padding: {\n                          left: 25,\n                          right: 25,\n                          top: 10,\n                          bottom: 10\n                      }\n                    },\n                    scales: {\n                      xAxes: [\n                        {\n                          display: true,\n                          gridLines: {\n                            display: false,\n                          },\n                          ticks: {\n                            autoSkip: false,\n                            fontSize: 7\n                          },\n                        },\n                      ],\n                      yAxes: [\n                        {\n                          gridLines: {\n                            display: false,\n                          },\n                          ticks: {\n                            maxTicksLimit: 4,\n                            display: false,\n                            beginAtZero: true,\n                            max: maxValue + 5\n                          },\n                        },\n                      ],\n                    },\n\n                    plugins: {\n                      datalabels: {\n                        display: true,\n                        color: \"rgb(47, 64, 30)\",\n                        anchor: \"end\",\n                        align: \"end\",\n                        clamp: true,\n                        font: {\n                          size: 10,\n                          weight: 900,\n                        },\n                        offset: 4,\n                      },\n\n                    },\n\n\n                    tooltips: {\n                      // enabled: true,\n                    //   callbacks: {\n                    //     title: function(tooltipItems, data) {\n                    //       return '';\n                    //     },\n                    //     label: function(tooltipItem, data) {\n                    //       let inputData = data.inputData[tooltipItem.index];\n\n                    //       let wasteSteamValue = isInt(data.wasteSteamsValue[tooltipItem.index]) ? data.wasteSteamsValue[tooltipItem.index] :  keepTwoDecimalPlacesWithoutRoundingUp(data.wasteSteamsValue[tooltipItem.index])\n\n                    //       const val = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n                    //       return val + \"(\" +  wasteSteamValue + \"/\" + inputData + \")\"\n                    //     }\n                    //   }\n                    }\n\n                  }}\n              />\n\n            <div className=\"graph__row\">\n                <div className=\"graph__message cooperHewittBold\">\n                  1 = Great and 4 = Bad\n                </div>\n            </div>\n\n            <div className=\"applyBlueTuckGreen cooperHewittBold\">\n              <h4 className=\"applyBlueTuckGreen cooperHewittBold\">Questions:</h4>\n            </div>\n\n            {/* <div\n            className=\"applyCooperHewittBold\"\n            style={{\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  justifyContent: \"space-evenly\",\n                  color: \"#0f808c\",\n                  fontSize: \"12px\",\n                  fontWeight: \"bold\",\n            }}>\n              {questions.map((data, i) => (\n                <div className=\"applyPurpleColor\" key={i}>{data}</div>\n              ))}\n            </div>\n\n            <div>\n              <h4 className=\"applyBlueTuckGreen cooperHewittBold\">Sample Number:</h4>\n            </div>\n\n            <div\n            className=\"applyCooperHewittBold\"\n            style={{\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  justifyContent: \"space-evenly\",\n                  color: \"#0f808c\",\n                  fontSize: \"12px\",\n                  fontWeight: \"bold\",\n            }}>\n              {sampleTotal.map((data, i) => (\n                <div className=\"applyPurpleColor\" key={i}>{data}</div>\n              ))}\n            </div> */}\n\n            <div style={{\n              display: \"flex\",\n              padding: \"2rem\",\n              fontSize: \"10px\"\n            }}>\n              <Pagination index={paginationIndex} onPageChange={changePageForWeeks} pageCount={numberOfWeeks} />\n            </div>\n\n        </div>\n\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}