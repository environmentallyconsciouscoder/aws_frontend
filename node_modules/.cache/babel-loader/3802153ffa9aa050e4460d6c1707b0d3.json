{"ast":null,"code":"import React, { useState } from \"react\";\nimport { updateUsersLoginTime, getLoginTimeFromUsers } from \"../../../api\";\n\nconst UsersInformation = () => {\n  /// user related information\n  const [userType, setUserType] = React.useState(\"greenkodeUser\");\n  const [userDetail, setUserDetail] = useState(\"\");\n  const [noOfUsers, setNoOfUsers] = useState(0);\n  const [isAuthenticated, userHasAuthenticated] = useState(false);\n  const [superAdminCreatedUsers, setSuperAdminCreatedUsers] = React.useState([]);\n\n  const saveUserType = data => {\n    // setUserType(data[0])\n    setUserType(data);\n  };\n\n  let getUserDetails = data => {\n    // console.log(\"getUserDetails\",data)\n    setUserDetail(data);\n  };\n\n  const getNoOfUsersCreated = noOfUsers => {\n    //   console.log(\"noOfUsers\",noOfUsers)\n    let formatedIntoNumber = parseInt(noOfUsers);\n    setNoOfUsers(formatedIntoNumber);\n  };\n\n  const saveLoginTime = (userDetails, companyID) => {\n    const date = new Date();\n    const time = date.toLocaleString('en-GB', {\n      timeZone: 'Europe/London'\n    });\n    updateUsersLoginTime(userDetails, companyID, time);\n  };\n\n  const getTheLoginTimeFromUsers = (id, companyName) => {\n    getLoginTimeFromUsers(id, companyName).then(data => {\n      setSuperAdminCreatedUsers(data[0].superAdminCreatedUsers);\n    });\n  };\n\n  return {\n    saveUserType,\n    getUserDetails,\n    getNoOfUsersCreated,\n    userType,\n    userDetail,\n    noOfUsers,\n    isAuthenticated,\n    userHasAuthenticated,\n    saveLoginTime,\n    getTheLoginTimeFromUsers,\n    superAdminCreatedUsers\n  };\n};\n\nexport default UsersInformation;","map":{"version":3,"sources":["/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/shared/components/libs/use-user-information.js"],"names":["React","useState","updateUsersLoginTime","getLoginTimeFromUsers","UsersInformation","userType","setUserType","userDetail","setUserDetail","noOfUsers","setNoOfUsers","isAuthenticated","userHasAuthenticated","superAdminCreatedUsers","setSuperAdminCreatedUsers","saveUserType","data","getUserDetails","getNoOfUsersCreated","formatedIntoNumber","parseInt","saveLoginTime","userDetails","companyID","date","Date","time","toLocaleString","timeZone","getTheLoginTimeFromUsers","id","companyName","then"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SACEC,oBADF,EAEEC,qBAFF,QAGO,cAHP;;AAKA,MAAMC,gBAAgB,GAAG,MAAM;AAE7B;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,KAAK,CAACC,QAAN,CAAe,eAAf,CAAhC;AACA,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACU,eAAD,EAAkBC,oBAAlB,IAA0CX,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAACY,sBAAD,EAAyBC,yBAAzB,IAAsDd,KAAK,CAACC,QAAN,CAAe,EAAf,CAA5D;;AAEA,QAAMc,YAAY,GAAIC,IAAD,IAAU;AAC7B;AACAV,IAAAA,WAAW,CAACU,IAAD,CAAX;AACD,GAHD;;AAKA,MAAIC,cAAc,GAAID,IAAD,IAAU;AAC7B;AACAR,IAAAA,aAAa,CAACQ,IAAD,CAAb;AACD,GAHD;;AAKA,QAAME,mBAAmB,GAAIT,SAAD,IAAe;AACzC;AACA,QAAIU,kBAAkB,GAAGC,QAAQ,CAACX,SAAD,CAAjC;AACAC,IAAAA,YAAY,CAACS,kBAAD,CAAZ;AACD,GAJD;;AAMA,QAAME,aAAa,GAAG,CAACC,WAAD,EAAcC,SAAd,KAA4B;AAChD,UAAMC,IAAI,GAAG,IAAIC,IAAJ,EAAb;AACA,UAAMC,IAAI,GAAGF,IAAI,CAACG,cAAL,CAAoB,OAApB,EAA6B;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAA7B,CAAb;AACA1B,IAAAA,oBAAoB,CAACoB,WAAD,EAAcC,SAAd,EAAyBG,IAAzB,CAApB;AACD,GAJD;;AAMA,QAAMG,wBAAwB,GAAG,CAACC,EAAD,EAAKC,WAAL,KAAqB;AACpD5B,IAAAA,qBAAqB,CAAC2B,EAAD,EAAKC,WAAL,CAArB,CAAuCC,IAAvC,CAA6ChB,IAAD,IAAU;AACpDF,MAAAA,yBAAyB,CAACE,IAAI,CAAC,CAAD,CAAJ,CAAQH,sBAAT,CAAzB;AACD,KAFD;AAGD,GAJD;;AAMA,SAAO;AACLE,IAAAA,YADK;AAELE,IAAAA,cAFK;AAGLC,IAAAA,mBAHK;AAKLb,IAAAA,QALK;AAMLE,IAAAA,UANK;AAOLE,IAAAA,SAPK;AASLE,IAAAA,eATK;AAULC,IAAAA,oBAVK;AAYLS,IAAAA,aAZK;AAaLQ,IAAAA,wBAbK;AAcLhB,IAAAA;AAdK,GAAP;AAiBD,CAtDD;;AAwDA,eAAeT,gBAAf","sourcesContent":["import React, { useState } from \"react\";\n\nimport {\n  updateUsersLoginTime,\n  getLoginTimeFromUsers\n} from \"../../../api\";\n\nconst UsersInformation = () => {\n\n  /// user related information\n  const [userType, setUserType] = React.useState(\"greenkodeUser\");\n  const [userDetail, setUserDetail] = useState(\"\");\n  const [noOfUsers, setNoOfUsers] = useState(0);\n  const [isAuthenticated, userHasAuthenticated] = useState(false);\n  const [superAdminCreatedUsers, setSuperAdminCreatedUsers] = React.useState([]);\n\n  const saveUserType = (data) => {\n    // setUserType(data[0])\n    setUserType(data)\n  }\n\n  let getUserDetails = (data) => {\n    // console.log(\"getUserDetails\",data)\n    setUserDetail(data);\n  };\n\n  const getNoOfUsersCreated = (noOfUsers) => {\n    //   console.log(\"noOfUsers\",noOfUsers)\n    let formatedIntoNumber = parseInt(noOfUsers)\n    setNoOfUsers(formatedIntoNumber)\n  }\n\n  const saveLoginTime = (userDetails, companyID) => {\n    const date = new Date();\n    const time = date.toLocaleString('en-GB', { timeZone: 'Europe/London' })\n    updateUsersLoginTime(userDetails, companyID, time)\n  }\n\n  const getTheLoginTimeFromUsers = (id, companyName) => {\n    getLoginTimeFromUsers(id, companyName).then((data) => {\n      setSuperAdminCreatedUsers(data[0].superAdminCreatedUsers)\n    })\n  }\n\n  return {\n    saveUserType,\n    getUserDetails,\n    getNoOfUsersCreated,\n\n    userType,\n    userDetail,\n    noOfUsers,\n\n    isAuthenticated,\n    userHasAuthenticated,\n\n    saveLoginTime,\n    getTheLoginTimeFromUsers,\n    superAdminCreatedUsers\n  }\n\n}\n\nexport default UsersInformation\n"]},"metadata":{},"sourceType":"module"}