{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/contexts/waste-per-sales-context.js\";\nimport React, { createContext, useEffect, useState } from 'react'; // import { getWastePerSales } from \"../api\";\n\nexport const WastePerSalesContext = createContext();\n\nconst WastePerSalesContextProvider = props => {\n  const initialStateForyearlyArray = JSON.parse(localStorage.getItem('yearlyArray')) || [];\n  const initialStateFormontlyArray = JSON.parse(localStorage.getItem('monthlyArr')) || [];\n  const [yearlyArray, setYearlyArray] = useState(initialStateForyearlyArray);\n  const [montlyArray, setMonthArray] = useState(initialStateFormontlyArray);\n  const [count, setCount] = useState(0);\n  const [activeState, changeActiveState] = useState({\n    coverSelector: false,\n    spoilageSelector: false,\n    preparationSelector: false,\n    allSelector: true\n  });\n  const [totalCW, setTotalCW] = useState(0);\n  const [totalPW, setTotalPW] = useState(0);\n  const [totalSW, setTotalSW] = useState(0);\n  const [totalWaste, setTotalWaste] = useState(0);\n  const [xAxis, setXaxis] = useState(0);\n  const [wastePerSalesForAllWaste, setForAllWaste] = useState([]);\n  const [wastePerSalesForCoverWaste, setCoverWaste] = useState([]);\n  const [wastePerSalesForPreparationWaste, setPreparationWaste] = useState([]);\n  const [wastePerSalesForSpoilageWaste, setSpoilageWaste] = useState([]);\n  const [totalSalesInputs, setTotalSalesInputs] = useState(0);\n  const [percentageOfInputsAreZeros, setPercentageOfInputsAreZeros] = useState(0);\n  const [monthName, setMonthName] = useState(0);\n  const [display, setDisplay] = useState([]);\n  const [searchError, setSearchError] = React.useState(null);\n  const [selectedYear, setSelectedYear] = React.useState(0);\n  const [siteName, setSiteName] = React.useState(); // const [weekOneArray, setWeekOneArray ] = useState([])\n  // const [weekTwoArray, setWeekTwoArray ] = useState([])\n  // const [weekThreeArray, setWeekThreeArray ] = useState([])\n  // const [weekFourArray, setWeekFourArray ] = useState([])\n  // const [weekFiveArray, setWeekFiveArray ] = useState([])\n  // const [weekSixArray, setWeekSixArray ] = useState([])\n  // const [weekSevenArray, setWeekSevenArray ] = useState([])\n\n  const [dates, setDates] = useState([]);\n  const [datesBeforeFormating, setDatesBeforeFormating] = useState([]);\n  const [datesLabel, setDatesLabel] = useState([]);\n  const [foodWaste, setFoodWaste] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n  const [foodWasteXaxis, setFoodWasteXaxis] = useState([]);\n  const [salesInputDataArray, setSalesInputDataArray] = useState([]);\n  const [coverWasteDataArray, setCoverWasteDataArray] = useState([]);\n  const [preparationWasteDataArray, setPreparationWasteDataArray] = useState([]);\n  const [spoilageWasteDataArray, setSpoilageWasteDataArray] = useState([]);\n  const [totalDailyWasteDataArray, setTotalDailyWasteDataArray] = useState([]);\n  const [wasteSteamValue, setWasteSteamValue] = useState([]);\n  const [showTooltip, setTooltip] = React.useState(true);\n  useEffect(() => {\n    changeActiveState({\n      coverSelector: false,\n      spoilageSelector: false,\n      preparationSelector: false,\n      allSelector: true\n    });\n\n    if (props.wastePerSales.wastePerSalesForAllWaste) {\n      setSalesInputDataArray(addGap(props.wastePerSales.salesInputDataArray));\n      setCoverWasteDataArray(addGap(props.wastePerSales.salesWasteDataArray));\n      setPreparationWasteDataArray(addGap(props.wastePerSales.preparationWasteDataArray));\n      setSpoilageWasteDataArray(addGap(props.wastePerSales.spoilageWasteDataArray));\n      let addGapToTotalDailyWasteDataArray = addGap(props.wastePerSales.totalDailyWasteDataArray);\n      setTotalDailyWasteDataArray(addGapToTotalDailyWasteDataArray);\n      setWasteSteamValue(addGapToTotalDailyWasteDataArray); // getWastePerSales()\n      // console.log(\"PROPS\",props)\n      // console.log(\"PROPS\",props.wastePerSales)\n      // console.log(\"props.siteName\",props.siteName)\n      // console.log(\"companyID\",props.siteName)\n      // console.log(\"companyName\",props.siteName)\n      // console.log(\"month\",props.siteName)\n      // console.log(\"year\",props.siteName)\n\n      setYearlyArray(props.yearlyArray);\n      setMonthArray(props.monthlyArray); //new function\n\n      const waste = props.wastePerSales.wastePerSalesForAllWaste; // separateWastePerCover(waste, props.wastePerSales.xAxis)\n\n      const foodWaste = addGap(waste);\n      setFoodWaste(foodWaste);\n      const foodWasteXaxis = addGap(props.wastePerSales.xAxis, \"xaxis\");\n      setFoodWasteXaxis(foodWasteXaxis); // const allFoodWaste = addGap(props.wastePerSales.wastePerSalesForAllWaste);\n\n      const spoilageFoodWaste = addGap(props.wastePerSales.wastePerSalesForSpoilageWaste);\n      const prepFoodWaste = addGap(props.wastePerSales.wastePerSalesForPreparationWaste);\n      const coverFoodWaste = addGap(props.wastePerSales.wastePerSalesForCoverWaste);\n      setForAllWaste(foodWaste);\n      setCoverWaste(coverFoodWaste);\n      setPreparationWaste(prepFoodWaste);\n      setSpoilageWaste(spoilageFoodWaste);\n      setDatesBeforeFormating(props.wastePerSales.xAxis); // separateWastePerCover(props.wastePerCover, props.wastePerCover.xAxis)\n\n      setTotalCW(props.wastePerSales.totalCW);\n      setTotalPW(props.wastePerSales.totalPW);\n      setTotalSW(props.wastePerSales.totalSW);\n      setTotalWaste(props.wastePerSales.totalWaste);\n      setXaxis(props.wastePerSales.xAxis);\n      setMonthName(props.wastePerSales.monthsName);\n      setTotalSalesInputs(props.wastePerSales.totalSalesInput);\n      setDisplay(props.wastePerSales.wastePerSalesForAllWaste);\n      setPercentageOfInputsAreZeros(props.wastePerSales.percentageOfInputsAreZeros); // setForAllWaste(props.wastePerSales.wastePerSalesForAllWaste)\n      // setCoverWaste(props.wastePerSales.wastePerSalesForCoverWaste)\n      // setPreparationWaste(props.wastePerSales.wastePerSalesForPreparationWaste)\n      // setSpoilageWaste(props.wastePerSales.wastePerSalesForSpoilageWaste)\n\n      setSiteName(props.wastePerSales.siteName);\n    }\n\n    setSearchError(props.searchErrorForWastePerSales);\n    setSelectedYear(props.selectedYearForWastePerSales); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.wastePerSales, props.searchError, props.monthlyArray, props.yearlyArray, props.siteName]);\n\n  const addGap = (dataSet, type) => {\n    Array.prototype.insert = function (index, item) {\n      this.splice(index, 0, item);\n    };\n\n    let array = dataSet;\n\n    if (dataSet !== undefined) {\n      // console.log(\"dataSet.lengt\",dataSet.length)\n      for (let i = 7; i <= dataSet.length; i += 8) {\n        // console.log(\"i\",i)\n        const value = type === \"xaxis\" ? \"\" : null;\n        array.insert(i, value);\n      }\n    }\n\n    return array;\n  }; // const separateWastePerCover = (waste, xAxis) => {\n  //   if (waste !== undefined) {\n  //     // console.log(\"waste\",waste.wastePerCoverForAllWaste)\n  //     // console.log(\"xAxis\",xAxis);\n  //     // let waste = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31]\n  //     // let dates = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31]\n  //     // let waste = [1, 2, 3, 4, 5]\n  //     // let dates = [1, 2, 3, 4, 5]\n  //     // const formatedCW = filterByWeeks(waste, dates)\n  //     const formatedWastesData = filterByWeeks(waste, xAxis)\n  //     // console.log(\"formatedWastesData\",formatedWastesData);\n  //     const dates = spitDatesIntoArray(formatedWastesData.newArrayForDates)\n  //     setDatesLabel(dates);\n  //     setWeekOneArray(formatedWastesData.sevenArraysForChart.reformatedArrayOne)\n  //     setWeekTwoArray(formatedWastesData.sevenArraysForChart.reformatedArrayTwo)\n  //     setWeekThreeArray(formatedWastesData.sevenArraysForChart.reformatedArrayThree)\n  //     setWeekFourArray(formatedWastesData.sevenArraysForChart.reformatedArrayFour)\n  //     setWeekFiveArray(formatedWastesData.sevenArraysForChart.reformatedArrayFive)\n  //     setWeekSixArray(formatedWastesData.sevenArraysForChart.reformatedArraySix)\n  //     setWeekSevenArray(formatedWastesData.sevenArraysForChart.reformatedArraySeven)\n  //     setDates(formatedWastesData.newArrayForDates)\n  //   }\n  // }\n\n\n  const spitDatesIntoArray = data => {\n    let arrayOfDates = [];\n    data.map(item => {\n      const splitItem = item.split(\",\");\n      arrayOfDates.push(splitItem);\n      return \"\";\n    });\n    return arrayOfDates;\n  };\n\n  const filterByWeeks = (wastes, xAxis) => {\n    const numOfCoverPerWaste = wastes.length;\n    const dates = xAxis;\n    const howManyWeeksinTheArray = numOfCoverPerWaste / 7; // console.log(\"howManyWeeksinTheArray\",howManyWeeksinTheArray)\n    // console.log(\"dates\",dates)\n    // console.log(\"numOfCoverPerWaste\",numOfCoverPerWaste)\n\n    let newArray;\n    let newArrayForDates = [];\n\n    if (howManyWeeksinTheArray <= 1) {\n      // console.log(\"1 week only\")\n      const datesInWeekOne = [];\n      let num;\n\n      for (num = 0; num <= 6; ++num) {\n        datesInWeekOne.push(dates[num]);\n      }\n\n      const turnDatesToString = datesInWeekOne.join();\n      newArrayForDates.push(turnDatesToString);\n      const sevenArraysForChart = reformatDataToShowWastePerWeek(wastes, numOfCoverPerWaste);\n      newArray = {\n        newArrayForDates,\n        sevenArraysForChart\n      };\n    } else if (howManyWeeksinTheArray > 1 && howManyWeeksinTheArray <= 2) {\n      // console.log(\"2 weeks only\")\n      const datesInWeekOne = [];\n      const datesInWeekTwo = [];\n      let num;\n\n      for (num = 0; num <= 6; ++num) {\n        datesInWeekOne.push(dates[num]);\n      }\n\n      let numTwo;\n\n      for (numTwo = 7; numTwo <= dates.length - 1; ++numTwo) {\n        datesInWeekTwo.push(dates[numTwo]);\n      }\n\n      let turnDatesToString;\n      turnDatesToString = datesInWeekOne.join();\n      newArrayForDates.push(turnDatesToString);\n      turnDatesToString = datesInWeekTwo.join();\n      newArrayForDates.push(turnDatesToString);\n      const sevenArraysForChart = reformatDataToShowWastePerWeek(wastes, numOfCoverPerWaste);\n      newArray = {\n        newArrayForDates,\n        sevenArraysForChart\n      };\n    } else if (howManyWeeksinTheArray > 2 && howManyWeeksinTheArray <= 3) {\n      // console.log(\"3 weeks only\")\n      const datesInWeekOne = [];\n      const datesInWeekTwo = [];\n      const datesInWeekThree = [];\n      let num;\n\n      for (num = 0; num <= 6; ++num) {\n        datesInWeekOne.push(dates[num]);\n      }\n\n      let numTwo;\n\n      for (numTwo = 7; numTwo <= 13; ++numTwo) {\n        datesInWeekTwo.push(dates[numTwo]);\n      }\n\n      let numThree;\n\n      for (numThree = 14; numThree <= dates.length - 1; ++numThree) {\n        datesInWeekThree.push(dates[numThree]);\n      }\n\n      let turnDatesToString;\n      turnDatesToString = datesInWeekOne.join();\n      newArrayForDates.push(turnDatesToString);\n      turnDatesToString = datesInWeekTwo.join();\n      newArrayForDates.push(turnDatesToString);\n      turnDatesToString = datesInWeekThree.join();\n      newArrayForDates.push(turnDatesToString);\n      const sevenArraysForChart = reformatDataToShowWastePerWeek(wastes, numOfCoverPerWaste);\n      newArray = {\n        newArrayForDates,\n        sevenArraysForChart\n      };\n    } else if (howManyWeeksinTheArray > 3 && howManyWeeksinTheArray <= 4) {\n      // console.log(\"4 weeks only\")\n      const datesInWeekOne = [];\n      const datesInWeekTwo = [];\n      const datesInWeekThree = [];\n      const datesInWeekFour = [];\n      let num;\n\n      for (num = 0; num <= 6; ++num) {\n        datesInWeekOne.push(dates[num]);\n      }\n\n      let numTwo;\n\n      for (numTwo = 7; numTwo <= 13; ++numTwo) {\n        datesInWeekTwo.push(dates[numTwo]);\n      }\n\n      let numThree;\n\n      for (numThree = 14; numThree <= 20; ++numThree) {\n        datesInWeekThree.push(dates[numThree]);\n      }\n\n      let numFour;\n\n      for (numFour = 21; numFour <= dates.length - 1; ++numFour) {\n        datesInWeekFour.push(dates[numFour]);\n      }\n\n      let turnDatesToString;\n      turnDatesToString = datesInWeekOne.join();\n      newArrayForDates.push(turnDatesToString);\n      turnDatesToString = datesInWeekTwo.join();\n      newArrayForDates.push(turnDatesToString);\n      turnDatesToString = datesInWeekThree.join();\n      newArrayForDates.push(turnDatesToString);\n      turnDatesToString = datesInWeekFour.join();\n      newArrayForDates.push(turnDatesToString);\n      const sevenArraysForChart = reformatDataToShowWastePerWeek(wastes, numOfCoverPerWaste);\n      newArray = {\n        newArrayForDates,\n        sevenArraysForChart\n      };\n    } else if (howManyWeeksinTheArray > 4) {\n      // console.log(\"5 weeklys only\")\n      const datesInWeekOne = [];\n      const datesInWeekTwo = [];\n      const datesInWeekThree = [];\n      const datesInWeekFour = [];\n      const datesInWeekFive = [];\n      let num;\n\n      for (num = 0; num <= 6; ++num) {\n        datesInWeekOne.push(dates[num]);\n      }\n\n      let numTwo;\n\n      for (numTwo = 7; numTwo <= 13; ++numTwo) {\n        datesInWeekTwo.push(dates[numTwo]);\n      }\n\n      let numThree;\n\n      for (numThree = 14; numThree <= 20; ++numThree) {\n        datesInWeekThree.push(dates[numThree]);\n      }\n\n      let numFour;\n\n      for (numFour = 21; numFour <= 27; ++numFour) {\n        datesInWeekFour.push(dates[numFour]);\n      }\n\n      let numFive;\n\n      for (numFive = 28; numFive <= dates.length - 1; ++numFive) {\n        datesInWeekFive.push(dates[numFive]);\n      }\n\n      let turnDatesToString;\n      turnDatesToString = datesInWeekOne.join();\n      newArrayForDates.push(turnDatesToString);\n      turnDatesToString = datesInWeekTwo.join();\n      newArrayForDates.push(turnDatesToString);\n      turnDatesToString = datesInWeekThree.join();\n      newArrayForDates.push(turnDatesToString);\n      turnDatesToString = datesInWeekFour.join();\n      newArrayForDates.push(turnDatesToString);\n      turnDatesToString = datesInWeekFive.join();\n      newArrayForDates.push(turnDatesToString);\n      const sevenArraysForChart = reformatDataToShowWastePerWeek(wastes, numOfCoverPerWaste);\n      newArray = {\n        newArrayForDates,\n        sevenArraysForChart\n      };\n    }\n\n    return newArray;\n  };\n\n  const reformatDataToShowWastePerWeek = (wastes, numOfCoverPerWaste) => {\n    const arrayOne = [];\n    const arrayTwo = [];\n    const arrayThree = [];\n    const arrayFour = [];\n    const arrayFive = [];\n    const arraySix = [];\n    const arraySeven = [];\n    let numOne;\n\n    for (numOne = 0; numOne <= numOfCoverPerWaste; numOne += 7) {\n      arrayOne.push(wastes[numOne]);\n    }\n\n    let numTwo;\n\n    for (numTwo = 1; numTwo <= numOfCoverPerWaste; numTwo += 7) {\n      arrayTwo.push(wastes[numTwo]);\n    }\n\n    let numThree;\n\n    for (numThree = 2; numThree <= numOfCoverPerWaste; numThree += 7) {\n      arrayThree.push(wastes[numThree]);\n    }\n\n    let numFour;\n\n    for (numFour = 3; numFour <= numOfCoverPerWaste; numFour += 7) {\n      arrayFour.push(wastes[numFour]);\n    }\n\n    let numFive;\n\n    for (numFive = 4; numFive <= numOfCoverPerWaste; numFive += 7) {\n      arrayFive.push(wastes[numFive]);\n    }\n\n    let numSix;\n\n    for (numSix = 5; numSix <= numOfCoverPerWaste; numSix += 7) {\n      arraySix.push(wastes[numSix]);\n    }\n\n    let numSeven;\n\n    for (numSeven = 6; numSeven <= numOfCoverPerWaste; numSeven += 7) {\n      arraySeven.push(wastes[numSeven]);\n    }\n\n    const reformatedArrayOne = arrayOne.filter(data => {\n      return data !== undefined;\n    }); // console.log(\"reformatedArrayOne\", reformatedArrayOne)\n\n    const reformatedArrayTwo = arrayTwo.filter(data => {\n      return data !== undefined;\n    }); // console.log(\"reformatedArrayTwo\", reformatedArrayTwo)\n\n    const reformatedArrayThree = arrayThree.filter(data => {\n      return data !== undefined;\n    }); // console.log(\"reformatedArrayThree\", reformatedArrayThree)\n\n    const reformatedArrayFour = arrayFour.filter(data => {\n      return data !== undefined;\n    }); // console.log(\"reformatedArrayFour\", reformatedArrayFour)\n\n    const reformatedArrayFive = arrayFive.filter(data => {\n      return data !== undefined;\n    }); // console.log(\"reformatedArrayFive\", reformatedArrayFive)\n\n    const reformatedArraySix = arraySix.filter(data => {\n      return data !== undefined;\n    }); // console.log(\"reformatedArraySix\", reformatedArraySix)\n\n    const reformatedArraySeven = arraySeven.filter(data => {\n      return data !== undefined;\n    }); // console.log(\"reformatedArraySeven\", reformatedArraySeven)\n\n    const results = {\n      reformatedArrayOne,\n      reformatedArrayTwo,\n      reformatedArrayThree,\n      reformatedArrayFour,\n      reformatedArrayFive,\n      reformatedArraySix,\n      reformatedArraySeven\n    };\n    return results;\n  };\n\n  const handleSearch = () => {\n    const monthlyIndexArray = montlyArray.filter(data => {\n      return data.show;\n    });\n    const yearlyIndexArray = yearlyArray.filter(data => {\n      return data.show;\n    });\n    const data = {\n      monthlyIndex: monthlyIndexArray[0].index,\n      yearlyIndex: yearlyIndexArray[0].year\n    };\n    props.handleSearch(data, \"wastePerSales\");\n  };\n\n  const handleYearly = step => {\n    let getIndex;\n    let highestIndex = yearlyArray.length - 1;\n    yearlyArray.find(data => {\n      if (data.show === true) {\n        getIndex = yearlyArray.indexOf(data);\n      }\n\n      return \"\";\n    });\n\n    if (step === \"NEXT\" && getIndex !== highestIndex) {\n      yearlyArray.map(data => {\n        let index = yearlyArray.indexOf(data);\n\n        if (index === getIndex + 1) {\n          data.show = true;\n          return \"\";\n        } else {\n          data.show = false;\n          return \"\";\n        }\n      });\n    } else if (step === \"PREV\" && getIndex !== 0) {\n      yearlyArray.map(data => {\n        let index = yearlyArray.indexOf(data);\n\n        if (index === getIndex - 1) {\n          data.show = true;\n          return \"\";\n        } else {\n          data.show = false;\n          return \"\";\n        }\n      });\n    }\n\n    setYearlyArray(yearlyArray);\n    setCount(prevCount => {\n      return prevCount + 1;\n    });\n  };\n\n  const handleMonthly = (step, name) => {\n    // console.log(\"here\")\n    let getIndex;\n    montlyArray.find(data => {\n      if (data.show === true) {\n        getIndex = data.index;\n      }\n\n      return \"\";\n    }); ///NEXT\n\n    if (step === \"NEXT\" && getIndex !== 12) {\n      montlyArray.map(data => {\n        if (data.index <= 12) {\n          if (data.index === getIndex + 1) {\n            data.show = true;\n          } else {\n            data.show = false;\n          }\n        }\n\n        return \"\";\n      });\n    } else if (step === \"PREV\" && getIndex !== 1) {\n      ///PREV\n      montlyArray.map(data => {\n        if (data.index <= 12) {\n          if (data.index === getIndex - 1) {\n            data.show = true;\n          } else {\n            data.show = false;\n          }\n        }\n\n        return \"\";\n      });\n    }\n\n    setMonthArray(montlyArray);\n    setCount(prevCount => {\n      return prevCount + 1;\n    });\n  };\n\n  function toggleActive(type) {\n    switch (type) {\n      case \"coverSelector\":\n        changeActiveState({\n          coverSelector: true,\n          spoilageSelector: false,\n          preparationSelector: false,\n          allSelector: false\n        }); // const coverfoodWaste = addGap(wastePerSalesForCoverWaste);\n\n        setFoodWaste(wastePerSalesForCoverWaste);\n        setWasteSteamValue(coverWasteDataArray);\n        break;\n\n      case \"spoilageSelector\":\n        changeActiveState({\n          coverSelector: false,\n          spoilageSelector: true,\n          preparationSelector: false,\n          allSelector: false\n        }); // const spoilagefoodWaste = addGap(wastePerSalesForSpoilageWaste);\n\n        setFoodWaste(wastePerSalesForSpoilageWaste);\n        setWasteSteamValue(spoilageWasteDataArray);\n        break;\n\n      case \"preparationSelector\":\n        changeActiveState({\n          coverSelector: false,\n          spoilageSelector: false,\n          preparationSelector: true,\n          allSelector: false\n        }); // const prepfoodWaste = addGap(wastePerSalesForPreparationWaste);\n\n        setFoodWaste(wastePerSalesForPreparationWaste);\n        setWasteSteamValue(preparationWasteDataArray);\n        break;\n\n      case \"allSelector\":\n        changeActiveState({\n          coverSelector: false,\n          spoilageSelector: false,\n          preparationSelector: false,\n          allSelector: true\n        }); // const allfoodWaste = addGap(wastePerSalesForAllWaste);\n\n        setFoodWaste(wastePerSalesForAllWaste);\n        setWasteSteamValue(totalDailyWasteDataArray);\n        break;\n\n      default:\n    }\n\n    setTooltip(false);\n  }\n\n  return /*#__PURE__*/React.createElement(WastePerSalesContext.Provider, {\n    value: {\n      activeState,\n      toggleActive,\n      yearlyArray,\n      montlyArray,\n      handleYearly,\n      handleMonthly,\n      count,\n      totalCW,\n      totalPW,\n      totalSW,\n      totalWaste,\n      xAxis,\n      display,\n      totalSalesInputs,\n      percentageOfInputsAreZeros,\n      monthName,\n      selectedYear,\n      handleSearch,\n      searchError,\n      siteName,\n      // weekOneArray,\n      // weekTwoArray,\n      // weekThreeArray,\n      // weekFourArray,\n      // weekFiveArray,\n      // weekSixArray,\n      // weekSevenArray,\n      dates,\n      datesLabel,\n      foodWaste,\n      foodWasteXaxis,\n      wasteSteamValue,\n      salesInputDataArray,\n      showTooltip\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 715,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default WastePerSalesContextProvider;","map":{"version":3,"sources":["/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/contexts/waste-per-sales-context.js"],"names":["React","createContext","useEffect","useState","WastePerSalesContext","WastePerSalesContextProvider","props","initialStateForyearlyArray","JSON","parse","localStorage","getItem","initialStateFormontlyArray","yearlyArray","setYearlyArray","montlyArray","setMonthArray","count","setCount","activeState","changeActiveState","coverSelector","spoilageSelector","preparationSelector","allSelector","totalCW","setTotalCW","totalPW","setTotalPW","totalSW","setTotalSW","totalWaste","setTotalWaste","xAxis","setXaxis","wastePerSalesForAllWaste","setForAllWaste","wastePerSalesForCoverWaste","setCoverWaste","wastePerSalesForPreparationWaste","setPreparationWaste","wastePerSalesForSpoilageWaste","setSpoilageWaste","totalSalesInputs","setTotalSalesInputs","percentageOfInputsAreZeros","setPercentageOfInputsAreZeros","monthName","setMonthName","display","setDisplay","searchError","setSearchError","selectedYear","setSelectedYear","siteName","setSiteName","dates","setDates","datesBeforeFormating","setDatesBeforeFormating","datesLabel","setDatesLabel","foodWaste","setFoodWaste","foodWasteXaxis","setFoodWasteXaxis","salesInputDataArray","setSalesInputDataArray","coverWasteDataArray","setCoverWasteDataArray","preparationWasteDataArray","setPreparationWasteDataArray","spoilageWasteDataArray","setSpoilageWasteDataArray","totalDailyWasteDataArray","setTotalDailyWasteDataArray","wasteSteamValue","setWasteSteamValue","showTooltip","setTooltip","wastePerSales","addGap","salesWasteDataArray","addGapToTotalDailyWasteDataArray","monthlyArray","waste","spoilageFoodWaste","prepFoodWaste","coverFoodWaste","monthsName","totalSalesInput","searchErrorForWastePerSales","selectedYearForWastePerSales","dataSet","type","Array","prototype","insert","index","item","splice","array","undefined","i","length","value","spitDatesIntoArray","data","arrayOfDates","map","splitItem","split","push","filterByWeeks","wastes","numOfCoverPerWaste","howManyWeeksinTheArray","newArray","newArrayForDates","datesInWeekOne","num","turnDatesToString","join","sevenArraysForChart","reformatDataToShowWastePerWeek","datesInWeekTwo","numTwo","datesInWeekThree","numThree","datesInWeekFour","numFour","datesInWeekFive","numFive","arrayOne","arrayTwo","arrayThree","arrayFour","arrayFive","arraySix","arraySeven","numOne","numSix","numSeven","reformatedArrayOne","filter","reformatedArrayTwo","reformatedArrayThree","reformatedArrayFour","reformatedArrayFive","reformatedArraySix","reformatedArraySeven","results","handleSearch","monthlyIndexArray","show","yearlyIndexArray","monthlyIndex","yearlyIndex","year","handleYearly","step","getIndex","highestIndex","find","indexOf","prevCount","handleMonthly","name","toggleActive","children"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from 'react'\n\n// import { getWastePerSales } from \"../api\";\n\nexport const WastePerSalesContext = createContext()\n\nconst WastePerSalesContextProvider = props => {\n\n  const initialStateForyearlyArray = JSON.parse(localStorage.getItem('yearlyArray')) || []\n  const initialStateFormontlyArray = JSON.parse(localStorage.getItem('monthlyArr')) || []\n\n  const [yearlyArray, setYearlyArray] = useState(initialStateForyearlyArray);\n  const [montlyArray, setMonthArray] = useState(initialStateFormontlyArray);\n\n  const [count, setCount ] = useState(0)\n\n  const [activeState, changeActiveState] = useState({\n    coverSelector: false,\n    spoilageSelector: false,\n    preparationSelector: false,\n    allSelector: true,\n  });\n\n  const [totalCW, setTotalCW ] = useState(0)\n  const [totalPW, setTotalPW ] = useState(0)\n  const [totalSW, setTotalSW ] = useState(0)\n  const [totalWaste, setTotalWaste ] = useState(0)\n  const [xAxis, setXaxis ] = useState(0)\n\n  const [wastePerSalesForAllWaste, setForAllWaste ] = useState([])\n  const [wastePerSalesForCoverWaste, setCoverWaste ] = useState([])\n  const [wastePerSalesForPreparationWaste, setPreparationWaste ] = useState([])\n  const [wastePerSalesForSpoilageWaste, setSpoilageWaste ] = useState([])\n\n  const [ totalSalesInputs, setTotalSalesInputs] = useState(0)\n\n  const [ percentageOfInputsAreZeros, setPercentageOfInputsAreZeros] = useState(0)\n\n  const [ monthName, setMonthName] = useState(0)\n\n  const [display, setDisplay ] = useState([])\n\n  const [searchError, setSearchError] = React.useState(null);\n  const [selectedYear, setSelectedYear] = React.useState(0);\n\n  const [siteName, setSiteName] = React.useState();\n\n  // const [weekOneArray, setWeekOneArray ] = useState([])\n  // const [weekTwoArray, setWeekTwoArray ] = useState([])\n  // const [weekThreeArray, setWeekThreeArray ] = useState([])\n  // const [weekFourArray, setWeekFourArray ] = useState([])\n  // const [weekFiveArray, setWeekFiveArray ] = useState([])\n  // const [weekSixArray, setWeekSixArray ] = useState([])\n  // const [weekSevenArray, setWeekSevenArray ] = useState([])\n  const [dates, setDates ] = useState([])\n  const [datesBeforeFormating, setDatesBeforeFormating ] = useState([])\n  const [datesLabel, setDatesLabel ] = useState([])\n\n  const [foodWaste, setFoodWaste] = useState([1,2,3,4,5,6,7,8,9,10]);\n  const [foodWasteXaxis, setFoodWasteXaxis] = useState([]);\n\n  const [salesInputDataArray, setSalesInputDataArray] = useState([]);\n  const [coverWasteDataArray, setCoverWasteDataArray] = useState([]);\n  const [preparationWasteDataArray, setPreparationWasteDataArray] = useState([]);\n  const [spoilageWasteDataArray, setSpoilageWasteDataArray] = useState([]);\n  const [totalDailyWasteDataArray, setTotalDailyWasteDataArray] = useState([]);\n  const [wasteSteamValue, setWasteSteamValue] = useState([]);\n\n  const [showTooltip, setTooltip] = React.useState(true);\n\n  useEffect(() => {\n\n    changeActiveState({\n      coverSelector: false,\n      spoilageSelector: false,\n      preparationSelector: false,\n      allSelector: true,\n    });\n    if (props.wastePerSales.wastePerSalesForAllWaste) {\n\n      setSalesInputDataArray(addGap(props.wastePerSales.salesInputDataArray))\n      setCoverWasteDataArray(addGap(props.wastePerSales.salesWasteDataArray))\n      setPreparationWasteDataArray(addGap(props.wastePerSales.preparationWasteDataArray))\n      setSpoilageWasteDataArray(addGap(props.wastePerSales.spoilageWasteDataArray))\n\n      let addGapToTotalDailyWasteDataArray = addGap(props.wastePerSales.totalDailyWasteDataArray);\n\n      setTotalDailyWasteDataArray(addGapToTotalDailyWasteDataArray)\n      setWasteSteamValue(addGapToTotalDailyWasteDataArray)\n\n      // getWastePerSales()\n\n      // console.log(\"PROPS\",props)\n      // console.log(\"PROPS\",props.wastePerSales)\n      // console.log(\"props.siteName\",props.siteName)\n      // console.log(\"companyID\",props.siteName)\n      // console.log(\"companyName\",props.siteName)\n      // console.log(\"month\",props.siteName)\n      // console.log(\"year\",props.siteName)\n\n      setYearlyArray(props.yearlyArray)\n      setMonthArray(props.monthlyArray)\n\n      //new function\n      const waste = props.wastePerSales.wastePerSalesForAllWaste\n      // separateWastePerCover(waste, props.wastePerSales.xAxis)\n      const foodWaste = addGap(waste);\n      setFoodWaste(foodWaste)\n\n      const foodWasteXaxis = addGap(props.wastePerSales.xAxis, \"xaxis\");\n      setFoodWasteXaxis(foodWasteXaxis)\n\n      // const allFoodWaste = addGap(props.wastePerSales.wastePerSalesForAllWaste);\n      const spoilageFoodWaste = addGap(props.wastePerSales.wastePerSalesForSpoilageWaste);\n      const prepFoodWaste = addGap(props.wastePerSales.wastePerSalesForPreparationWaste);\n      const coverFoodWaste = addGap(props.wastePerSales.wastePerSalesForCoverWaste);\n\n      setForAllWaste(foodWaste)\n      setCoverWaste(coverFoodWaste)\n      setPreparationWaste(prepFoodWaste)\n      setSpoilageWaste(spoilageFoodWaste)\n\n      setDatesBeforeFormating(props.wastePerSales.xAxis)\n      // separateWastePerCover(props.wastePerCover, props.wastePerCover.xAxis)\n\n      setTotalCW(props.wastePerSales.totalCW)\n      setTotalPW(props.wastePerSales.totalPW)\n      setTotalSW(props.wastePerSales.totalSW)\n      setTotalWaste(props.wastePerSales.totalWaste)\n      setXaxis(props.wastePerSales.xAxis)\n      setMonthName(props.wastePerSales.monthsName)\n      setTotalSalesInputs(props.wastePerSales.totalSalesInput)\n\n      setDisplay(props.wastePerSales.wastePerSalesForAllWaste)\n\n      setPercentageOfInputsAreZeros(props.wastePerSales.percentageOfInputsAreZeros)\n\n      // setForAllWaste(props.wastePerSales.wastePerSalesForAllWaste)\n      // setCoverWaste(props.wastePerSales.wastePerSalesForCoverWaste)\n      // setPreparationWaste(props.wastePerSales.wastePerSalesForPreparationWaste)\n      // setSpoilageWaste(props.wastePerSales.wastePerSalesForSpoilageWaste)\n\n      setSiteName(props.wastePerSales.siteName)\n    }\n\n    setSearchError(props.searchErrorForWastePerSales)\n    setSelectedYear(props.selectedYearForWastePerSales)\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[props.wastePerSales, props.searchError, props.monthlyArray, props.yearlyArray, props.siteName])\n\n  const addGap = (dataSet, type) => {\n\n    Array.prototype.insert = function ( index, item ) {\n      this.splice( index, 0, item );\n    };\n\n    let array = dataSet;\n\n    if (dataSet !== undefined) {\n      // console.log(\"dataSet.lengt\",dataSet.length)\n      for (let i = 7; i <= dataSet.length; i += 8) {\n        // console.log(\"i\",i)\n        const value = type === \"xaxis\" ? \"\" : null;\n        array.insert(i, value);\n      }\n    }\n\n    return array;\n\n  }\n\n\n  // const separateWastePerCover = (waste, xAxis) => {\n\n  //   if (waste !== undefined) {\n  //     // console.log(\"waste\",waste.wastePerCoverForAllWaste)\n  //     // console.log(\"xAxis\",xAxis);\n  //     // let waste = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31]\n  //     // let dates = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31]\n  //     // let waste = [1, 2, 3, 4, 5]\n  //     // let dates = [1, 2, 3, 4, 5]\n  //     // const formatedCW = filterByWeeks(waste, dates)\n\n  //     const formatedWastesData = filterByWeeks(waste, xAxis)\n  //     // console.log(\"formatedWastesData\",formatedWastesData);\n  //     const dates = spitDatesIntoArray(formatedWastesData.newArrayForDates)\n  //     setDatesLabel(dates);\n\n  //     setWeekOneArray(formatedWastesData.sevenArraysForChart.reformatedArrayOne)\n  //     setWeekTwoArray(formatedWastesData.sevenArraysForChart.reformatedArrayTwo)\n  //     setWeekThreeArray(formatedWastesData.sevenArraysForChart.reformatedArrayThree)\n  //     setWeekFourArray(formatedWastesData.sevenArraysForChart.reformatedArrayFour)\n  //     setWeekFiveArray(formatedWastesData.sevenArraysForChart.reformatedArrayFive)\n  //     setWeekSixArray(formatedWastesData.sevenArraysForChart.reformatedArraySix)\n  //     setWeekSevenArray(formatedWastesData.sevenArraysForChart.reformatedArraySeven)\n\n  //     setDates(formatedWastesData.newArrayForDates)\n  //   }\n  // }\n\n  const spitDatesIntoArray = (data) => {\n    let arrayOfDates = [];\n    data.map((item) => {\n      const splitItem = item.split(\",\");\n      arrayOfDates.push(splitItem)\n      return \"\"\n    });\n    return arrayOfDates;\n  };\n\n  const filterByWeeks = (wastes, xAxis) => {\n    const numOfCoverPerWaste = wastes.length\n    const dates = xAxis;\n    const howManyWeeksinTheArray = (numOfCoverPerWaste / 7);\n    // console.log(\"howManyWeeksinTheArray\",howManyWeeksinTheArray)\n    // console.log(\"dates\",dates)\n    // console.log(\"numOfCoverPerWaste\",numOfCoverPerWaste)\n    let newArray;\n    let newArrayForDates = []\n\n    if (howManyWeeksinTheArray <= 1) {\n\n      // console.log(\"1 week only\")\n      const datesInWeekOne = []\n\n      let num\n      for (num = 0; num <= 6; ++num) {\n        datesInWeekOne.push(dates[num])\n      }\n\n      const turnDatesToString = datesInWeekOne.join()\n      newArrayForDates.push(turnDatesToString)\n\n      const sevenArraysForChart = reformatDataToShowWastePerWeek(wastes, numOfCoverPerWaste)\n\n      newArray = {\n        newArrayForDates,\n        sevenArraysForChart\n      }\n\n    } else if (howManyWeeksinTheArray > 1 && howManyWeeksinTheArray <= 2) {\n      // console.log(\"2 weeks only\")\n\n      const datesInWeekOne = []\n      const datesInWeekTwo = []\n\n      let num;\n      for (num = 0; num <= 6; ++num) {\n        datesInWeekOne.push(dates[num])\n      }\n\n      let numTwo;\n      for (numTwo = 7; numTwo <= dates.length - 1; ++numTwo) {\n        datesInWeekTwo.push(dates[numTwo])\n      }\n\n      let turnDatesToString;\n\n      turnDatesToString = datesInWeekOne.join()\n      newArrayForDates.push(turnDatesToString)\n\n      turnDatesToString = datesInWeekTwo.join()\n      newArrayForDates.push(turnDatesToString)\n\n      const sevenArraysForChart = reformatDataToShowWastePerWeek(wastes, numOfCoverPerWaste)\n\n      newArray = {\n        newArrayForDates,\n        sevenArraysForChart\n      }\n\n    } else if (howManyWeeksinTheArray > 2 && howManyWeeksinTheArray <= 3) {\n    // console.log(\"3 weeks only\")\n\n      const datesInWeekOne = []\n      const datesInWeekTwo = []\n      const datesInWeekThree = []\n\n      let num\n      for (num = 0; num <= 6; ++num) {\n        datesInWeekOne.push(dates[num])\n      }\n\n      let numTwo\n      for (numTwo = 7; numTwo <= 13; ++numTwo) {\n        datesInWeekTwo.push(dates[numTwo])\n      }\n\n      let numThree\n      for (numThree = 14; numThree <= dates.length - 1; ++numThree) {\n        datesInWeekThree.push(dates[numThree])\n      }\n\n      let turnDatesToString;\n\n      turnDatesToString = datesInWeekOne.join()\n      newArrayForDates.push(turnDatesToString)\n\n      turnDatesToString = datesInWeekTwo.join()\n      newArrayForDates.push(turnDatesToString)\n\n      turnDatesToString = datesInWeekThree.join()\n      newArrayForDates.push(turnDatesToString)\n\n      const sevenArraysForChart = reformatDataToShowWastePerWeek(wastes, numOfCoverPerWaste)\n\n      newArray = {\n        newArrayForDates,\n        sevenArraysForChart\n      }\n\n\n    } else if (howManyWeeksinTheArray > 3 && howManyWeeksinTheArray <= 4) {\n    // console.log(\"4 weeks only\")\n\n      const datesInWeekOne = []\n      const datesInWeekTwo = []\n      const datesInWeekThree = []\n      const datesInWeekFour = []\n\n      let num\n      for (num = 0; num <= 6; ++num) {\n        datesInWeekOne.push(dates[num])\n      }\n\n      let numTwo\n      for (numTwo = 7; numTwo <= 13; ++numTwo) {\n        datesInWeekTwo.push(dates[numTwo])\n      }\n\n      let numThree\n      for (numThree = 14; numThree <= 20; ++numThree) {\n        datesInWeekThree.push(dates[numThree])\n      }\n\n      let numFour\n      for (numFour = 21; numFour <= dates.length - 1; ++numFour) {\n        datesInWeekFour.push(dates[numFour])\n      }\n\n      let turnDatesToString;\n\n      turnDatesToString = datesInWeekOne.join()\n      newArrayForDates.push(turnDatesToString)\n\n      turnDatesToString = datesInWeekTwo.join()\n      newArrayForDates.push(turnDatesToString)\n\n      turnDatesToString = datesInWeekThree.join()\n      newArrayForDates.push(turnDatesToString)\n\n      turnDatesToString = datesInWeekFour.join()\n      newArrayForDates.push(turnDatesToString)\n\n      const sevenArraysForChart = reformatDataToShowWastePerWeek(wastes, numOfCoverPerWaste)\n\n      newArray = {\n        newArrayForDates,\n        sevenArraysForChart\n      }\n\n    } else if (howManyWeeksinTheArray > 4) {\n    // console.log(\"5 weeklys only\")\n\n      const datesInWeekOne = []\n      const datesInWeekTwo = []\n      const datesInWeekThree = []\n      const datesInWeekFour = []\n      const datesInWeekFive = []\n\n      let num\n      for (num = 0; num <= 6; ++num) {\n        datesInWeekOne.push(dates[num])\n      }\n\n      let numTwo\n      for (numTwo = 7; numTwo <= 13; ++numTwo) {\n        datesInWeekTwo.push(dates[numTwo])\n      }\n\n      let numThree\n      for (numThree = 14; numThree <= 20; ++numThree) {\n        datesInWeekThree.push(dates[numThree])\n      }\n\n      let numFour\n      for (numFour = 21; numFour <= 27; ++numFour) {\n        datesInWeekFour.push(dates[numFour])\n      }\n\n      let numFive\n      for (numFive = 28; numFive <= dates.length - 1; ++numFive) {\n        datesInWeekFive.push(dates[numFive])\n      }\n\n      let turnDatesToString;\n\n      turnDatesToString = datesInWeekOne.join()\n      newArrayForDates.push(turnDatesToString)\n\n      turnDatesToString = datesInWeekTwo.join()\n      newArrayForDates.push(turnDatesToString)\n\n      turnDatesToString = datesInWeekThree.join()\n      newArrayForDates.push(turnDatesToString)\n\n      turnDatesToString = datesInWeekFour.join()\n      newArrayForDates.push(turnDatesToString)\n\n      turnDatesToString = datesInWeekFive.join()\n      newArrayForDates.push(turnDatesToString)\n\n      const sevenArraysForChart = reformatDataToShowWastePerWeek(wastes, numOfCoverPerWaste)\n\n    newArray = {\n      newArrayForDates,\n      sevenArraysForChart\n    }\n    }\n\n    return newArray;\n  }\n\n  const reformatDataToShowWastePerWeek = (wastes, numOfCoverPerWaste) => {\n    const arrayOne = [];\n    const arrayTwo = [];\n    const arrayThree = [];\n    const arrayFour = [];\n    const arrayFive = [];\n    const arraySix = [];\n    const arraySeven = [];\n\n    let numOne;\n    for (numOne = 0; numOne <= numOfCoverPerWaste; numOne += 7) {\n      arrayOne.push(wastes[numOne])\n    }\n\n    let numTwo;\n    for (numTwo = 1; numTwo <= numOfCoverPerWaste; numTwo += 7) {\n      arrayTwo.push(wastes[numTwo])\n    }\n\n    let numThree;\n    for (numThree = 2; numThree <= numOfCoverPerWaste; numThree += 7) {\n      arrayThree.push(wastes[numThree])\n    }\n\n    let numFour;\n    for (numFour = 3; numFour <= numOfCoverPerWaste; numFour += 7) {\n      arrayFour.push(wastes[numFour])\n    }\n\n    let numFive;\n    for (numFive = 4; numFive <= numOfCoverPerWaste; numFive += 7) {\n      arrayFive.push(wastes[numFive])\n    }\n\n    let numSix;\n    for (numSix = 5; numSix <= numOfCoverPerWaste; numSix += 7) {\n      arraySix.push(wastes[numSix])\n    }\n\n    let numSeven;\n    for (numSeven = 6; numSeven <= numOfCoverPerWaste; numSeven += 7) {\n      arraySeven.push(wastes[numSeven])\n    }\n\n    const reformatedArrayOne = arrayOne.filter((data) => {\n      return data !== undefined;\n    })\n\n      // console.log(\"reformatedArrayOne\", reformatedArrayOne)\n\n    const reformatedArrayTwo = arrayTwo.filter((data) => {\n      return data !== undefined;\n    })\n\n      // console.log(\"reformatedArrayTwo\", reformatedArrayTwo)\n\n    const reformatedArrayThree = arrayThree.filter((data) => {\n      return data !== undefined;\n    })\n\n      // console.log(\"reformatedArrayThree\", reformatedArrayThree)\n\n    const reformatedArrayFour = arrayFour.filter((data) => {\n      return data !== undefined;\n    })\n\n      // console.log(\"reformatedArrayFour\", reformatedArrayFour)\n\n    const reformatedArrayFive = arrayFive.filter((data) => {\n      return data !== undefined;\n    })\n\n      // console.log(\"reformatedArrayFive\", reformatedArrayFive)\n\n    const reformatedArraySix = arraySix.filter((data) => {\n      return data !== undefined;\n    })\n\n      // console.log(\"reformatedArraySix\", reformatedArraySix)\n\n    const reformatedArraySeven = arraySeven.filter((data) => {\n      return data !== undefined;\n    })\n\n    // console.log(\"reformatedArraySeven\", reformatedArraySeven)\n\n    const results = {\n      reformatedArrayOne,\n      reformatedArrayTwo,\n      reformatedArrayThree,\n      reformatedArrayFour,\n      reformatedArrayFive,\n      reformatedArraySix,\n      reformatedArraySeven\n    }\n\n    return results;\n  }\n\n\n  const handleSearch = () => {\n\n    const monthlyIndexArray = montlyArray.filter((data) => {\n      return data.show;\n    });\n\n    const yearlyIndexArray = yearlyArray.filter((data) => {\n      return data.show;\n    });\n\n    const data = {\n      monthlyIndex: monthlyIndexArray[0].index,\n      yearlyIndex: yearlyIndexArray[0].year\n    }\n\n    props.handleSearch(data, \"wastePerSales\")\n  }\n\n  const handleYearly = (step) => {\n\n    let getIndex;\n    let highestIndex = yearlyArray.length - 1;\n\n    yearlyArray.find((data) => {\n      if (data.show === true) {\n        getIndex = yearlyArray.indexOf(data)\n      }\n      return \"\"\n    })\n\n\n    if (step === \"NEXT\" && getIndex !== highestIndex) {\n\n      yearlyArray.map((data) => {\n          let index = yearlyArray.indexOf(data)\n\n          if (index === getIndex + 1) {\n            data.show = true;\n            return \"\"\n          } else {\n            data.show = false;\n            return \"\"\n          }\n\n      })\n\n    } else if (step === \"PREV\" && getIndex !== 0) {\n\n      yearlyArray.map((data) => {\n        let index = yearlyArray.indexOf(data)\n\n        if (index === getIndex - 1) {\n          data.show = true\n          return \"\"\n        } else {\n          data.show = false\n          return \"\"\n        }\n      })\n    }\n\n    setYearlyArray(yearlyArray)\n\n    setCount((prevCount) => {\n      return prevCount + 1\n    })\n  }\n\n  const handleMonthly = (step, name) => {\n\n    // console.log(\"here\")\n\n    let getIndex;\n\n    montlyArray.find((data) => {\n    if (data.show === true) {\n        getIndex = data.index\n    }\n    return \"\"\n    })\n\n    ///NEXT\n    if (step === \"NEXT\" && getIndex !== 12) {\n\n        montlyArray.map((data) => {\n        if (data.index <= 12) {\n            if (data.index === getIndex + 1) {\n            data.show = true;\n            } else {\n            data.show = false;\n            }\n        }\n        return \"\"\n        })\n\n    } else if (step === \"PREV\" && getIndex !== 1) {\n        ///PREV\n\n        montlyArray.map((data) => {\n        if (data.index <= 12) {\n            if (data.index === getIndex - 1) {\n            data.show = true;\n            } else {\n            data.show = false;\n            }\n        }\n        return \"\"\n        })\n    }\n\n\n    setMonthArray(montlyArray)\n\n    setCount((prevCount) => {\n      return prevCount + 1\n    })\n\n  }\n\n\n  function toggleActive(type) {\n\n    switch (type) {\n      case \"coverSelector\":\n\n        changeActiveState({\n          coverSelector: true,\n          spoilageSelector: false,\n          preparationSelector: false,\n          allSelector: false,\n        });\n\n        // const coverfoodWaste = addGap(wastePerSalesForCoverWaste);\n        setFoodWaste(wastePerSalesForCoverWaste)\n\n        setWasteSteamValue(coverWasteDataArray)\n\n        break;\n      case \"spoilageSelector\":\n\n        changeActiveState({\n          coverSelector: false,\n          spoilageSelector: true,\n          preparationSelector: false,\n          allSelector: false,\n        });\n\n        // const spoilagefoodWaste = addGap(wastePerSalesForSpoilageWaste);\n        setFoodWaste(wastePerSalesForSpoilageWaste)\n\n        setWasteSteamValue(spoilageWasteDataArray)\n\n        break;\n      case \"preparationSelector\":\n\n        changeActiveState({\n          coverSelector: false,\n          spoilageSelector: false,\n          preparationSelector: true,\n          allSelector: false,\n        });\n\n        // const prepfoodWaste = addGap(wastePerSalesForPreparationWaste);\n        setFoodWaste(wastePerSalesForPreparationWaste)\n\n        setWasteSteamValue(preparationWasteDataArray)\n\n        break;\n      case \"allSelector\":\n\n        changeActiveState({\n          coverSelector: false,\n          spoilageSelector: false,\n          preparationSelector: false,\n          allSelector: true,\n        });\n\n        // const allfoodWaste = addGap(wastePerSalesForAllWaste);\n        setFoodWaste(wastePerSalesForAllWaste)\n\n        setWasteSteamValue(totalDailyWasteDataArray)\n\n        break;\n      default:\n    }\n\n    setTooltip(false)\n  }\n\n    return (\n    <WastePerSalesContext.Provider\n        value={{\n          activeState,\n          toggleActive,\n          yearlyArray,\n          montlyArray,\n          handleYearly,\n          handleMonthly,\n          count,\n\n          totalCW,\n          totalPW,\n          totalSW,\n          totalWaste,\n          xAxis,\n          display,\n          totalSalesInputs,\n          percentageOfInputsAreZeros,\n          monthName,\n\n          selectedYear,\n\n          handleSearch,\n          searchError,\n          siteName,\n\n          // weekOneArray,\n          // weekTwoArray,\n          // weekThreeArray,\n          // weekFourArray,\n          // weekFiveArray,\n          // weekSixArray,\n          // weekSevenArray,\n          dates,\n\n          datesLabel,\n\n          foodWaste,\n          foodWasteXaxis,\n\n          wasteSteamValue,\n          salesInputDataArray,\n          showTooltip\n        }}\n    >\n        {props.children}\n    </WastePerSalesContext.Provider>\n    )\n}\n\nexport default WastePerSalesContextProvider"]},"metadata":{},"sourceType":"module"}