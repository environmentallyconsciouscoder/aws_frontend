{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/app.js\";\nimport React, { useState } from \"react\";\nimport Routes from \"./routes\";\nimport { withRouter } from \"react-router-dom\";\nimport MainNavigation from \"./shared/components/navigation/main-navigation\";\nimport { getMasterTableData } from \"./api\";\nimport { getMonthAsAnumber, getYear } from \"./utilities\";\nimport UsersInformation from \"./shared/components/libs/use-user-information\";\nimport CompanyInformation from \"./shared/components/libs/use-company-information\";\nimport useGetRequests from \"./shared/components/libs/use-get-request\";\nimport KgPoundsConverter from \"./shared/components/libs/use-kg-pounds-converter\";\nimport WasteCapContextProvider from \"./contexts/waste-cap-context\";\nimport TotalWasteContextProvider from \"./contexts/total-waste-context\";\nimport MonthlyWasteContextProvider from \"./contexts/monthly-waste-context\";\nimport WeeklyWasteTrendProvider from \"./contexts/weekly-trends-context\";\nimport DailyWasteContextProvider from \"./contexts/daily-waste-context\";\nimport DashboardContextProvider from \"./contexts/dashboard-context\";\nimport WastePerCoverContextProvider from \"./contexts/waste-per-cover-context\";\nimport WastePerSalesContextProvider from \"./contexts/waste-per-sales-context\";\nimport WeeklyWasteContextProvider from \"./contexts/weekly-waste-context\";\nimport TargetContextProvider from \"./contexts/target-context\";\nimport HourlyFoodWasteContextProvider from \"./contexts/hourly-food-waste-context\";\nimport AiPredictionDataContextProvider from \"./contexts/ai-prediction-data-context\";\nimport WasteOnAdayOfTheWeekProvider from \"./contexts/waste-on-a-day-of-the-week-context\";\nimport InputsContextProvider from \"./contexts/inputs-context\";\nimport DailySalesVsWasteInputsProvider from \"./contexts/daily-sales-vs-waste-context\";\nimport PerformanceSummaryProvider from \"./contexts/performance-summary-context\";\nimport ProductionPreparationProvider from \"./contexts/production-preparation-context\";\nimport EventProductionWasteProvider from \"./contexts/event-production-waste-context\";\nimport WasteLabelsContextProvider from \"./contexts/waste-labels-context\";\nimport LiveFeedContextProvider from \"./contexts/live-feed-context\";\n\nfunction App() {\n  const [mySiteId, setMySiteId] = React.useState();\n  const {\n    saveUserType,\n    getUserDetails,\n    getNoOfUsersCreated,\n    userType,\n    userDetail,\n    noOfUsers,\n    isAuthenticated,\n    userHasAuthenticated,\n    saveLoginTime,\n    getTheLoginTimeFromUsers,\n    superAdminCreatedUsers\n  } = UsersInformation();\n  const {\n    startDate,\n    setStartDate,\n    companyID,\n    setCompanyID,\n    selectedSiteValueID,\n    setSelectedValueID,\n    companyName,\n    setcompanyName,\n    getCurrentMonthlyAndYear,\n    yearlyArray,\n    monthlyArr,\n    siteName,\n    setSiteName,\n    carbonMunicipalValue,\n    setCarbonMunicipalValue\n  } = CompanyInformation();\n  const {\n    //call input for covers and sales\n    callCoverInput,\n    callSalesInput,\n    thisWeekCoverInputs,\n    thisWeekSalesInput,\n    allWeekSalesInput,\n    allWeekCoverInput,\n    //TARGETS RECOMMENDATION\n    getTargetsData,\n    recommendedTargets,\n    //WASTE PER COVER\n    callWastePerCover,\n    wastePerCover,\n    searchError,\n    selectedYear,\n    setSelectedYear,\n    selectedMonth,\n    setSelectedMonth,\n    spinner,\n    showSpinner,\n    //WASTE PER SALES\n    callWastePerSales,\n    wastePerSales,\n    searchErrorForWastePerSales,\n    selectedYearForWastePerSales,\n    //MONTHLY WASTE\n    callMonthlyWastesAPI,\n    coverWasteInCurrentMonth,\n    preparationWasteInCurrentMonth,\n    spoilageWasteInCurrentMonth,\n    currentMonthCoverWasteArray,\n    currentMonthPrepWasteArray,\n    currentMonthSpoilageWasteArray,\n    coverMonthlyChanges,\n    prepMonthlyChanges,\n    spoilageMonthlyChanges,\n    monthlyChanges,\n    //CALL ALL SITES DATA\n    getAllSites,\n    allSites,\n    totalWasteFromSelectedSite,\n    // CALL WEEKLY WASTE API\n    callWeeklyWasteAPI,\n    weeklyWaste,\n    weeklyTrend,\n    //AI PREDICTION\n    getAiPrediction,\n    aiPredictionsData,\n    //CAPPING API\n    callGetCappingAPI,\n    cappingValue,\n    //daily and hourly\n    callDailyAndWeeklyDatesData,\n    dailyWaste,\n    hourlyWaste,\n    //mon-sun x-axis labels\n    weeklyDailyLabels,\n    //date range e..g 12-19 July\n    weeklyDailyRange,\n    weeklyWasteValuesForCurrentWeekAndLastWeek\n  } = useGetRequests();\n  const {\n    showPounds,\n    kgPoundsConverter\n  } = KgPoundsConverter();\n  const [showHamburgerButton, setShowHamburgerButton] = useState(false);\n  let [updateGraph, setUpdateGraph] = useState(0);\n  let [index, setIndex] = useState(0);\n\n  const changeIndex = index => {\n    setIndex(index);\n  }; //THE FUNCTION TRIGGERS WHEN SEARCHING THE DATA FROM A PARTICULAR MONTH OR YEAR\n\n\n  const handleSearch = (data, type) => {\n    const monthly = data.monthlyIndex;\n    const yearly = data.yearlyIndex;\n\n    switch (type) {\n      case \"wastePerCover\":\n        setSelectedMonth(monthly);\n        showSpinner();\n        callWastePerCover(companyID, companyName, selectedSiteValueID, monthly, yearly);\n        break;\n\n      case \"wastePerSales\":\n        setSelectedMonth(monthly);\n        showSpinner();\n        callWastePerSales(companyID, companyName, selectedSiteValueID, monthly, yearly);\n        break;\n\n      default: // code block\n\n    }\n  }; //THE FUNCTION TRIGGERS WHEN THE FORMS ARE UPDATING\n\n\n  const updateValues = type => {\n    switch (type) {\n      case \"COVER INPUTS\":\n        callCoverInput(companyID, companyName, selectedSiteValueID);\n        callWastePerCover(companyID, companyName, selectedSiteValueID, selectedMonth, selectedYear);\n        break;\n\n      case \"SALES INPUTS\":\n        callSalesInput(companyID, companyName, selectedSiteValueID);\n        callWastePerSales(companyID, companyName, selectedSiteValueID, selectedMonth, selectedYear);\n        break;\n\n      case \"TARGETS\":\n        getTargetsData(companyID, companyName, selectedSiteValueID);\n        break;\n\n      case \"UPDATE GRAPH\":\n        setUpdateGraph(updateGraph + 1);\n        break;\n\n      default:\n        setUpdateGraph(true);\n      // code block\n    }\n  }; //THE FUNCTION TRIGGERS WHEN SWITCH TO A DIFFERENT SITE\n\n\n  const handleSiteIDchange = event => {\n    showSpinner();\n    const siteNameSelected = event.target.value;\n    setMySiteId(siteNameSelected);\n    const siteName = siteNameSelected.replace(/[^A-Za-z]+/g, '').toLowerCase();\n    setSelectedValueID(siteNameSelected);\n    setSiteName(siteName);\n    const monthNumber = getMonthAsAnumber();\n    const year = getYear(); // console.log(\"siteNameSelected\",siteNameSelected)\n    // console.log(\"companyID\",companyID)\n    // console.log(\"companyName\",companyName)\n    // console.log(\"year\",year)\n    // console.log(\"monthNumber\",monthNumber)\n\n    getCurrentMonthlyAndYear(startDate);\n    callMonthlyWastesAPI(companyID, companyName, siteNameSelected);\n    callWeeklyWasteAPI(companyID, companyName, siteNameSelected);\n    callWastePerCover(companyID, companyName, siteNameSelected, monthNumber, year);\n    callWastePerSales(companyID, companyName, siteNameSelected, monthNumber, year);\n    callCoverInput(companyID, companyName, siteNameSelected);\n    callSalesInput(companyID, companyName, siteNameSelected);\n    callGetCappingAPI(companyID, companyName, siteNameSelected);\n    getAllSites(companyID, companyName, siteNameSelected);\n    callDailyAndWeeklyDatesData(companyID, companyName, siteNameSelected);\n    getTargetsData(companyID, companyName, siteNameSelected);\n    getAiPrediction(companyID, companyName, siteNameSelected);\n  }; //THE FUNCTION TRIGGERS WHEN USER LOGIN\n\n\n  const getAllData = (companyName, email, userDetails, companyId) => {\n    showSpinner();\n    let response;\n    getMasterTableData(companyName, companyId).then(res => {\n      response = res;\n      const companyId = response.companyId;\n      const allSites = response.sites;\n      const startDate = response.startDate;\n      const carbonMunicipalValue = response.carbonMunicipalValue; // console.log(\"companyId\", companyId)\n      // console.log(\"allSites\", allSites)\n      //save user information\n\n      saveLoginTime(userDetails, companyId);\n      getTheLoginTimeFromUsers(companyId, companyName); //save company information\n\n      setStartDate(startDate);\n      setCompanyID(companyId);\n      setcompanyName(companyName);\n      setCarbonMunicipalValue(carbonMunicipalValue);\n      const sitesID = Object.entries(allSites).map(([attribute, item]) => {\n        return attribute;\n      }).reverse();\n      setMySiteId(sitesID[0]); //You need to change sitesID[1] back to sitesID[0] because it will break there is only one site\n\n      setSelectedValueID(sitesID[0]);\n      const currentMonthNumber = getMonthAsAnumber();\n      setSelectedMonth(currentMonthNumber);\n      const currentYear = getYear();\n      setSelectedYear(currentYear);\n      callWastePerCover(companyId, companyName, sitesID[0], currentMonthNumber, currentYear);\n      callWastePerSales(companyId, companyName, sitesID[0], currentMonthNumber, currentYear);\n      callMonthlyWastesAPI(companyId, companyName, sitesID[0]);\n      getAllSites(companyId, companyName, sitesID[0]);\n      callWeeklyWasteAPI(companyId, companyName, sitesID[0]);\n      getTargetsData(companyId, companyName, sitesID[0]);\n      getAiPrediction(companyId, companyName, sitesID[0]);\n      callGetCappingAPI(companyId, companyName, sitesID[0]);\n      const date = new Date();\n      const numberInDay = date.getDay();\n      const indexForNumberInDay = numberInDay === 0 ? 6 : numberInDay - 1;\n      callDailyAndWeeklyDatesData(companyId, companyName, sitesID[0], indexForNumberInDay); //get data for the form\n\n      callCoverInput(companyId, companyName, sitesID[0]);\n      callSalesInput(companyId, companyName, sitesID[0]); //get waste on a day of the week\n      // getWasteOnAdayOfTheWeekAPI(companyId, companyName, sitesID[0], 0, currentYear)\n\n      getCurrentMonthlyAndYear(response.startDate);\n      setShowHamburgerButton(true);\n    }).catch(error => {\n      console.log(\"error from master table\", error);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, spinner, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(WasteLabelsContextProvider, {\n    companyId: companyID,\n    companyName: companyName,\n    siteName: mySiteId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputsContextProvider, {\n    companyId: companyID,\n    companyName: companyName,\n    selectedSiteValueID: selectedSiteValueID,\n    thisWeekCoverInputs: thisWeekCoverInputs,\n    thisWeekSalesInput: thisWeekSalesInput,\n    updateValues: updateValues,\n    allWeekSalesInput: allWeekSalesInput,\n    allWeekCoverInput: allWeekCoverInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DailySalesVsWasteInputsProvider, {\n    siteName: mySiteId,\n    companyId: companyID,\n    companyName: companyName,\n    updateGraph: updateGraph // weeklyDailyRange={weeklyDailyRange}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ProductionPreparationProvider, {\n    siteName: mySiteId,\n    companyId: companyID,\n    companyName: companyName,\n    updateValues: updateValues,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(WasteOnAdayOfTheWeekProvider, {\n    siteName: mySiteId,\n    companyId: companyID,\n    companyName: companyName,\n    totalWasteFromSelectedSite: totalWasteFromSelectedSite,\n    startDate: startDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TargetContextProvider, {\n    aiPredictionsData: aiPredictionsData,\n    recommendedTargets: recommendedTargets,\n    currentMonthCoverWasteArray: currentMonthCoverWasteArray,\n    currentMonthPrepWasteArray: currentMonthPrepWasteArray,\n    currentMonthSpoilageWasteArray: currentMonthSpoilageWasteArray,\n    carbonMunicipalValue: carbonMunicipalValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(WasteCapContextProvider, {\n    companyName: companyName,\n    selectedSiteValueID: selectedSiteValueID,\n    companyID: companyID,\n    cappingValue: cappingValue,\n    showPounds: showPounds,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MainNavigation, {\n    appProps: {\n      isAuthenticated,\n      userHasAuthenticated,\n      kgPoundsConverter\n    },\n    siteName: mySiteId,\n    userDetail: userDetail,\n    showHamburgerButton: showHamburgerButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(TotalWasteContextProvider, {\n    siteName: siteName // totalWasteFromSite={totalWasteFromSite}\n    ,\n    allSites: allSites,\n    totalWasteFromSelectedSite: totalWasteFromSelectedSite,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(WastePerCoverContextProvider, {\n    startDate: startDate,\n    handleSearch: handleSearch,\n    monthlyArray: monthlyArr,\n    yearlyArray: yearlyArray,\n    wastePerCover: wastePerCover,\n    searchError: searchError,\n    selectedYear: selectedYear,\n    companyId: companyID,\n    companyName: companyName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(WastePerSalesContextProvider, {\n    siteName: mySiteId,\n    wastePerSales: wastePerSales,\n    monthlyArray: monthlyArr,\n    yearlyArray: yearlyArray,\n    handleSearch: handleSearch,\n    searchErrorForWastePerSales: searchErrorForWastePerSales,\n    selectedYearForWastePerSales: selectedYearForWastePerSales,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(EventProductionWasteProvider, {\n    companyId: companyID,\n    companyName: companyName,\n    siteName: mySiteId,\n    updateGraph: updateGraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DashboardContextProvider // monthlySelectedValue={monthlySelectedValue}\n  // selectedValue={selectedValue}\n  , {\n    siteName: siteName,\n    companyName: companyName,\n    sites: allSites // handleMonthlyValues={handleMonthlyValues}\n    // displayMonthlyValue={displayMonthlyValue}\n    // allMonthlyData={allMonthlyData}\n    // monthlyChartMaxValue={monthlyChartMaxValue}\n    // monthlyChangesValue={monthlyChangesValue}\n    ,\n    startDate: startDate,\n    showPounds: showPounds // userEmail={userEmail}\n    // adminType={adminType}\n    // totalMonthlyWaste={totalMonthlyWaste}\n    // clickOnMonthlyBarChart={clickOnMonthlyBarChart}\n    ,\n    changeIndex: changeIndex,\n    userType: userType,\n    userDetail: userDetail // sitesID={sitesID}\n    ,\n    handleSiteIDchange: handleSiteIDchange,\n    selectedSiteValueID: selectedSiteValueID,\n    companyID: companyID,\n    thisWeekCoverInputs: thisWeekCoverInputs,\n    weeklyDailyLabels: weeklyDailyLabels,\n    weeklyDailyRange: weeklyDailyRange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(AiPredictionDataContextProvider, {\n    companyName: companyName,\n    siteName: siteName,\n    aiPredictionsData: aiPredictionsData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(HourlyFoodWasteContextProvider, {\n    companyName: companyName,\n    index: index,\n    hourlyWaste: hourlyWaste,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DailyWasteContextProvider, {\n    siteName: siteName // siteChange={siteChange}\n    // dailyWasteData={dailyWasteData}\n    // dailyCoverWaste={dailyCoverWaste}\n    // dailyPreparationWaste={dailyPreparationWaste}\n    // dailySpoilageWaste={dailySpoilageWaste}\n    // weeklyDailyWaste={weeklyDailyWaste}\n    ,\n    showPounds: showPounds,\n    dailyWaste: dailyWaste,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(WeeklyWasteTrendProvider, {\n    companyName: companyName,\n    siteName: siteName,\n    weeklyWasteValuesForCurrentWeekAndLastWeek: weeklyWasteValuesForCurrentWeekAndLastWeek,\n    weeklyTrend: weeklyTrend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(WeeklyWasteContextProvider, {\n    weeklyWaste: weeklyWaste,\n    siteName: siteName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MonthlyWasteContextProvider, {\n    companyName: companyName,\n    siteName: siteName,\n    companyID: companyID // selectedSiteID={selectedSiteID}\n    ,\n    coverWasteInCurrentMonth: coverWasteInCurrentMonth,\n    preparationWasteInCurrentMonth: preparationWasteInCurrentMonth,\n    spoilageWasteInCurrentMonth: spoilageWasteInCurrentMonth,\n    currentMonthCoverWasteArray: currentMonthCoverWasteArray,\n    currentMonthPrepWasteArray: currentMonthPrepWasteArray,\n    currentMonthSpoilageWasteArray: currentMonthSpoilageWasteArray,\n    coverMonthlyChanges: coverMonthlyChanges,\n    prepMonthlyChanges: prepMonthlyChanges,\n    spoilageMonthlyChanges: spoilageMonthlyChanges,\n    monthlyChanges: monthlyChanges,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(PerformanceSummaryProvider, {\n    companyID: companyID,\n    companyName: companyName,\n    siteName: mySiteId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Routes, {\n    appProps: {\n      siteName,\n      getUserDetails,\n      isAuthenticated,\n      userHasAuthenticated,\n      getAllData,\n      saveUserType,\n      companyName,\n      userType,\n      getNoOfUsersCreated,\n      noOfUsers,\n      userDetail,\n      companyID,\n      superAdminCreatedUsers,\n      selectedSiteValueID,\n      thisWeekCoverInputs,\n      thisWeekSalesInput,\n      // updateValues,\n      callGetCappingAPI,\n      recommendedTargets,\n      updateValues,\n      startDate,\n      carbonMunicipalValue\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 11\n    }\n  }))))))))))))))))))))));\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/app.js"],"names":["React","useState","Routes","withRouter","MainNavigation","getMasterTableData","getMonthAsAnumber","getYear","UsersInformation","CompanyInformation","useGetRequests","KgPoundsConverter","WasteCapContextProvider","TotalWasteContextProvider","MonthlyWasteContextProvider","WeeklyWasteTrendProvider","DailyWasteContextProvider","DashboardContextProvider","WastePerCoverContextProvider","WastePerSalesContextProvider","WeeklyWasteContextProvider","TargetContextProvider","HourlyFoodWasteContextProvider","AiPredictionDataContextProvider","WasteOnAdayOfTheWeekProvider","InputsContextProvider","DailySalesVsWasteInputsProvider","PerformanceSummaryProvider","ProductionPreparationProvider","EventProductionWasteProvider","WasteLabelsContextProvider","LiveFeedContextProvider","App","mySiteId","setMySiteId","saveUserType","getUserDetails","getNoOfUsersCreated","userType","userDetail","noOfUsers","isAuthenticated","userHasAuthenticated","saveLoginTime","getTheLoginTimeFromUsers","superAdminCreatedUsers","startDate","setStartDate","companyID","setCompanyID","selectedSiteValueID","setSelectedValueID","companyName","setcompanyName","getCurrentMonthlyAndYear","yearlyArray","monthlyArr","siteName","setSiteName","carbonMunicipalValue","setCarbonMunicipalValue","callCoverInput","callSalesInput","thisWeekCoverInputs","thisWeekSalesInput","allWeekSalesInput","allWeekCoverInput","getTargetsData","recommendedTargets","callWastePerCover","wastePerCover","searchError","selectedYear","setSelectedYear","selectedMonth","setSelectedMonth","spinner","showSpinner","callWastePerSales","wastePerSales","searchErrorForWastePerSales","selectedYearForWastePerSales","callMonthlyWastesAPI","coverWasteInCurrentMonth","preparationWasteInCurrentMonth","spoilageWasteInCurrentMonth","currentMonthCoverWasteArray","currentMonthPrepWasteArray","currentMonthSpoilageWasteArray","coverMonthlyChanges","prepMonthlyChanges","spoilageMonthlyChanges","monthlyChanges","getAllSites","allSites","totalWasteFromSelectedSite","callWeeklyWasteAPI","weeklyWaste","weeklyTrend","getAiPrediction","aiPredictionsData","callGetCappingAPI","cappingValue","callDailyAndWeeklyDatesData","dailyWaste","hourlyWaste","weeklyDailyLabels","weeklyDailyRange","weeklyWasteValuesForCurrentWeekAndLastWeek","showPounds","kgPoundsConverter","showHamburgerButton","setShowHamburgerButton","updateGraph","setUpdateGraph","index","setIndex","changeIndex","handleSearch","data","type","monthly","monthlyIndex","yearly","yearlyIndex","updateValues","handleSiteIDchange","event","siteNameSelected","target","value","replace","toLowerCase","monthNumber","year","getAllData","email","userDetails","companyId","response","then","res","sites","sitesID","Object","entries","map","attribute","item","reverse","currentMonthNumber","currentYear","date","Date","numberInDay","getDay","indexForNumberInDay","catch","error","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport Routes from \"./routes\";\nimport { withRouter } from \"react-router-dom\";\nimport MainNavigation from \"./shared/components/navigation/main-navigation\";\n\nimport { getMasterTableData } from \"./api\";\n\nimport {\n  getMonthAsAnumber,\n  getYear,\n} from \"./utilities\";\n\nimport UsersInformation from \"./shared/components/libs/use-user-information\";\nimport CompanyInformation from \"./shared/components/libs/use-company-information\";\nimport useGetRequests from \"./shared/components/libs/use-get-request\";\nimport KgPoundsConverter from \"./shared/components/libs/use-kg-pounds-converter\";\n\nimport WasteCapContextProvider from \"./contexts/waste-cap-context\";\nimport TotalWasteContextProvider from \"./contexts/total-waste-context\";\nimport MonthlyWasteContextProvider from \"./contexts/monthly-waste-context\";\nimport WeeklyWasteTrendProvider from \"./contexts/weekly-trends-context\";\nimport DailyWasteContextProvider from \"./contexts/daily-waste-context\";\nimport DashboardContextProvider from \"./contexts/dashboard-context\";\nimport WastePerCoverContextProvider from \"./contexts/waste-per-cover-context\";\nimport WastePerSalesContextProvider from \"./contexts/waste-per-sales-context\";\nimport WeeklyWasteContextProvider from \"./contexts/weekly-waste-context\";\nimport TargetContextProvider from \"./contexts/target-context\";\nimport HourlyFoodWasteContextProvider from \"./contexts/hourly-food-waste-context\";\nimport AiPredictionDataContextProvider from \"./contexts/ai-prediction-data-context\";\nimport WasteOnAdayOfTheWeekProvider from \"./contexts/waste-on-a-day-of-the-week-context\";\nimport InputsContextProvider from \"./contexts/inputs-context\";\nimport DailySalesVsWasteInputsProvider from \"./contexts/daily-sales-vs-waste-context\";\nimport PerformanceSummaryProvider from \"./contexts/performance-summary-context\";\nimport ProductionPreparationProvider from \"./contexts/production-preparation-context\";\n\nimport EventProductionWasteProvider from \"./contexts/event-production-waste-context\";\n\nimport WasteLabelsContextProvider from \"./contexts/waste-labels-context\";\n\nimport LiveFeedContextProvider from \"./contexts/live-feed-context\";\n\nfunction App() {\n\n  const [mySiteId, setMySiteId] = React.useState();\n\n  const {\n    saveUserType,\n    getUserDetails,\n    getNoOfUsersCreated,\n    userType,\n    userDetail,\n    noOfUsers,\n    isAuthenticated,\n    userHasAuthenticated,\n    saveLoginTime,\n    getTheLoginTimeFromUsers,\n    superAdminCreatedUsers\n  }\n  = UsersInformation()\n\n  const {\n    startDate,\n    setStartDate,\n    companyID,\n    setCompanyID,\n    selectedSiteValueID,\n    setSelectedValueID,\n    companyName,\n    setcompanyName,\n    getCurrentMonthlyAndYear,\n    yearlyArray,\n    monthlyArr,\n    siteName,\n    setSiteName,\n    carbonMunicipalValue,\n    setCarbonMunicipalValue\n  } = CompanyInformation()\n\n  const {\n    //call input for covers and sales\n    callCoverInput,\n    callSalesInput,\n    thisWeekCoverInputs,\n    thisWeekSalesInput,\n    allWeekSalesInput,\n    allWeekCoverInput,\n\n    //TARGETS RECOMMENDATION\n    getTargetsData,\n    recommendedTargets,\n\n    //WASTE PER COVER\n    callWastePerCover,\n    wastePerCover,\n\n    searchError,\n\n    selectedYear,\n    setSelectedYear,\n    selectedMonth,\n    setSelectedMonth,\n\n    spinner,\n    showSpinner,\n\n    //WASTE PER SALES\n    callWastePerSales,\n    wastePerSales,\n    searchErrorForWastePerSales,\n    selectedYearForWastePerSales,\n\n    //MONTHLY WASTE\n    callMonthlyWastesAPI,\n    coverWasteInCurrentMonth,\n    preparationWasteInCurrentMonth,\n    spoilageWasteInCurrentMonth,\n    currentMonthCoverWasteArray,\n    currentMonthPrepWasteArray,\n    currentMonthSpoilageWasteArray,\n    coverMonthlyChanges,\n    prepMonthlyChanges,\n    spoilageMonthlyChanges,\n    monthlyChanges,\n\n    //CALL ALL SITES DATA\n    getAllSites,\n    allSites,\n    totalWasteFromSelectedSite,\n\n    // CALL WEEKLY WASTE API\n    callWeeklyWasteAPI,\n    weeklyWaste,\n    weeklyTrend,\n\n    //AI PREDICTION\n    getAiPrediction,\n    aiPredictionsData,\n\n    //CAPPING API\n    callGetCappingAPI,\n    cappingValue,\n\n    //daily and hourly\n    callDailyAndWeeklyDatesData,\n    dailyWaste,\n    hourlyWaste,\n\n    //mon-sun x-axis labels\n    weeklyDailyLabels,\n    //date range e..g 12-19 July\n    weeklyDailyRange,\n\n    weeklyWasteValuesForCurrentWeekAndLastWeek\n  } = useGetRequests()\n\n  const {\n    showPounds,\n    kgPoundsConverter\n  } = KgPoundsConverter()\n\n  const [ showHamburgerButton, setShowHamburgerButton] = useState(false);\n\n  let [ updateGraph, setUpdateGraph ] = useState(0);\n\n  let [ index, setIndex ] = useState(0);\n  const changeIndex = (index) => {\n    setIndex(index)\n  }\n\n  //THE FUNCTION TRIGGERS WHEN SEARCHING THE DATA FROM A PARTICULAR MONTH OR YEAR\n  const handleSearch = (data, type) => {\n    const monthly = data.monthlyIndex\n    const yearly = data.yearlyIndex\n\n    switch(type) {\n      case \"wastePerCover\":\n        setSelectedMonth(monthly)\n        showSpinner()\n        callWastePerCover(companyID, companyName, selectedSiteValueID, monthly, yearly)\n        break;\n      case \"wastePerSales\":\n        setSelectedMonth(monthly)\n        showSpinner()\n        callWastePerSales(companyID, companyName, selectedSiteValueID, monthly, yearly)\n        break;\n      default:\n        // code block\n    }\n  }\n\n  //THE FUNCTION TRIGGERS WHEN THE FORMS ARE UPDATING\n  const updateValues = (type) => {\n\n    switch(type) {\n      case \"COVER INPUTS\":\n        callCoverInput(companyID, companyName, selectedSiteValueID)\n        callWastePerCover(companyID, companyName, selectedSiteValueID, selectedMonth, selectedYear);\n        break;\n      case \"SALES INPUTS\":\n        callSalesInput(companyID, companyName, selectedSiteValueID)\n        callWastePerSales(companyID, companyName, selectedSiteValueID, selectedMonth, selectedYear);\n        break;\n      case \"TARGETS\":\n        getTargetsData(companyID, companyName, selectedSiteValueID)\n        break;\n      case \"UPDATE GRAPH\":\n        setUpdateGraph(updateGraph + 1)\n        break;\n      default:\n        setUpdateGraph(true)\n        // code block\n    }\n  }\n\n  //THE FUNCTION TRIGGERS WHEN SWITCH TO A DIFFERENT SITE\n  const handleSiteIDchange = (event) => {\n    showSpinner()\n\n    const siteNameSelected = event.target.value\n    setMySiteId(siteNameSelected)\n    const siteName = siteNameSelected.replace(/[^A-Za-z]+/g, '').toLowerCase()\n\n    setSelectedValueID(siteNameSelected)\n    setSiteName(siteName)\n\n    const monthNumber = getMonthAsAnumber()\n    const year = getYear()\n\n    // console.log(\"siteNameSelected\",siteNameSelected)\n    // console.log(\"companyID\",companyID)\n    // console.log(\"companyName\",companyName)\n    // console.log(\"year\",year)\n    // console.log(\"monthNumber\",monthNumber)\n\n    getCurrentMonthlyAndYear(startDate)\n    callMonthlyWastesAPI(companyID, companyName, siteNameSelected)\n    callWeeklyWasteAPI(companyID, companyName, siteNameSelected)\n    callWastePerCover(companyID, companyName, siteNameSelected, monthNumber , year)\n    callWastePerSales(companyID, companyName, siteNameSelected, monthNumber , year)\n    callCoverInput(companyID, companyName, siteNameSelected)\n    callSalesInput(companyID, companyName, siteNameSelected)\n    callGetCappingAPI(companyID, companyName, siteNameSelected)\n    getAllSites(companyID, companyName, siteNameSelected)\n    callDailyAndWeeklyDatesData(companyID, companyName, siteNameSelected)\n    getTargetsData(companyID, companyName, siteNameSelected)\n    getAiPrediction(companyID, companyName, siteNameSelected);\n  }\n\n\n  //THE FUNCTION TRIGGERS WHEN USER LOGIN\n  const getAllData = (companyName, email, userDetails, companyId) => {\n\n    showSpinner()\n\n    let response;\n\n    getMasterTableData(companyName, companyId)\n      .then((res) => {\n\n        response = res\n\n        const companyId = response.companyId;\n        const allSites = response.sites;\n        const startDate = response.startDate;\n        const carbonMunicipalValue = response.carbonMunicipalValue;\n\n        // console.log(\"companyId\", companyId)\n        // console.log(\"allSites\", allSites)\n\n        //save user information\n        saveLoginTime(userDetails, companyId);\n        getTheLoginTimeFromUsers(companyId, companyName);\n\n        //save company information\n        setStartDate(startDate);\n        setCompanyID(companyId);\n        setcompanyName(companyName);\n\n        setCarbonMunicipalValue(carbonMunicipalValue);\n\n        const sitesID = Object.entries(allSites).map(([attribute, item]) => {\n          return attribute;\n        }).reverse();\n        setMySiteId(sitesID[0]);\n\n        //You need to change sitesID[1] back to sitesID[0] because it will break there is only one site\n        setSelectedValueID(sitesID[0])\n\n        const currentMonthNumber = getMonthAsAnumber()\n        setSelectedMonth(currentMonthNumber)\n        const currentYear = getYear()\n        setSelectedYear(currentYear)\n\n        callWastePerCover(companyId, companyName, sitesID[0], currentMonthNumber, currentYear);\n        callWastePerSales(companyId, companyName, sitesID[0], currentMonthNumber, currentYear);\n\n        callMonthlyWastesAPI(companyId, companyName, sitesID[0]);\n        getAllSites(companyId, companyName, sitesID[0]);\n        callWeeklyWasteAPI(companyId, companyName, sitesID[0]);\n        getTargetsData(companyId, companyName, sitesID[0])\n        getAiPrediction(companyId, companyName, sitesID[0]);\n        callGetCappingAPI(companyId, companyName, sitesID[0]);\n\n        const date = new Date();\n        const numberInDay = date.getDay();\n        const indexForNumberInDay = numberInDay === 0 ? 6 : numberInDay - 1\n        callDailyAndWeeklyDatesData(companyId, companyName, sitesID[0], indexForNumberInDay);\n\n        //get data for the form\n        callCoverInput(companyId, companyName, sitesID[0]);\n        callSalesInput(companyId, companyName, sitesID[0]);\n\n        //get waste on a day of the week\n        // getWasteOnAdayOfTheWeekAPI(companyId, companyName, sitesID[0], 0, currentYear)\n\n        getCurrentMonthlyAndYear(response.startDate)\n\n        setShowHamburgerButton(true)\n\n      }).catch((error) => {\n        console.log(\"error from master table\", error);\n      })\n  };\n  return (\n    <>\n      {spinner}\n      <div className=\"App\">\n\n          <WasteLabelsContextProvider\n            companyId={companyID}\n            companyName={companyName}\n            siteName={mySiteId}\n          >\n\n          <InputsContextProvider\n            companyId={companyID}\n            companyName={companyName}\n            selectedSiteValueID={selectedSiteValueID}\n            thisWeekCoverInputs={thisWeekCoverInputs}\n            thisWeekSalesInput={thisWeekSalesInput}\n            updateValues={updateValues}\n            allWeekSalesInput={allWeekSalesInput}\n            allWeekCoverInput={allWeekCoverInput}\n          >\n\n          <DailySalesVsWasteInputsProvider\n            siteName={mySiteId}\n            companyId={companyID}\n            companyName={companyName}\n            updateGraph={updateGraph}\n            // weeklyDailyRange={weeklyDailyRange}\n          >\n\n          <ProductionPreparationProvider\n            siteName={mySiteId}\n            companyId={companyID}\n            companyName={companyName}\n            updateValues={updateValues}\n          >\n\n          <WasteOnAdayOfTheWeekProvider\n            siteName={mySiteId}\n            companyId={companyID}\n            companyName={companyName}\n            totalWasteFromSelectedSite={totalWasteFromSelectedSite}\n            startDate={startDate}\n          >\n\n          <TargetContextProvider\n            aiPredictionsData={aiPredictionsData}\n            recommendedTargets={recommendedTargets}\n            currentMonthCoverWasteArray={currentMonthCoverWasteArray}\n            currentMonthPrepWasteArray={currentMonthPrepWasteArray}\n            currentMonthSpoilageWasteArray={currentMonthSpoilageWasteArray}\n            carbonMunicipalValue={carbonMunicipalValue}\n          >\n\n          <WasteCapContextProvider\n            companyName={companyName}\n            selectedSiteValueID={selectedSiteValueID}\n            companyID={companyID}\n            cappingValue={cappingValue}\n            showPounds={showPounds}\n          >\n\n          <MainNavigation\n            appProps={{\n              isAuthenticated,\n              userHasAuthenticated,\n              kgPoundsConverter,\n            }}\n            siteName={mySiteId}\n            userDetail={userDetail}\n            showHamburgerButton={showHamburgerButton}\n          />\n\n          <TotalWasteContextProvider\n            siteName={siteName}\n            // totalWasteFromSite={totalWasteFromSite}\n            allSites={allSites}\n            totalWasteFromSelectedSite={totalWasteFromSelectedSite}\n          >\n\n          <WastePerCoverContextProvider\n            startDate={startDate}\n            handleSearch={handleSearch}\n            monthlyArray={monthlyArr}\n            yearlyArray={yearlyArray}\n            wastePerCover={wastePerCover}\n            searchError={searchError}\n            selectedYear={selectedYear}\n            companyId={companyID}\n            companyName={companyName}\n          >\n\n          <WastePerSalesContextProvider\n            siteName={mySiteId}\n            wastePerSales={wastePerSales}\n            monthlyArray={monthlyArr}\n            yearlyArray={yearlyArray}\n            handleSearch={handleSearch}\n            searchErrorForWastePerSales={searchErrorForWastePerSales}\n            selectedYearForWastePerSales={selectedYearForWastePerSales}\n          >\n\n          <EventProductionWasteProvider\n            companyId={companyID}\n            companyName={companyName}\n            siteName={mySiteId}\n            updateGraph={updateGraph}\n          >\n\n          <DashboardContextProvider\n            // monthlySelectedValue={monthlySelectedValue}\n            // selectedValue={selectedValue}\n            siteName={siteName}\n            companyName={companyName}\n            sites={allSites}\n            // handleMonthlyValues={handleMonthlyValues}\n            // displayMonthlyValue={displayMonthlyValue}\n            // allMonthlyData={allMonthlyData}\n            // monthlyChartMaxValue={monthlyChartMaxValue}\n            // monthlyChangesValue={monthlyChangesValue}\n            startDate={startDate}\n            showPounds={showPounds}\n            // userEmail={userEmail}\n            // adminType={adminType}\n            // totalMonthlyWaste={totalMonthlyWaste}\n            // clickOnMonthlyBarChart={clickOnMonthlyBarChart}\n            changeIndex={changeIndex}\n            userType={userType}\n            userDetail={userDetail}\n            // sitesID={sitesID}\n            handleSiteIDchange={handleSiteIDchange}\n            selectedSiteValueID={selectedSiteValueID}\n            companyID={companyID}\n            thisWeekCoverInputs={thisWeekCoverInputs}\n\n            weeklyDailyLabels={weeklyDailyLabels}\n            weeklyDailyRange={weeklyDailyRange}\n          >\n\n          <AiPredictionDataContextProvider\n            companyName={companyName}\n            siteName={siteName}\n            aiPredictionsData={aiPredictionsData}\n          >\n\n          <HourlyFoodWasteContextProvider\n            companyName={companyName}\n            index={index}\n            hourlyWaste={hourlyWaste}\n          >\n\n          <DailyWasteContextProvider\n            siteName={siteName}\n            // siteChange={siteChange}\n            // dailyWasteData={dailyWasteData}\n            // dailyCoverWaste={dailyCoverWaste}\n            // dailyPreparationWaste={dailyPreparationWaste}\n            // dailySpoilageWaste={dailySpoilageWaste}\n            // weeklyDailyWaste={weeklyDailyWaste}\n            showPounds={showPounds}\n            dailyWaste={dailyWaste}\n          >\n\n          <WeeklyWasteTrendProvider\n            companyName={companyName}\n            siteName={siteName}\n            weeklyWasteValuesForCurrentWeekAndLastWeek={weeklyWasteValuesForCurrentWeekAndLastWeek}\n            weeklyTrend={weeklyTrend}\n          >\n\n          <WeeklyWasteContextProvider\n            weeklyWaste={weeklyWaste}\n            siteName={siteName}\n          >\n\n          <MonthlyWasteContextProvider\n            companyName={companyName}\n            siteName={siteName}\n            companyID={companyID}\n            // selectedSiteID={selectedSiteID}\n\n            coverWasteInCurrentMonth={coverWasteInCurrentMonth}\n            preparationWasteInCurrentMonth={preparationWasteInCurrentMonth}\n            spoilageWasteInCurrentMonth={spoilageWasteInCurrentMonth}\n\n            currentMonthCoverWasteArray={currentMonthCoverWasteArray}\n            currentMonthPrepWasteArray={currentMonthPrepWasteArray}\n            currentMonthSpoilageWasteArray={currentMonthSpoilageWasteArray}\n\n            coverMonthlyChanges={coverMonthlyChanges}\n            prepMonthlyChanges={prepMonthlyChanges}\n            spoilageMonthlyChanges={spoilageMonthlyChanges}\n            monthlyChanges={monthlyChanges}\n          >\n\n          <PerformanceSummaryProvider\n            companyID={companyID}\n            companyName={companyName}\n            siteName={mySiteId}\n          >\n\n          <Routes\n            appProps={{\n              siteName,\n              getUserDetails,\n              isAuthenticated,\n              userHasAuthenticated,\n              getAllData,\n              saveUserType,\n              companyName,\n              userType,\n              getNoOfUsersCreated,\n              noOfUsers,\n              userDetail,\n              companyID,\n              superAdminCreatedUsers,\n              selectedSiteValueID,\n              thisWeekCoverInputs,\n              thisWeekSalesInput,\n              // updateValues,\n              callGetCappingAPI,\n              recommendedTargets,\n              updateValues,\n              startDate,\n              carbonMunicipalValue\n            }}\n          />\n\n          </PerformanceSummaryProvider>\n\n          </MonthlyWasteContextProvider>\n\n          </WeeklyWasteContextProvider>\n\n          </WeeklyWasteTrendProvider>\n\n          </DailyWasteContextProvider>\n\n          </HourlyFoodWasteContextProvider>\n\n          </AiPredictionDataContextProvider>\n\n          </DashboardContextProvider>\n\n          </EventProductionWasteProvider>\n\n          </WastePerSalesContextProvider>\n\n          </WastePerCoverContextProvider>\n\n          </TotalWasteContextProvider>\n\n          </WasteCapContextProvider>\n\n          </TargetContextProvider>\n\n          </WasteOnAdayOfTheWeekProvider>\n\n          </ProductionPreparationProvider>\n\n          </DailySalesVsWasteInputsProvider>\n\n          </InputsContextProvider>\n\n          </WasteLabelsContextProvider>\n      </div>\n    </>\n  );\n}\n\nexport default withRouter(App);\n"]},"metadata":{},"sourceType":"module"}