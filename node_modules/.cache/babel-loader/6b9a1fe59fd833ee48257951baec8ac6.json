{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/reports/monthly-waste-report.js\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport Chart from \"chart.js\";\nimport \"chartjs-plugin-annotation\";\nimport \"chartjs-plugin-datalabels\";\nimport useWindowDimensions from \"../../libs/use-window-dimensions\";\nimport { getEndDate, reducer, roundedUpNumberAndTurnBackToNumber } from \"../../../../utilities\";\nimport { MonthlyWasteContext } from \"../../../../contexts/monthly-waste-context\";\nimport { AccordionHeading, AccordionBody } from \"../accordion\";\nimport { WasteLabelsContext } from \"../../../../contexts/waste-labels-context\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nexport default function MonthlyWasteChart(props) {\n  Chart.defaults.global.defaultFontFamily = \"CooperHewitt-Book\";\n  const [tooltipIsOpen, setTooltipIsOpen] = React.useState(true);\n  const {\n    labels\n  } = useContext(WasteLabelsContext);\n  const {\n    coverWasteInCurrentMonth,\n    preparationWasteInCurrentMonth,\n    spoilageWasteInCurrentMonth,\n    currentMonthCoverWasteArray,\n    currentMonthPrepWasteArray,\n    currentMonthSpoilageWasteArray,\n    monthlyChanges,\n    handleMonthlyValues,\n    displayMonthlyTrends,\n    monthlySelectedValue,\n    showTooltip\n  } = useContext(MonthlyWasteContext);\n  const [monthlyCoverWaste, setCurrentMonthCoverWasteArray] = React.useState([0]);\n  const [monthlyPreparationWaste, setCurrentMonthPrepWasteArray] = React.useState([0]);\n  const [monthlySpoilageWaste, setCurrentMonthSpoilageWasteArray] = React.useState([0]);\n  let graphHeight = 130;\n  let graphWidth = 400;\n  const {\n    width\n  } = useWindowDimensions();\n  let siteId;\n  let totalMonthlyValueFontSize = \"13\";\n  let xAxisLabel = \"13\";\n\n  if (width <= 700) {\n    graphWidth = 260;\n    graphHeight = 279;\n    totalMonthlyValueFontSize = \"8\";\n    xAxisLabel = \"8\";\n  }\n\n  let barColors;\n  const [appState, changeState] = useState({\n    activeObject: {\n      id: 3,\n      val: props.monthlySelectedValue,\n      name: \"TOTAL WASTE\"\n    },\n    objects: [{\n      id: 0,\n      val: \"C\",\n      name: \"COVER WASTE\"\n    }, {\n      id: 1,\n      val: \"S\",\n      name: \"SPOILAGE WASTE\"\n    }, {\n      id: 2,\n      val: \"P\",\n      name: \"PREPARATION WASTE\"\n    }, {\n      id: 3,\n      val: \"A\",\n      name: \"TOTAL WASTE\"\n    }]\n  });\n  const [activeState, changeActiveState] = useState({\n    coverWaste: false,\n    spoliageWaste: false,\n    productionWaste: false,\n    allWaste: true\n  });\n\n  function toggleActive(type) {\n    switch (type) {\n      case \"cover\":\n        changeActiveState({\n          coverWaste: true,\n          spoliageWaste: false,\n          productionWaste: false,\n          allWaste: false\n        });\n        changeState({ ...appState,\n          activeObject: appState.objects[0]\n        });\n        break;\n\n      case \"production\":\n        changeActiveState({\n          coverWaste: false,\n          spoliageWaste: false,\n          productionWaste: true,\n          allWaste: false\n        });\n        changeState({ ...appState,\n          activeObject: appState.objects[2]\n        });\n        break;\n\n      case \"spoliage\":\n        changeActiveState({\n          coverWaste: false,\n          spoliageWaste: true,\n          productionWaste: false,\n          allWaste: false\n        });\n        changeState({ ...appState,\n          activeObject: appState.objects[1]\n        });\n        break;\n\n      case \"all\":\n        changeActiveState({\n          coverWaste: false,\n          spoliageWaste: false,\n          productionWaste: false,\n          allWaste: true\n        });\n        changeState({ ...appState,\n          activeObject: appState.objects[3]\n        });\n        break;\n\n      default:\n    }\n  }\n\n  useEffect(() => {\n    setCurrentMonthCoverWasteArray(currentMonthCoverWasteArray);\n    setCurrentMonthPrepWasteArray(currentMonthPrepWasteArray);\n    setCurrentMonthSpoilageWasteArray(currentMonthSpoilageWasteArray); // console.log(\"currentMonthCoverWasteArray\",currentMonthCoverWasteArray)\n    // console.log(\"currentMonthPrepWasteArray\",currentMonthPrepWasteArray)\n    // console.log(\"currentMonthSpoilageWasteArray\",currentMonthSpoilageWasteArray)\n\n    if (props.showMonthlyChart && showTooltip) {\n      setTooltipIsOpen(true);\n    } else {\n      setTooltipIsOpen(false);\n    }\n\n    if (monthlySelectedValue === \"C\") {\n      changeActiveState({\n        coverWaste: true,\n        spoliageWaste: false,\n        productionWaste: false,\n        allWaste: false\n      });\n      changeState({ ...appState,\n        activeObject: appState.objects[0]\n      });\n    } else if (monthlySelectedValue === \"S\") {\n      changeActiveState({\n        coverWaste: false,\n        spoliageWaste: true,\n        productionWaste: false,\n        allWaste: false\n      });\n      changeState({ ...appState,\n        activeObject: appState.objects[1]\n      });\n    } else if (monthlySelectedValue === \"P\") {\n      changeActiveState({\n        coverWaste: false,\n        spoliageWaste: false,\n        productionWaste: true,\n        allWaste: false\n      });\n      changeState({ ...appState,\n        activeObject: appState.objects[2]\n      });\n    } else if (monthlySelectedValue === \"A\") {\n      changeActiveState({\n        coverWaste: false,\n        spoliageWaste: false,\n        productionWaste: false,\n        allWaste: true\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [currentMonthCoverWasteArray, currentMonthPrepWasteArray, currentMonthSpoilageWasteArray, monthlySelectedValue, props.showMonthlyChart]);\n\n  if (props.siteID !== undefined) {\n    siteId = props.siteID;\n  }\n\n  const getChartData = canvas => {\n    const data = {\n      labels: [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUNE\", \"JULY\", \"AUG\", \"SEPT\", \"OCT\", \"NOV\", \"DEC\"],\n      datasets: [{\n        label: \"Total wastes\",\n        siteId: siteId,\n        data: props.showPounds ? displayMonthlyTrends.map(data => {\n          return (data * 2.775).toFixed(0);\n        }) : displayMonthlyTrends.map(data => {\n          return data.toFixed(0);\n        }),\n        backgroundColor: barColors,\n        barPercentage: 0.7,\n        categoryPercentage: 0.9,\n        lineTension: 0\n      }]\n    };\n    return data;\n  };\n\n  let months = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUNE\", \"JULY\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"];\n  let monthlyWasteTextColor;\n\n  if (props.showDarkTheme) {\n    monthlyWasteTextColor = \"rgb(255, 231, 227)\";\n  } else {\n    monthlyWasteTextColor = \"rgb(15, 128, 140)\";\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: props.hideReport ? \"monthlyWasteChart displayNone\" : \"monthlyWasteChart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AccordionHeading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }\n  }, \"MONTHLY WASTE & MONTHLY TREND\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    onClick: () => props.handleChangeForCheckedAndAccordion(!props.showMonthlyChart, \"monthlyChartSwitch\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 11\n    }\n  }, props.showMonthlyChart ? \"X\" : \"| | | \"))), /*#__PURE__*/React.createElement(AccordionBody, {\n    open: props.showMonthlyChart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: props.showDarkTheme ? \"darkTheme__reportBackgroundColor addPaddingOfHalveRem\" : \"originalTheme__reportBackgroundColor addPaddingOfHalveRem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"report-subtitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 11\n    }\n  }, props.siteName, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"monthlyWasteChart__titleWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }\n  }, \"MONTHLY WASTE \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 58\n    }\n  }, props.showPounds ? \"(Â£)\" : \"(Kg)\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"MonthlyWasteChart--spacing--secondRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"MonthlyWasteChart--spacing--secondRow--csp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      width: \"13%\",\n      justifyContent: \"space-between\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: activeState.coverWaste ? \"active\" : \"inactive\",\n    id: 1,\n    onClick: () => {\n      toggleActive(\"cover\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: activeState.spoliageWaste ? \"active\" : \"inactive\",\n    id: 1,\n    onClick: () => {\n      toggleActive(\"spoliage\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: activeState.productionWaste ? \"active\" : \"inactive\",\n    id: 1,\n    onClick: () => {\n      toggleActive(\"production\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: activeState.allWaste ? \"active\" : \"inactive\",\n    id: 1,\n    onClick: () => {\n      toggleActive(\"all\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"monthlyWasteChart__dateLabel__CSP\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"monthlyWasteChart__dateLabel__CSP__coverwastesSquare\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 19\n    }\n  }), labels.titleLabels.c, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"monthlyWasteChart__dateLabel__CSP__spoliageSquare\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 19\n    }\n  }), labels.titleLabels.s, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"monthlyWasteChart__dateLabel__CSP__preparationSquare\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 19\n    }\n  }), labels.titleLabels.c))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"monthlyWasteChart--labelTrends--title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cooperHewittBold applyBlueTuckGreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 15\n    }\n  }, \"Monthly Trend: \", appState.activeObject.name.toLowerCase()))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"monthlyWasteChart--labelTrends\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 11\n    }\n  }, props.showPounds ? displayMonthlyTrends.map((data, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"monthlyWasteChart--labelTrends__spacing\",\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 17\n    }\n  }, data > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyCooperHewittBold monthlyWasteChart--labelTrends__spacing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 31\n    }\n  }, \"+\", (data * 2.775).toFixed(0)) : /*#__PURE__*/React.createElement(\"div\", {\n    className: props.showDarkTheme ? \"darkTheme__numberColor cooperHewittBold monthlyWasteChart--labelTrends__spacing\" : \"applyPurpleColor monthlyWasteChart--labelTrends__spacing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 19\n    }\n  }, (data * 2.775).toFixed(0)))) : displayMonthlyTrends.map((data, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"monthlyWasteChart--labelTrends__spacing\",\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 17\n    }\n  }, data > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyCooperHewittBold monthlyWasteChart--labelTrends__spacing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 31\n    }\n  }, \"+\", data) : /*#__PURE__*/React.createElement(\"div\", {\n    className: props.showDarkTheme ? \"darkTheme__numberColor cooperHewittBold monthlyWasteChart--labelTrends__spacing\" : \"applyPurpleColor monthlyWasteChart--labelTrends__spacing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 19\n    }\n  }, data)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"monthlyWasteChart--labelTrends--title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cooperHewittBold applyBlueTuckGreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 15\n    }\n  }, \"Monthly Waste:\"))), /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      datasets: [{\n        label: \"coverWaste\",\n        data: props.showPounds ? monthlyCoverWaste.map(data => {\n          return (data * 2.775).toFixed(0);\n        }) : monthlyCoverWaste,\n        fill: false,\n        backgroundColor: \"rgba(140, 112, 140, 0.5)\",\n        minBarLength: 0.3,\n        barPercentage: 0.7,\n        categoryPercentage: 0.7\n      }, {\n        label: \"spoilage\",\n        data: props.showPounds ? monthlySpoilageWaste.map(data => {\n          return (data * 2.775).toFixed(0);\n        }) : monthlySpoilageWaste,\n        fill: false,\n        backgroundColor: \"rgb(212, 190, 0)\",\n        minBarLength: 0.3,\n        barPercentage: 0.7,\n        categoryPercentage: 0.7\n      }, {\n        label: \"preparation\",\n        data: props.showPounds ? monthlyPreparationWaste.map(data => {\n          return (data * 2.775).toFixed(0);\n        }) : monthlyPreparationWaste,\n        fill: false,\n        backgroundColor: \"rgba(133, 165, 101, 0.5)\",\n        minBarLength: 0.3,\n        barPercentage: 0.7,\n        categoryPercentage: 0.7\n      }]\n    },\n    width: graphWidth,\n    height: graphHeight,\n    options: {\n      responsive: true,\n      maintainAspectRatio: true,\n      scales: {\n        xAxes: [{\n          stacked: true,\n          gridLines: {\n            display: false\n          },\n          ticks: {\n            fontColor: \"rgb(15, 128, 140)\"\n          },\n          display: false\n        }],\n        yAxes: [{\n          stacked: true,\n          display: false,\n          gridLines: {\n            display: false\n          }\n        }]\n      },\n      plugins: {\n        datalabels: {\n          display: true,\n          anchor: \"top\",\n          align: \"middle\",\n          color: monthlyWasteTextColor,\n          font: {\n            size: 9,\n            weight: \"bold\"\n          }\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"monthlyWasteChart--axisLabel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 11\n    }\n  }, months.map((data, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 15\n    }\n  }, data))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"monthlyWasteChart__currentMonth applyBlueTuckGreen CSPFullLabelNameFontsize cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyMarginRightAndLeft cooperHewittBold applyGoldColor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 17\n    }\n  }, \"(\" + getEndDate() + \")\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyMarginRightAndLeft cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 19\n    }\n  }, \"Current Month Food Waste\"), \"C\", /*#__PURE__*/React.createElement(\"div\", {\n    className: props.showDarkTheme ? \"darkTheme__numberColor applyMarginRightAndLeft cooperHewittBold\" : \"applyPurpleColor applyMarginRightAndLeft cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 19\n    }\n  }, props.showPounds ? (coverWasteInCurrentMonth * 2.755).toFixed(0) : roundedUpNumberAndTurnBackToNumber(coverWasteInCurrentMonth)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyMarginRightAndLeft cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 19\n    }\n  }, \"+\"), \"S\", /*#__PURE__*/React.createElement(\"div\", {\n    className: props.showDarkTheme ? \"darkTheme__numberColor applyMarginRightAndLeft cooperHewittBold\" : \"applyPurpleColor applyMarginRightAndLeft cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 19\n    }\n  }, props.showPounds ? (spoilageWasteInCurrentMonth * 2.755).toFixed(0) : roundedUpNumberAndTurnBackToNumber(spoilageWasteInCurrentMonth)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyMarginRightAndLeft cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 19\n    }\n  }, \"+\"), \"P\", /*#__PURE__*/React.createElement(\"div\", {\n    className: props.showDarkTheme ? \"darkTheme__numberColor applyMarginRightAndLeft cooperHewittBold\" : \"applyPurpleColor applyMarginRightAndLeft cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 19\n    }\n  }, props.showPounds ? (preparationWasteInCurrentMonth * 2.755).toFixed(0) : roundedUpNumberAndTurnBackToNumber(preparationWasteInCurrentMonth)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyMarginRightAndLeft cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 19\n    }\n  }, \"=\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: props.showDarkTheme ? \"darkTheme__numberColor applyMarginRightAndLeft cooperHewittBold\" : \"applyPurpleColor applyMarginRightAndLeft cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 19\n    }\n  }, \" \", props.showPounds ? \"Â£\" + ((roundedUpNumberAndTurnBackToNumber(coverWasteInCurrentMonth) + roundedUpNumberAndTurnBackToNumber(spoilageWasteInCurrentMonth) + roundedUpNumberAndTurnBackToNumber(preparationWasteInCurrentMonth)) * 2.775).toFixed(0) : roundedUpNumberAndTurnBackToNumber(coverWasteInCurrentMonth) + roundedUpNumberAndTurnBackToNumber(spoilageWasteInCurrentMonth) + roundedUpNumberAndTurnBackToNumber(preparationWasteInCurrentMonth) + \"Kg\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"monthlyWasteChart__headingSection--spacing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"monthlyWasteChart__CspLabel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: activeState.coverWaste ? \"active\" : \"inactive\",\n    id: 1,\n    onClick: () => {\n      toggleActive(\"cover\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    open: tooltipIsOpen // onOpen={() => setTooltipIsOpen(true)}\n    ,\n    onClose: () => setTooltipIsOpen(false),\n    title: \"click on C, S or P waste stream\",\n    arrow: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"C\",\n    onClick: handleMonthlyValues,\n    className: activeState.coverWaste ? \"reduceOpacity\" : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 15\n    }\n  }, labels.acronyms.c))), /*#__PURE__*/React.createElement(\"div\", {\n    className: activeState.spoliageWaste ? \"active\" : \"inactive\",\n    id: 1,\n    onClick: () => {\n      toggleActive(\"spoliage\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    open: tooltipIsOpen // onOpen={() => setTooltipIsOpen(true)}\n    ,\n    onClose: () => setTooltipIsOpen(false) // title=\"click on C, S or P waste stream\"\n    ,\n    arrow: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"S\",\n    onClick: handleMonthlyValues,\n    className: activeState.spoliageWaste ? \"reduceOpacity\" : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 15\n    }\n  }, labels.acronyms.s))), /*#__PURE__*/React.createElement(\"div\", {\n    className: activeState.productionWaste ? \"active\" : \"inactive\",\n    id: 1,\n    onClick: () => {\n      toggleActive(\"production\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    open: tooltipIsOpen // onOpen={() => setTooltipIsOpen(true)}\n    ,\n    onClose: () => setTooltipIsOpen(false) // title=\"click on C, S or P waste stream\"\n    ,\n    arrow: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"P\",\n    onClick: handleMonthlyValues,\n    className: activeState.productionWaste ? \"reduceOpacity\" : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 17\n    }\n  }, labels.acronyms.p))), /*#__PURE__*/React.createElement(\"div\", {\n    className: activeState.allWaste ? \"active\" : \"inactive\",\n    id: 1,\n    onClick: () => {\n      toggleActive(\"all\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    open: tooltipIsOpen // onOpen={() => setTooltipIsOpen(true)}\n    ,\n    onClose: () => setTooltipIsOpen(false) // title=\"click on C, S or P waste stream\"\n    ,\n    arrow: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"A\",\n    onClick: handleMonthlyValues,\n    className: activeState.allWaste ? \"reduceOpacity\" : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 17\n    }\n  }, \"ALL\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 636,\n      columnNumber: 11\n    }\n  }, \"MONTHLY TREND\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 639,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 641,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 15\n    }\n  }, \"Total Change\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyPurpleColor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 15\n    }\n  }, props.showPounds ? (monthlyChanges.reduce(reducer) * 2.775).toFixed(0) : monthlyChanges.reduce(reducer).toFixed(0)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"monthlyWasteChart__lineChart\",\n    style: {\n      position: \"relative\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 653,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Bar, {\n    data: getChartData,\n    width: graphWidth,\n    height: graphHeight,\n    options: {\n      responsive: true,\n      maintainAspectRatio: true,\n      tooltips: {\n        enabled: false\n      },\n      legend: {\n        display: false\n      },\n      scales: {\n        xAxes: [{\n          display: true,\n          gridLines: {\n            display: false\n          },\n          ticks: {\n            fontColor: \"rgb(15, 128, 140)\",\n            fontSize: xAxisLabel\n          }\n        }],\n        yAxes: [{\n          display: false,\n          gridLines: {}\n        }]\n      },\n      plugins: {\n        datalabels: {\n          display: true,\n          anchor: \"bottom\",\n          align: \"bottom\",\n          color: function (context) {\n            var index = context.dataIndex;\n            var value = context.dataset.data[index];\n\n            if (value > 0) {\n              return \"rgba(255, 0, 0, 0.9)\";\n            } else {\n              if (props.showDarkTheme) {\n                return \"rgb(255, 231, 227)\";\n              } else {\n                return \"rgba(133, 165, 101, 1)\";\n              }\n            }\n          },\n          font: {\n            size: totalMonthlyValueFontSize,\n            weight: 900\n          },\n          formatter: function (value, context) {\n            if (value > 0) {\n              return `+ ${value}`;\n            } else {\n              return value;\n            }\n          }\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 656,\n      columnNumber: 13\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/reports/monthly-waste-report.js"],"names":["React","useState","useEffect","useContext","Bar","Chart","useWindowDimensions","getEndDate","reducer","roundedUpNumberAndTurnBackToNumber","MonthlyWasteContext","AccordionHeading","AccordionBody","WasteLabelsContext","Tooltip","MonthlyWasteChart","props","defaults","global","defaultFontFamily","tooltipIsOpen","setTooltipIsOpen","labels","coverWasteInCurrentMonth","preparationWasteInCurrentMonth","spoilageWasteInCurrentMonth","currentMonthCoverWasteArray","currentMonthPrepWasteArray","currentMonthSpoilageWasteArray","monthlyChanges","handleMonthlyValues","displayMonthlyTrends","monthlySelectedValue","showTooltip","monthlyCoverWaste","setCurrentMonthCoverWasteArray","monthlyPreparationWaste","setCurrentMonthPrepWasteArray","monthlySpoilageWaste","setCurrentMonthSpoilageWasteArray","graphHeight","graphWidth","width","siteId","totalMonthlyValueFontSize","xAxisLabel","barColors","appState","changeState","activeObject","id","val","name","objects","activeState","changeActiveState","coverWaste","spoliageWaste","productionWaste","allWaste","toggleActive","type","showMonthlyChart","siteID","undefined","getChartData","canvas","data","datasets","label","showPounds","map","toFixed","backgroundColor","barPercentage","categoryPercentage","lineTension","months","monthlyWasteTextColor","showDarkTheme","hideReport","handleChangeForCheckedAndAccordion","siteName","display","justifyContent","titleLabels","c","s","toLowerCase","i","fill","minBarLength","responsive","maintainAspectRatio","scales","xAxes","stacked","gridLines","ticks","fontColor","yAxes","plugins","datalabels","anchor","align","color","font","size","weight","acronyms","p","reduce","position","tooltips","enabled","legend","fontSize","context","index","dataIndex","value","dataset","formatter"],"mappings":"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","sourcesContent":["\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport Chart from \"chart.js\";\nimport \"chartjs-plugin-annotation\";\nimport \"chartjs-plugin-datalabels\";\nimport useWindowDimensions from \"../../libs/use-window-dimensions\";\nimport { getEndDate, reducer, roundedUpNumberAndTurnBackToNumber } from \"../../../../utilities\";\n\nimport { MonthlyWasteContext } from \"../../../../contexts/monthly-waste-context\";\n\nimport { AccordionHeading, AccordionBody } from \"../accordion\"\n\nimport { WasteLabelsContext } from \"../../../../contexts/waste-labels-context\";\n\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nexport default function MonthlyWasteChart(props) {\n  Chart.defaults.global.defaultFontFamily = \"CooperHewitt-Book\";\n\n  const [tooltipIsOpen, setTooltipIsOpen] = React.useState(true);\n\n  const {\n    labels\n   } = useContext(WasteLabelsContext);\n\n  const {\n    coverWasteInCurrentMonth,\n    preparationWasteInCurrentMonth,\n    spoilageWasteInCurrentMonth,\n\n    currentMonthCoverWasteArray,\n    currentMonthPrepWasteArray,\n    currentMonthSpoilageWasteArray,\n\n    monthlyChanges,\n\n    handleMonthlyValues,\n    displayMonthlyTrends,\n    monthlySelectedValue,\n\n    showTooltip\n  } = useContext(MonthlyWasteContext);\n\n  const [monthlyCoverWaste, setCurrentMonthCoverWasteArray] = React.useState([0]);\n  const [monthlyPreparationWaste, setCurrentMonthPrepWasteArray] = React.useState([0]);\n  const [monthlySpoilageWaste, setCurrentMonthSpoilageWasteArray] = React.useState([0]);\n\n  let graphHeight = 130;\n  let graphWidth = 400;\n\n  const { width } = useWindowDimensions();\n\n  let siteId;\n\n  let totalMonthlyValueFontSize = \"13\"\n  let xAxisLabel = \"13\"\n\n  if (width <= 700) {\n    graphWidth = 260;\n    graphHeight = 279;\n    totalMonthlyValueFontSize=\"8\"\n    xAxisLabel = \"8\"\n  }\n\n  let barColors;\n\n  const [appState, changeState] = useState({\n    activeObject: {\n      id: 3,\n      val: props.monthlySelectedValue,\n      name: \"TOTAL WASTE\",\n    },\n    objects: [\n      { id: 0, val: \"C\", name: \"COVER WASTE\" },\n      { id: 1, val: \"S\", name: \"SPOILAGE WASTE\" },\n      { id: 2, val: \"P\", name: \"PREPARATION WASTE\" },\n      { id: 3, val: \"A\", name: \"TOTAL WASTE\" },\n    ],\n  });\n\n  const [activeState, changeActiveState] = useState({\n    coverWaste: false,\n    spoliageWaste: false,\n    productionWaste: false,\n    allWaste: true,\n  });\n\n\n  function toggleActive(type) {\n    switch (type) {\n      case \"cover\":\n        changeActiveState({\n          coverWaste: true,\n          spoliageWaste: false,\n          productionWaste: false,\n          allWaste: false,\n        });\n        changeState({ ...appState, activeObject: appState.objects[0] });\n        break;\n      case \"production\":\n        changeActiveState({\n          coverWaste: false,\n          spoliageWaste: false,\n          productionWaste: true,\n          allWaste: false,\n        });\n        changeState({ ...appState, activeObject: appState.objects[2] });\n        break;\n      case \"spoliage\":\n        changeActiveState({\n          coverWaste: false,\n          spoliageWaste: true,\n          productionWaste: false,\n          allWaste: false,\n        });\n        changeState({ ...appState, activeObject: appState.objects[1] });\n        break;\n      case \"all\":\n        changeActiveState({\n          coverWaste: false,\n          spoliageWaste: false,\n          productionWaste: false,\n          allWaste: true,\n        });\n        changeState({ ...appState, activeObject: appState.objects[3] });\n        break;\n      default:\n    }\n  }\n\n\n  useEffect(() => {\n\n    setCurrentMonthCoverWasteArray(currentMonthCoverWasteArray)\n    setCurrentMonthPrepWasteArray(currentMonthPrepWasteArray)\n    setCurrentMonthSpoilageWasteArray(currentMonthSpoilageWasteArray)\n\n    // console.log(\"currentMonthCoverWasteArray\",currentMonthCoverWasteArray)\n    // console.log(\"currentMonthPrepWasteArray\",currentMonthPrepWasteArray)\n    // console.log(\"currentMonthSpoilageWasteArray\",currentMonthSpoilageWasteArray)\n\n    if (props.showMonthlyChart && showTooltip) {\n      setTooltipIsOpen(true)\n    } else {\n      setTooltipIsOpen(false)\n    }\n\n\n    if (monthlySelectedValue === \"C\") {\n      changeActiveState({\n        coverWaste: true,\n        spoliageWaste: false,\n        productionWaste: false,\n        allWaste: false,\n      });\n      changeState({ ...appState, activeObject: appState.objects[0] });\n    } else if (monthlySelectedValue === \"S\") {\n      changeActiveState({\n        coverWaste: false,\n        spoliageWaste: true,\n        productionWaste: false,\n        allWaste: false,\n      });\n      changeState({ ...appState, activeObject: appState.objects[1] });\n    } else if (monthlySelectedValue === \"P\") {\n      changeActiveState({\n        coverWaste: false,\n        spoliageWaste: false,\n        productionWaste: true,\n        allWaste: false,\n      });\n      changeState({ ...appState, activeObject: appState.objects[2] });\n    } else if (monthlySelectedValue === \"A\") {\n      changeActiveState({\n        coverWaste: false,\n        spoliageWaste: false,\n        productionWaste: false,\n        allWaste: true,\n      });\n    }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n},[currentMonthCoverWasteArray, currentMonthPrepWasteArray, currentMonthSpoilageWasteArray, monthlySelectedValue, props.showMonthlyChart]);\n\n\n  if (props.siteID !== undefined) {\n    siteId = props.siteID;\n  }\n\n  const getChartData = (canvas) => {\n    const data = {\n      labels: [\n        \"JAN\",\n        \"FEB\",\n        \"MAR\",\n        \"APR\",\n        \"MAY\",\n        \"JUNE\",\n        \"JULY\",\n        \"AUG\",\n        \"SEPT\",\n        \"OCT\",\n        \"NOV\",\n        \"DEC\",\n      ],\n      datasets: [\n        {\n          label: \"Total wastes\",\n          siteId: siteId,\n          data: props.showPounds\n          ? displayMonthlyTrends.map((data) => {\n            return (data * 2.775).toFixed(0);\n          })\n          : displayMonthlyTrends.map((data) => {\n            return data.toFixed(0);\n          }),\n          backgroundColor: barColors,\n          barPercentage: 0.7,\n          categoryPercentage: 0.9,\n          lineTension: 0,\n        }\n      ],\n    };\n    return data;\n  };\n\n  let months = [\n    \"JAN\",\n    \"FEB\",\n    \"MAR\",\n    \"APR\",\n    \"MAY\",\n    \"JUNE\",\n    \"JULY\",\n    \"AUG\",\n    \"SEP\",\n    \"OCT\",\n    \"NOV\",\n    \"DEC\",\n  ];\n\n  let monthlyWasteTextColor;\n\n  if (props.showDarkTheme) {\n    monthlyWasteTextColor = \"rgb(255, 231, 227)\"\n  } else {\n    monthlyWasteTextColor = \"rgb(15, 128, 140)\"\n  }\n\n  return (\n    <div className={props.hideReport ? \"monthlyWasteChart displayNone\":\"monthlyWasteChart\"}>\n\n    {/* <div className= { props.showDarkTheme ? \"monthlyWasteChart__accordionHeading darkTheme__accordionHeading\":\"monthlyWasteChart__accordionHeading originalTheme__accordionHeading\"}> */}\n\n      <AccordionHeading>\n        <div className=\"section-title\">MONTHLY WASTE & MONTHLY TREND</div>\n        <div className=\"container\">\n          <span onClick={() => props.handleChangeForCheckedAndAccordion(!props.showMonthlyChart, \"monthlyChartSwitch\")}>\n            {props.showMonthlyChart ? (\"X\"):\"| | | \"}\n          </span>\n        </div>\n      </AccordionHeading>\n    {/* </div> */}\n\n      {/* <div className={(props.showMonthlyChart ? \"monthlyWasteChart__accordionContent\"  + \" monthlyWasteChart__accordionContentOpening\" : \"displayNone\" + \" monthlyWasteChart__accordionContentClosing\")}> */}\n\n      <AccordionBody open={props.showMonthlyChart}>\n\n        <div className= { props.showDarkTheme ? \"darkTheme__reportBackgroundColor addPaddingOfHalveRem\": \"originalTheme__reportBackgroundColor addPaddingOfHalveRem\"}>\n\n          <div className=\"report-subtitle\">{props.siteName} </div>\n\n          <div\n            className=\"monthlyWasteChart__titleWrapper\"\n          >\n            <div className=\"section-title\">MONTHLY WASTE <div className=\"applyMarginRightAndLeft\">{props.showPounds? \"(Â£)\" : \"(Kg)\" }</div></div>\n          </div>\n\n          <div className=\"MonthlyWasteChart--spacing--secondRow\">\n\n\n            <div className=\"MonthlyWasteChart--spacing--secondRow--csp\">\n                <>\n              <div\n                style={{\n                  display: \"flex\",\n                  width: \"13%\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <div\n                  className={activeState.coverWaste ? \"active\" : \"inactive\"}\n                  id={1}\n                  onClick={() => {\n                    toggleActive(\"cover\");\n                  }}\n                >\n                </div>\n                <div\n                  className={activeState.spoliageWaste ? \"active\" : \"inactive\"}\n                  id={1}\n                  onClick={() => {\n                    toggleActive(\"spoliage\");\n                  }}\n                >\n                </div>\n                <div\n                  className={activeState.productionWaste ? \"active\" : \"inactive\"}\n                  id={1}\n                  onClick={() => {\n                    toggleActive(\"production\");\n                  }}\n                >\n                </div>\n                <div\n                  className={activeState.allWaste ? \"active\" : \"inactive\"}\n                  id={1}\n                  onClick={() => {\n                    toggleActive(\"all\");\n                  }}\n                >\n                </div>\n              </div>\n\n              <div>\n                <div className=\"monthlyWasteChart__dateLabel__CSP\">\n                  <div className=\"monthlyWasteChart__dateLabel__CSP__coverwastesSquare\"></div>\n                  {labels.titleLabels.c}\n                  <div className=\"monthlyWasteChart__dateLabel__CSP__spoliageSquare\"></div>\n                  {labels.titleLabels.s}\n                  <div className=\"monthlyWasteChart__dateLabel__CSP__preparationSquare\"></div>\n                  {labels.titleLabels.c}\n                </div>\n              </div>\n\n              </>\n\n            </div>\n            </div>\n\n\n          <div className=\"monthlyWasteChart--labelTrends--title\">\n            <div>\n              <div className=\"cooperHewittBold applyBlueTuckGreen\">Monthly Trend: {(appState.activeObject.name).toLowerCase()}</div>\n            </div>\n          </div>\n\n\n          <div className=\"monthlyWasteChart--labelTrends\">\n            {props.showPounds?\n              displayMonthlyTrends.map((data, i) => (\n                <div className=\"monthlyWasteChart--labelTrends__spacing\" key={i}>\n                  {data > 0 ? <div className=\"applyCooperHewittBold monthlyWasteChart--labelTrends__spacing\">{\"+\"}{(data * 2.775).toFixed(0)}</div>:\n\n                  <div className={props.showDarkTheme? \"darkTheme__numberColor cooperHewittBold monthlyWasteChart--labelTrends__spacing\" :\"applyPurpleColor monthlyWasteChart--labelTrends__spacing\"}>\n                    {(data * 2.775).toFixed(0)}\n                  </div>}\n\n                </div>\n              )) :\n              displayMonthlyTrends.map((data, i) => (\n                <div className=\"monthlyWasteChart--labelTrends__spacing\" key={i}>\n                  {data > 0 ? <div className=\"applyCooperHewittBold monthlyWasteChart--labelTrends__spacing\">{\"+\"}{data}</div>:\n\n                  <div className={props.showDarkTheme? \"darkTheme__numberColor cooperHewittBold monthlyWasteChart--labelTrends__spacing\" :\"applyPurpleColor monthlyWasteChart--labelTrends__spacing\"}>\n                    {data}\n                  </div>}\n                </div>\n              ))\n\n            }\n          </div>\n\n          <div className=\"monthlyWasteChart--labelTrends--title\">\n            <div>\n              <div className=\"cooperHewittBold applyBlueTuckGreen\">Monthly Waste:</div>\n            </div>\n          </div>\n\n          <Bar\n            data={{\n              labels: [\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n      ],\n              datasets: [\n                {\n                  label: \"coverWaste\",\n                  data: props.showPounds\n                  ? monthlyCoverWaste.map((data) => {\n                    return (data * 2.775).toFixed(0);\n                  }) : monthlyCoverWaste,\n                  fill: false,\n                  backgroundColor: \"rgba(140, 112, 140, 0.5)\",\n                  minBarLength: 0.3,\n                  barPercentage: 0.7,\n                  categoryPercentage: 0.7,\n                },\n                {\n                  label: \"spoilage\",\n                  data: props.showPounds\n                  ? monthlySpoilageWaste.map((data) => {\n                    return (data * 2.775).toFixed(0);\n                  }) : monthlySpoilageWaste,\n                  fill: false,\n                  backgroundColor: \"rgb(212, 190, 0)\",\n                  minBarLength: 0.3,\n                  barPercentage: 0.7,\n                  categoryPercentage: 0.7,\n                },\n                {\n                  label: \"preparation\",\n                  data: props.showPounds\n                  ? monthlyPreparationWaste.map((data) => {\n                    return (data * 2.775).toFixed(0);\n                  }) : monthlyPreparationWaste,\n                  fill: false,\n                  backgroundColor: \"rgba(133, 165, 101, 0.5)\",\n                  minBarLength: 0.3,\n                  barPercentage: 0.7,\n                  categoryPercentage: 0.7,\n                },\n              ],\n            }}\n            width={graphWidth}\n            height={graphHeight}\n            options={{\n              responsive: true,\n              maintainAspectRatio: true,\n              scales: {\n\n                xAxes: [\n                  {\n                    stacked: true,\n                    gridLines: {\n                      display: false,\n                    },\n                    ticks: {\n                      fontColor: \"rgb(15, 128, 140)\",\n                    },\n                    display: false,\n                  },\n                ],\n                yAxes: [\n                  {\n                    stacked: true,\n                    display: false,\n                    gridLines: {\n                      display: false,\n                    }\n                  },\n                ],\n              },\n\n              plugins: {\n                datalabels: {\n                  display: true,\n                  anchor: \"top\",\n                  align: \"middle\",\n                  color: monthlyWasteTextColor,\n                  font: {\n                          size: 9,\n                          weight: \"bold\",\n                        }\n                },\n              },\n            }}\n          />\n\n          <div\n            className=\"monthlyWasteChart--axisLabel\"\n          >\n            {months.map((data, i) => (\n              <div key={i}>{data}</div>\n            ))}\n          </div>\n\n          <div className=\"monthlyWasteChart__currentMonth applyBlueTuckGreen CSPFullLabelNameFontsize cooperHewittBold\">\n                <div className=\"applyMarginRightAndLeft cooperHewittBold applyGoldColor\">{\"(\" + (getEndDate()) + \")\"}</div>\n\n                  <div className=\"applyMarginRightAndLeft cooperHewittBold\">Current Month Food Waste</div>\n                  C\n\n                  <div className={props.showDarkTheme? \"darkTheme__numberColor applyMarginRightAndLeft cooperHewittBold\" :\"applyPurpleColor applyMarginRightAndLeft cooperHewittBold\"}>\n                    {props.showPounds ? (coverWasteInCurrentMonth * 2.755).toFixed(0)  : roundedUpNumberAndTurnBackToNumber(coverWasteInCurrentMonth) }\n                  </div>\n\n                  <div className=\"applyMarginRightAndLeft cooperHewittBold\">+</div>\n\n                  S\n\n                  <div className={props.showDarkTheme? \"darkTheme__numberColor applyMarginRightAndLeft cooperHewittBold\" :\"applyPurpleColor applyMarginRightAndLeft cooperHewittBold\"}>\n                    {props.showPounds ? (spoilageWasteInCurrentMonth * 2.755).toFixed(0)  : roundedUpNumberAndTurnBackToNumber(spoilageWasteInCurrentMonth) }\n                  </div>\n\n                  <div className=\"applyMarginRightAndLeft cooperHewittBold\">+</div>\n\n                  P\n\n                  <div className={props.showDarkTheme? \"darkTheme__numberColor applyMarginRightAndLeft cooperHewittBold\" :\"applyPurpleColor applyMarginRightAndLeft cooperHewittBold\"}>\n                    {props.showPounds ? (preparationWasteInCurrentMonth * 2.755).toFixed(0)  : roundedUpNumberAndTurnBackToNumber(preparationWasteInCurrentMonth) }\n                  </div>\n\n                  <div className=\"applyMarginRightAndLeft cooperHewittBold\">=</div>\n\n                  <div className={props.showDarkTheme? \"darkTheme__numberColor applyMarginRightAndLeft cooperHewittBold\" :\"applyPurpleColor applyMarginRightAndLeft cooperHewittBold\"}>\n                    {\" \"}\n                    {props.showPounds\n                    ? \"Â£\" + ((roundedUpNumberAndTurnBackToNumber(coverWasteInCurrentMonth) + roundedUpNumberAndTurnBackToNumber(spoilageWasteInCurrentMonth) + roundedUpNumberAndTurnBackToNumber(preparationWasteInCurrentMonth)) * 2.775).toFixed(0)\n                    : (roundedUpNumberAndTurnBackToNumber(coverWasteInCurrentMonth) + roundedUpNumberAndTurnBackToNumber(spoilageWasteInCurrentMonth) + roundedUpNumberAndTurnBackToNumber(preparationWasteInCurrentMonth)) + \"Kg\"}\n                  </div>\n\n              </div>\n\n          <div\n            className=\"monthlyWasteChart__headingSection--spacing\"\n          >\n\n          <div className=\"monthlyWasteChart__CspLabel\">\n            <div\n              className={activeState.coverWaste ? \"active\" : \"inactive\"}\n              id={1}\n              onClick={() => {\n                toggleActive(\"cover\");\n              }}\n            >\n\n              <Tooltip\n                open={tooltipIsOpen}\n                // onOpen={() => setTooltipIsOpen(true)}\n                onClose={() => setTooltipIsOpen(false)}\n                title=\"click on C, S or P waste stream\"\n                arrow\n              >\n\n              <h2 id={\"C\"}\n              onClick={handleMonthlyValues}\n                  className={activeState.coverWaste ? \"reduceOpacity\" : \"\"}\n              >\n                {labels.acronyms.c}\n              </h2>\n\n              </Tooltip>\n\n            </div>\n            <div\n              className={activeState.spoliageWaste ? \"active\" : \"inactive\"}\n              id={1}\n              onClick={() => {\n                toggleActive(\"spoliage\");\n              }}\n            >\n\n              <Tooltip\n                open={tooltipIsOpen}\n                // onOpen={() => setTooltipIsOpen(true)}\n                onClose={() => setTooltipIsOpen(false)}\n                // title=\"click on C, S or P waste stream\"\n                arrow\n              >\n\n              <h2 id={\"S\"}\n              onClick={handleMonthlyValues}\n                  className={activeState.spoliageWaste ? \"reduceOpacity\" : \"\"}\n              >\n                {labels.acronyms.s}\n              </h2>\n\n              </Tooltip>\n\n            </div>\n            <div\n              className={activeState.productionWaste ? \"active\" : \"inactive\"}\n              id={1}\n              onClick={() => {\n                toggleActive(\"production\");\n              }}\n            >\n\n              <Tooltip\n                open={tooltipIsOpen}\n                // onOpen={() => setTooltipIsOpen(true)}\n                onClose={() => setTooltipIsOpen(false)}\n                // title=\"click on C, S or P waste stream\"\n                arrow\n              >\n\n                <h2 id={\"P\"}\n                onClick={handleMonthlyValues}\n                    className={activeState.productionWaste ? \"reduceOpacity\" : \"\"}\n                >\n                  {labels.acronyms.p}\n                </h2>\n\n              </Tooltip>\n\n            </div>\n            <div\n              className={activeState.allWaste ? \"active\" : \"inactive\"}\n              id={1}\n              onClick={() => {\n                toggleActive(\"all\");\n              }}\n            >\n\n              <Tooltip\n                open={tooltipIsOpen}\n                // onOpen={() => setTooltipIsOpen(true)}\n                onClose={() => setTooltipIsOpen(false)}\n                // title=\"click on C, S or P waste stream\"\n                arrow\n              >\n\n                <h2 id={\"A\"}\n                onClick={handleMonthlyValues}\n                  className={activeState.allWaste ? \"reduceOpacity\" : \"\"}\n                >\n                  ALL\n                </h2>\n\n              </Tooltip>\n\n            </div>\n          </div>\n\n          <div className=\"section-title\">MONTHLY TREND</div>\n\n\n            <div className=\"section-title\">\n            </div>\n            <div className=\"section-title\">\n              <div className=\"applyMarginRightAndLeft\">Total Change</div>\n              <div className=\"applyPurpleColor\">\n                {props.showPounds ? (monthlyChanges.reduce(reducer) * 2.775).toFixed(0) : (monthlyChanges.reduce(reducer)).toFixed(0) }\n              </div>\n            </div>\n\n\n\n\n          </div>\n\n          <div\n          className=\"monthlyWasteChart__lineChart\"\n          style={{ position: \"relative\" }}>\n            <Bar\n              data={getChartData}\n              width={graphWidth}\n              height={graphHeight}\n              options={{\n                responsive: true,\n                maintainAspectRatio: true,\n                tooltips: {\n                  enabled: false,\n                },\n                legend: {\n                  display: false,\n                },\n                scales: {\n                  xAxes: [\n                    {\n                      display: true,\n                      gridLines: {\n                        display: false,\n                      },\n                      ticks: {\n                        fontColor: \"rgb(15, 128, 140)\",\n                        fontSize: xAxisLabel\n                      },\n                    },\n                  ],\n                  yAxes: [\n                    {\n                      display: false,\n                      gridLines: {},\n                    },\n                  ],\n                },\n                plugins: {\n                  datalabels: {\n                    display: true,\n                    anchor: \"bottom\",\n                    align: \"bottom\",\n                    color: function (context) {\n                          var index = context.dataIndex;\n                          var value = context.dataset.data[index];\n\n                          if (value > 0) {\n                            return \"rgba(255, 0, 0, 0.9)\";\n                          } else {\n                            if (props.showDarkTheme) {\n                              return \"rgb(255, 231, 227)\";\n                            } else {\n                              return \"rgba(133, 165, 101, 1)\";\n                            }\n\n                          }\n                    },\n                    font: {\n                          size: totalMonthlyValueFontSize,\n                          weight: 900,\n                        },\n                    formatter: function (value, context) {\n\n                      if (value > 0) {\n\n                      return `+ ${value}`\n                      } else {\n                      return value;\n                      }\n                    },\n                  },\n                },\n              }}\n            />\n          </div>\n\n        </div>\n\n      </AccordionBody>\n\n      {/* </div> */}\n\n    </div>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}