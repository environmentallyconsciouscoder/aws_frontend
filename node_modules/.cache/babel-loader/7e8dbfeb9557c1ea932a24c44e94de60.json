{"ast":null,"code":"import moment from \"moment\";\nexport const addDaysToDate = (firstDayOfTheWeek, numberOfdays) => {\n  const new_date = moment(firstDayOfTheWeek).add(numberOfdays, 'days');\n  return new_date.format('MMM DD YYYY');\n};\nexport const formatSiteName = name => {\n  if (name) {\n    return name.replace(/[^A-Za-z]+/g, '').toLowerCase();\n  }\n};\nexport const formatDateToDatabaseDateFormat = date => {\n  return moment(date).format(\"YYYY-MM-DD\");\n};\nexport const getWeekOfTheYear = () => {\n  Date.prototype.getWeek = function () {\n    var target = new Date(this.valueOf());\n    var dayNr = (this.getDay() + 6) % 7;\n    target.setDate(target.getDate() - dayNr + 3);\n    var firstThursday = target.valueOf();\n    target.setMonth(0, 1);\n\n    if (target.getDay() !== 4) {\n      target.setMonth(0, 1 + (4 - target.getDay() + 7) % 7);\n    }\n\n    return 1 + Math.ceil((firstThursday - target) / 604800000);\n  };\n\n  const d = new Date();\n  return d.getWeek();\n}; // function getWeek() {\n//   // Create a copy of this date object\n//   var target  = new Date(this.valueOf());\n//   // ISO week date weeks start on monday, so correct the day number\n//   var dayNr   = (this.getDay() + 6) % 7;\n//   // Set the target to the thursday of this week so the\n//   // target date is in the right year\n//   target.setDate(target.getDate() - dayNr + 3);\n//   // ISO 8601 states that week 1 is the week with january 4th in it\n//   var jan4    = new Date(target.getFullYear(), 0, 4);\n//   // Number of days between target date and january 4th\n//   var dayDiff = (target - jan4) / 86400000;\n//   if(new Date(target.getFullYear(), 0, 1).getDay() < 5) {\n//     // Calculate week number: Week 1 (january 4th) plus the\n//     // number of weeks between target date and january 4th\n//     return 1 + Math.ceil(dayDiff / 7);\n//   }\n//   else {  // jan 4th is on the next week (so next week is week 1)\n//     return Math.ceil(dayDiff / 7);\n//   }\n// }\n\nexport const getMonthAsAnumber = () => {\n  const currentDate = new Date();\n  const getMonthAsAnumber = moment(currentDate).format('M');\n  return getMonthAsAnumber;\n};\nexport const getYear = () => {\n  var d = new Date();\n  var n = d.getFullYear();\n  return n;\n};\nexport const getYearsArray = data => {\n  let yearsArray = [];\n  let date = moment(data).format('YYYY');\n  let todayDate = new Date();\n  let currentYear = todayDate.getFullYear();\n\n  if (currentYear === date) {\n    yearsArray.push({\n      year: date,\n      show: true\n    });\n  } else {\n    for (let year = currentYear; year >= date; year--) {\n      yearsArray.push({\n        year: year,\n        show: year === currentYear\n      });\n    }\n  }\n\n  return yearsArray.reverse();\n};\nexport const splitCamelCaseStringAndMakeFirstCharacterUpperCase = data => {\n  if (data) {\n    const formatedData = data.replace(/([a-z])([A-Z])/g, '$1 $2');\n    const makeFirstCharacterCapital = formatedData.charAt(0).toUpperCase() + formatedData.slice(1);\n    return makeFirstCharacterCapital;\n  }\n};\nexport const getTotalMonthlyValue = (monthlyValueCoverWaste, monthlyValuePreparationWaste, monthlyValueSpoliageWaste) => {\n  let totalMonthlyValue = [];\n  let i;\n\n  if (monthlyValueCoverWaste !== undefined) {\n    for (i = 0; i < 12; i++) {\n      let coverWaste = monthlyValueCoverWaste[i];\n      let preparationWaste = monthlyValuePreparationWaste[i];\n      let spoliageWaste = monthlyValueSpoliageWaste[i];\n      totalMonthlyValue.push(coverWaste + preparationWaste + spoliageWaste);\n    }\n  }\n\n  return totalMonthlyValue;\n};\nexport const reducer = (accumulator, currentValue) => {\n  return accumulator + currentValue;\n};\nexport const getCurrentAndPreviousMonths = () => {\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const date = new Date();\n  const currentMonthNum = date.getMonth();\n  let previousMonthNum;\n\n  if (currentMonthNum === 0) {\n    previousMonthNum = 11;\n  } else {\n    previousMonthNum = currentMonthNum - 1;\n  }\n\n  let values = {\n    currentMonth: months[currentMonthNum],\n    previousMonth: months[previousMonthNum]\n  };\n  return values;\n};\nexport const getMonths = () => {\n  const date = new Date();\n  const month = date.getMonth();\n  return month;\n};\nexport const getMonthsWord = () => {\n  const date = new Date();\n  const month = date.getMonth();\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  return months[month];\n};\nexport const roundedUpNumberAndTurnBackToString = data => {\n  if (data) {\n    let changeToNumber = parseFloat(data);\n    let roundUp = parseInt(changeToNumber.toFixed(0));\n    return parseInt(roundUp);\n  }\n\n  if (0) {\n    return parseInt(data);\n  }\n\n  if (\"0\") {\n    return parseInt(data);\n  }\n};\nexport const roundedUpNumberAndTurnBackToNumber = data => {\n  if (data) {\n    let changeToNumber = parseFloat(data);\n    let roundUp = parseInt(changeToNumber.toFixed(0));\n    return parseInt(roundUp);\n  }\n\n  if (0) {\n    return parseInt(data);\n  }\n\n  if (\"0\") {\n    return parseInt(data);\n  }\n};\nexport const roundedUpNumberTwoPointsAndTurnBackToString = data => {\n  if (data) {\n    // let roundUp = parseFloat(data).toFixed(2);\n    let roundUp = parseFloat(data.toFixed(2));\n    return parseFloat(roundUp);\n  }\n\n  if (0) {\n    return data;\n  }\n};\nexport const getLocalStorageData = data => {\n  const localData = localStorage.getItem(data);\n  return localData ? JSON.parse(localData) : [];\n};\nexport const setItemInLocalStorage = (name, data) => {\n  localStorage.setItem(name, JSON.stringify(data));\n};\nexport const formatStartDate = startDate => {\n  var data = moment(startDate);\n  var newDateFormat = data.format(\"MMM\").toUpperCase().substr(0, 3) + \"-\" + data.format(\"D\");\n  return newDateFormat;\n};\nexport const getEndDate = () => {\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const today = new Date();\n  const dayNumber = String(today.getDate());\n  const monthNumber = parseInt(String(today.getMonth())); //January is 0!\n\n  const monthName = months[monthNumber];\n  const monthName3Characters = monthName.toUpperCase().substr(0, 3);\n  return monthName3Characters + \"-\" + dayNumber;\n};\nexport const hourlyWasteDateConverter = data => {\n  var date = moment(data, \"YYYY-MM-DD\");\n  return date.format(\"dddd\").toUpperCase().substr(0, 3) + \" \" + date.format(\"Do\");\n};\nexport const total = data => {\n  return data.reduce((a, b) => a + b, 0);\n};\nexport const totalCosts = (allSites, data) => {\n  return allSites.map(site => {\n    return site[data];\n  }).reduce((a, b) => a + b, 0);\n};\nexport const numberOfMonthsBetweenStartDateAndCurrentDate = startData => {\n  const startYear = new Date(startData).getFullYear();\n  const thisYear = new Date().getFullYear();\n  const thisYearMinisStartYear = thisYear - startYear;\n  let totalNumberOfMonths = [];\n\n  for (let i = 0; i <= thisYearMinisStartYear; i++) {\n    const year = startYear + i;\n\n    if (year === thisYear) {\n      const thisYearMonths = new Date().getMonth();\n      const formatedMonthsToGet1To12Not0To11 = thisYearMonths + 1;\n      totalNumberOfMonths.push(formatedMonthsToGet1To12Not0To11);\n    } else if (year === startYear) {\n      const formatedToMomentData = moment(startData, \"YYYY-MM-DD\");\n      const months = formatedToMomentData.format('M'); //if the start date is in december it will count that one month\n\n      let numOfMonths;\n\n      if (12 - months === 0) {\n        numOfMonths = 1;\n      } else {\n        numOfMonths = 12 - months;\n      }\n\n      totalNumberOfMonths.push(numOfMonths);\n    } else {\n      totalNumberOfMonths.push(12);\n    }\n  }\n\n  const sumOfTotalNumberOfMonths = totalNumberOfMonths.reduce((a, b) => a + b, 0);\n  return sumOfTotalNumberOfMonths;\n};\nexport const convertDate = dateLabel => {\n  let formatedDateLabel;\n  let formattingDataLabel = dateLabel.map(date => {\n    var data = moment(date, \"YYYY-MM-DD\");\n    let formatedDateLabel = [];\n    formatedDateLabel.push(data.format(\"dddd\").toUpperCase().substr(0, 3) + \" \" + data.format(\"D\"));\n    return formatedDateLabel;\n  });\n  formatedDateLabel = formattingDataLabel;\n  return formatedDateLabel;\n};\nexport const weeklyWasteDateRange = dateLabel => {\n  if (dateLabel !== undefined) {\n    let lastWeek = moment(dateLabel.lastWeek, \"YYYY-MM-DD\");\n    let thisWeek = moment(dateLabel.thisWeek, \"YYYY-MM-DD\");\n    let lastWeekMonthName = lastWeek.format(\"MMMM\").substr(0, 3);\n    let thisWeekMonthName = thisWeek.format(\"MMMM\").substr(0, 3);\n    let convertToJavascriptDataOflastWeekDate = new Date(lastWeek);\n    let dateNumberOfLastWeek = convertToJavascriptDataOflastWeekDate.getDate();\n    let convertToJavascriptData = new Date(thisWeek);\n    let sixDays = 60 * 60 * 24 * 1000 * 6;\n    let datein6daysTime = new Date(convertToJavascriptData.getTime() + sixDays);\n    let dateNumber = datein6daysTime.getDate();\n    return `${dateNumberOfLastWeek} ${lastWeekMonthName} to ${dateNumber} ${thisWeekMonthName} `;\n  }\n};\nexport const wasteDailyDateRange = dateLabel => {\n  let formatedDateLabel;\n  let monthName;\n  let formatingDateLabel = dateLabel.map(date => {\n    var data = moment(date, \"YYYY-MM-DD\");\n    let formatedDateLabel = [];\n    formatedDateLabel.push(parseInt(data.format(\"D\")));\n    monthName = data.format(\"MMMM\").substr(0, 3);\n    return formatedDateLabel;\n  });\n  formatedDateLabel = formatingDateLabel;\n  let indexOfLastArrayValue = formatedDateLabel.length - 1;\n  let smallestNumber = formatedDateLabel[0];\n  let highestNumber = formatedDateLabel[indexOfLastArrayValue];\n  return smallestNumber + \"-\" + highestNumber + \" \" + monthName;\n};\nexport const maxNumForHourlyChartFunction = hourlyWasteValues => {\n  // return Math.max.apply(Math, hourlyWasteValues) + 5;\n  let maxNum = Math.max.apply(Math, hourlyWasteValues);\n  return Math.max.apply(Math, hourlyWasteValues) + maxNum;\n};\nexport const maxNumForCoverPerWasteChartFunction = data => {\n  // let maxNum = 0.5;\n  let maxNum = Math.max.apply(Math, data);\n  return Math.max.apply(Math, data) + maxNum;\n};\nexport const maxNumArrays = (array1, array2, array3) => {\n  let newArray = [];\n  newArray.push(Math.max.apply(Math, array1));\n  newArray.push(Math.max.apply(Math, array2));\n  newArray.push(Math.max.apply(Math, array3));\n  return Math.max.apply(Math, newArray);\n};\nexport const maxNumArray = array => {\n  return Math.max.apply(Math, array) + 50;\n};\nexport const minNumArray = array => {\n  return Math.min.apply(Math, array);\n};\nexport const calculateTodaysDate = () => {\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  const today = new Date();\n  const dayNumber = String(today.getDate());\n  const monthNumber = parseInt(String(today.getMonth())); //January is 0!\n\n  const monthName = months[monthNumber];\n  const year = today.getFullYear();\n  const date = new Date();\n  const index = date.getDay();\n  const daysName = days[index];\n  return daysName + \" \" + dayNumber + \" \" + monthName + \" \" + year;\n};","map":{"version":3,"sources":["/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/utilities.js"],"names":["moment","addDaysToDate","firstDayOfTheWeek","numberOfdays","new_date","add","format","formatSiteName","name","replace","toLowerCase","formatDateToDatabaseDateFormat","date","getWeekOfTheYear","Date","prototype","getWeek","target","valueOf","dayNr","getDay","setDate","getDate","firstThursday","setMonth","Math","ceil","d","getMonthAsAnumber","currentDate","getYear","n","getFullYear","getYearsArray","data","yearsArray","todayDate","currentYear","push","year","show","reverse","splitCamelCaseStringAndMakeFirstCharacterUpperCase","formatedData","makeFirstCharacterCapital","charAt","toUpperCase","slice","getTotalMonthlyValue","monthlyValueCoverWaste","monthlyValuePreparationWaste","monthlyValueSpoliageWaste","totalMonthlyValue","i","undefined","coverWaste","preparationWaste","spoliageWaste","reducer","accumulator","currentValue","getCurrentAndPreviousMonths","months","currentMonthNum","getMonth","previousMonthNum","values","currentMonth","previousMonth","getMonths","month","getMonthsWord","roundedUpNumberAndTurnBackToString","changeToNumber","parseFloat","roundUp","parseInt","toFixed","roundedUpNumberAndTurnBackToNumber","roundedUpNumberTwoPointsAndTurnBackToString","getLocalStorageData","localData","localStorage","getItem","JSON","parse","setItemInLocalStorage","setItem","stringify","formatStartDate","startDate","newDateFormat","substr","getEndDate","today","dayNumber","String","monthNumber","monthName","monthName3Characters","hourlyWasteDateConverter","total","reduce","a","b","totalCosts","allSites","map","site","numberOfMonthsBetweenStartDateAndCurrentDate","startData","startYear","thisYear","thisYearMinisStartYear","totalNumberOfMonths","thisYearMonths","formatedMonthsToGet1To12Not0To11","formatedToMomentData","numOfMonths","sumOfTotalNumberOfMonths","convertDate","dateLabel","formatedDateLabel","formattingDataLabel","weeklyWasteDateRange","lastWeek","thisWeek","lastWeekMonthName","thisWeekMonthName","convertToJavascriptDataOflastWeekDate","dateNumberOfLastWeek","convertToJavascriptData","sixDays","datein6daysTime","getTime","dateNumber","wasteDailyDateRange","formatingDateLabel","indexOfLastArrayValue","length","smallestNumber","highestNumber","maxNumForHourlyChartFunction","hourlyWasteValues","maxNum","max","apply","maxNumForCoverPerWasteChartFunction","maxNumArrays","array1","array2","array3","newArray","maxNumArray","array","minNumArray","min","calculateTodaysDate","days","index","daysName"],"mappings":"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","sourcesContent":["import moment from \"moment\";\n\nexport const addDaysToDate = (firstDayOfTheWeek, numberOfdays) => {\n  const new_date = moment(firstDayOfTheWeek).add(numberOfdays, 'days');\n  return new_date.format('MMM DD YYYY');\n}\n\nexport const formatSiteName = (name) => {\n  if (name) {\n    return name.replace(/[^A-Za-z]+/g, '').toLowerCase();\n  }\n}\n\nexport const formatDateToDatabaseDateFormat = (date) => {\n  return moment(date).format(\"YYYY-MM-DD\");\n};\n\nexport const getWeekOfTheYear = () => {\n\n  Date.prototype.getWeek = function () {\n    var target  = new Date(this.valueOf());\n    var dayNr   = (this.getDay() + 6) % 7;\n    target.setDate(target.getDate() - dayNr + 3);\n    var firstThursday = target.valueOf();\n    target.setMonth(0, 1);\n    if (target.getDay() !== 4) {\n        target.setMonth(0, 1 + ((4 - target.getDay()) + 7) % 7);\n    }\n    return 1 + Math.ceil((firstThursday - target) / 604800000);\n  }\n\n  const d= new Date();\n  return d.getWeek()\n}\n\n// function getWeek() {\n//   // Create a copy of this date object\n//   var target  = new Date(this.valueOf());\n\n//   // ISO week date weeks start on monday, so correct the day number\n//   var dayNr   = (this.getDay() + 6) % 7;\n\n//   // Set the target to the thursday of this week so the\n//   // target date is in the right year\n//   target.setDate(target.getDate() - dayNr + 3);\n\n//   // ISO 8601 states that week 1 is the week with january 4th in it\n//   var jan4    = new Date(target.getFullYear(), 0, 4);\n\n//   // Number of days between target date and january 4th\n//   var dayDiff = (target - jan4) / 86400000;\n\n//   if(new Date(target.getFullYear(), 0, 1).getDay() < 5) {\n//     // Calculate week number: Week 1 (january 4th) plus the\n//     // number of weeks between target date and january 4th\n//     return 1 + Math.ceil(dayDiff / 7);\n//   }\n//   else {  // jan 4th is on the next week (so next week is week 1)\n//     return Math.ceil(dayDiff / 7);\n//   }\n// }\n\nexport const getMonthAsAnumber = () => {\n  const currentDate = new Date();\n  const getMonthAsAnumber = moment(currentDate).format('M');\n  return getMonthAsAnumber;\n}\n\nexport const getYear = () => {\n  var d = new Date();\n  var n = d.getFullYear();\n  return n;\n}\n\nexport const getYearsArray = (data) => {\n\n  let yearsArray = [];\n\n  let date = moment(data).format('YYYY')\n  let todayDate = new Date();\n  let currentYear = todayDate.getFullYear();\n\n  if (currentYear === date) {\n    yearsArray.push({\n      year: date,\n      show: true\n    });\n  } else {\n    for (let year = currentYear; year >= date; year--) {\n      yearsArray.push({\n        year: year,\n        show: year === currentYear\n      });\n    }\n  }\n  return yearsArray.reverse();\n};\n\nexport const splitCamelCaseStringAndMakeFirstCharacterUpperCase = (data) => {\n  if (data) {\n    const formatedData = data.replace(/([a-z])([A-Z])/g, '$1 $2');\n    const makeFirstCharacterCapital = formatedData.charAt(0).toUpperCase() + formatedData.slice(1)\n    return makeFirstCharacterCapital;\n  }\n}\n\nexport const getTotalMonthlyValue = (\n  monthlyValueCoverWaste,\n  monthlyValuePreparationWaste,\n  monthlyValueSpoliageWaste\n) => {\n  let totalMonthlyValue = [];\n  let i;\n  if (monthlyValueCoverWaste !== undefined) {\n    for (i = 0; i < 12; i++) {\n      let coverWaste = monthlyValueCoverWaste[i];\n      let preparationWaste =\n        monthlyValuePreparationWaste[i];\n      let spoliageWaste = monthlyValueSpoliageWaste[i];\n\n      totalMonthlyValue.push(coverWaste + preparationWaste + spoliageWaste);\n    }\n  }\n  return totalMonthlyValue;\n};\n\nexport const reducer = (accumulator, currentValue) => {\n  return accumulator + currentValue;\n}\n\nexport const getCurrentAndPreviousMonths = () => {\n  const months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  const date  = new Date();\n  const currentMonthNum = date.getMonth();\n  let previousMonthNum;\n  if (currentMonthNum === 0) {\n    previousMonthNum = 11\n  } else {\n    previousMonthNum = currentMonthNum - 1\n  }\n  let values = {\n    currentMonth: months[currentMonthNum],\n    previousMonth: months[previousMonthNum]\n  }\n  return values;\n}\n\nexport const getMonths = () => {\n  const date  = new Date();\n  const month = date.getMonth();\n  return month;\n}\n\nexport const getMonthsWord = () => {\n  const date  = new Date();\n  const month = date.getMonth();\n  const months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  return months[month];\n}\n\nexport const roundedUpNumberAndTurnBackToString = (data) => {\n  if (data) {\n    let changeToNumber = parseFloat(data)\n    let roundUp = parseInt(changeToNumber.toFixed(0));\n    return parseInt(roundUp)\n  }\n  if(0){\n    return parseInt(data)\n  }\n  if(\"0\"){\n    return parseInt(data)\n  }\n};\n\nexport const roundedUpNumberAndTurnBackToNumber = (data) => {\n  if (data) {\n    let changeToNumber = parseFloat(data)\n    let roundUp = parseInt(changeToNumber.toFixed(0));\n    return parseInt(roundUp)\n  }\n  if(0){\n    return parseInt(data)\n  }\n  if(\"0\"){\n    return parseInt(data)\n  }\n};\n\nexport const roundedUpNumberTwoPointsAndTurnBackToString = (data) => {\n  if (data) {\n    // let roundUp = parseFloat(data).toFixed(2);\n    let roundUp = parseFloat(data.toFixed(2));\n    return parseFloat(roundUp)\n  }\n  if(0){\n    return data\n  }\n}\n\nexport const getLocalStorageData = (data) => {\n  const localData = localStorage.getItem(data);\n  return localData ? JSON.parse(localData) : [];\n};\n\nexport const setItemInLocalStorage = (name, data) => {\n  localStorage.setItem(name, JSON.stringify(data));\n};\n\nexport const formatStartDate = (startDate) => {\n  var data = moment(startDate);\n  var newDateFormat =\n    data.format(\"MMM\").toUpperCase().substr(0, 3) + \"-\" + data.format(\"D\");\n  return newDateFormat;\n};\n\nexport const getEndDate = () => {\n  const months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  const today = new Date();\n  const dayNumber = String(today.getDate());\n  const monthNumber = parseInt(String(today.getMonth())); //January is 0!\n  const monthName = months[monthNumber];\n  const monthName3Characters = monthName.toUpperCase().substr(0, 3);\n  return monthName3Characters + \"-\" + dayNumber;\n};\n\nexport const hourlyWasteDateConverter = (data) => {\n  var date = moment(data, \"YYYY-MM-DD\");\n  return (\n    date.format(\"dddd\").toUpperCase().substr(0, 3) + \" \" + date.format(\"Do\")\n  );\n};\n\nexport const total = (data) => {\n  return data.reduce((a, b) => a + b, 0);\n};\n\nexport const totalCosts = (allSites, data) => {\n  return allSites\n    .map((site) => {\n      return site[data];\n    })\n    .reduce((a, b) => a + b, 0);\n};\n\nexport const numberOfMonthsBetweenStartDateAndCurrentDate = (startData) => {\n\n  const startYear = new Date(startData).getFullYear();\n  const thisYear = new Date().getFullYear();\n  const thisYearMinisStartYear = thisYear - startYear;\n\n  let totalNumberOfMonths = [];\n\n  for (let i = 0; i <= thisYearMinisStartYear; i++) {\n    const year = startYear + i\n\n    if (year === thisYear) {\n      const thisYearMonths = new Date().getMonth();\n      const formatedMonthsToGet1To12Not0To11 = thisYearMonths + 1\n      totalNumberOfMonths.push(formatedMonthsToGet1To12Not0To11);\n    } else if (year === startYear) {\n      const formatedToMomentData = moment(startData, \"YYYY-MM-DD\");\n      const months = formatedToMomentData.format('M');\n      //if the start date is in december it will count that one month\n      let numOfMonths;\n      if ((12 - months) === 0) {\n        numOfMonths = 1\n      } else {\n        numOfMonths = 12 - months\n      }\n      totalNumberOfMonths.push(numOfMonths);\n    } else {\n      totalNumberOfMonths.push(12);\n    }\n  }\n\n  const sumOfTotalNumberOfMonths = totalNumberOfMonths.reduce((a, b) => a + b, 0)\n  return sumOfTotalNumberOfMonths;\n};\n\nexport const convertDate = (dateLabel) => {\n  let formatedDateLabel;\n  let formattingDataLabel = dateLabel.map((date) => {\n    var data = moment(date, \"YYYY-MM-DD\");\n    let formatedDateLabel = [];\n    formatedDateLabel.push(\n      data.format(\"dddd\").toUpperCase().substr(0, 3) + \" \" + data.format(\"D\")\n    );\n    return formatedDateLabel;\n  });\n  formatedDateLabel = formattingDataLabel\n  return formatedDateLabel;\n};\n\nexport const weeklyWasteDateRange = (dateLabel) => {\n  if (dateLabel !== undefined) {\n    let lastWeek = moment(dateLabel.lastWeek, \"YYYY-MM-DD\");\n    let thisWeek = moment(dateLabel.thisWeek, \"YYYY-MM-DD\");\n    let lastWeekMonthName = lastWeek.format(\"MMMM\").substr(0, 3);\n    let thisWeekMonthName = thisWeek.format(\"MMMM\").substr(0, 3);\n\n    let convertToJavascriptDataOflastWeekDate = new Date(lastWeek);\n    let dateNumberOfLastWeek = convertToJavascriptDataOflastWeekDate.getDate()\n\n    let convertToJavascriptData = new Date(thisWeek);\n    let sixDays = (60 * 60 * 24 * 1000) * 6;\n    let datein6daysTime = new Date(convertToJavascriptData.getTime() + sixDays);\n    let dateNumber = datein6daysTime.getDate()\n\n    return `${dateNumberOfLastWeek} ${lastWeekMonthName} to ${dateNumber} ${thisWeekMonthName} `\n  }\n}\n\nexport const wasteDailyDateRange = (dateLabel) => {\n  let formatedDateLabel;\n  let monthName;\n\n  let formatingDateLabel = dateLabel.map((date) => {\n\n    var data = moment(date, \"YYYY-MM-DD\");\n\n    let formatedDateLabel = [];\n    formatedDateLabel.push(parseInt(data.format(\"D\")));\n\n    monthName = data.format(\"MMMM\").substr(0, 3);\n    return formatedDateLabel\n  });\n\n  formatedDateLabel = formatingDateLabel\n\n  let indexOfLastArrayValue = formatedDateLabel.length - 1\n\n  let smallestNumber = formatedDateLabel[0];\n  let highestNumber = formatedDateLabel[indexOfLastArrayValue];\n\n  return smallestNumber + \"-\" + highestNumber + \" \" + monthName;\n};\n\nexport const maxNumForHourlyChartFunction = (hourlyWasteValues) => {\n  // return Math.max.apply(Math, hourlyWasteValues) + 5;\n  let maxNum = Math.max.apply(Math, hourlyWasteValues)\n  return Math.max.apply(Math, hourlyWasteValues) + maxNum\n};\n\nexport const maxNumForCoverPerWasteChartFunction = (data) => {\n  // let maxNum = 0.5;\n  let maxNum = Math.max.apply(Math, data)\n  return Math.max.apply(Math, data) + maxNum;\n};\n\nexport const maxNumArrays = (array1, array2, array3) => {\n  let newArray = [];\n  newArray.push(Math.max.apply(Math, array1));\n  newArray.push(Math.max.apply(Math, array2));\n  newArray.push(Math.max.apply(Math, array3));\n  return Math.max.apply(Math, newArray);\n};\n\nexport const maxNumArray = (array) => {\n  return Math.max.apply(Math, array) + 50;\n};\n\nexport const minNumArray = (array) => {\n  return Math.min.apply(Math, array);\n};\n\nexport const calculateTodaysDate = () => {\n  const months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  const days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  const today = new Date();\n  const dayNumber = String(today.getDate());\n  const monthNumber = parseInt(String(today.getMonth())); //January is 0!\n  const monthName = months[monthNumber];\n  const year = today.getFullYear();\n  const date = new Date();\n  const index = date.getDay();\n  const daysName = days[index];\n\n  return daysName + \" \" + dayNumber + \" \" + monthName + \" \" + year;\n};\n"]},"metadata":{},"sourceType":"module"}