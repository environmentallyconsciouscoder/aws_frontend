{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/CODE/greenkode-dashboard/frontend/greenkode/src/contexts/event-production-waste-context.js\";\nimport React, { createContext, useEffect, useState } from 'react';\nimport { getProductionPreparationInputsForGraph } from \"../api\";\nimport { getWeekOfTheYear, reducer } from \"../utilities.js\";\nimport { colors } from \"../helper.js\";\nexport const EventProductionWasteContext = createContext();\n\nconst EventProductionWasteProvider = props => {\n  const [chartData, setChartData] = useState([]);\n  const [allFormatedData, setAllFormatedData] = useState([]);\n  const [index, setIndex] = useState(0);\n  const [prodPrepInputsData, setProdPrepInputsData] = useState([]);\n  useEffect(() => {\n    if (props.companyId && props.companyName && props.siteName) {} // const companyNumber = props.companyId;\n    // const companyName = props.companyName;\n    // const siteID = props.siteName;\n    // const weekOfYear = getWeekOfTheYear();\n    // const weekOfYear = 43;\n    // getProductionPreparationInputsForGraph(companyNumber, companyName, siteID, weekOfYear).then((data) => {\n    //   filterDataForChart(data[0].productionWasteWeek);\n    // });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [props.siteName, props.companyId, props.companyName, props.updateGraph]);\n\n  const callProductionPreparationInputsFunc = (companyNumber, companyName, siteID, weekOfYear) => {\n    getProductionPreparationInputsForGraph(companyNumber, companyName, siteID, weekOfYear).then(data => {\n      setProdPrepInputsData(data);\n\n      if (data.length !== 0) {\n        filterDataForChart(data.productionPrepWaste[0].productionWasteWeek);\n      }\n    });\n  };\n\n  const filterDataForChart = data => {\n    const dataFromDB = data;\n    let sumOfTotalWeight = [];\n    [0, 1, 2, 3, 4, 5, 6].map(num => {\n      let arr = [];\n      dataFromDB[num].map(data => {\n        arr.push(Math.round(data.totalWeight));\n      });\n      sumOfTotalWeight.push(arr.reduce(reducer));\n    });\n    let removeEmptyArray = [];\n    data.filter((item, i) => {\n      item.filter((val, index) => {\n        if (val.productionFood !== \"\") {\n          const totalWeight = sumOfTotalWeight[i];\n          const percent = Math.round(val.totalWeight) / totalWeight * 100;\n          val.productionFood = val.productionFood + \" \" + Math.round(percent) + \"%\";\n          removeEmptyArray.push(val);\n        }\n\n        return \"\";\n      });\n    });\n    let putAlllabelsInArray = [];\n    removeEmptyArray.map(item => {\n      putAlllabelsInArray.push(item.productionFood.toLowerCase());\n      return \"\";\n    });\n    let dataSet = [];\n    putAlllabelsInArray.map((label, i) => {\n      const dataFormatForChart = {\n        label: label,\n        data: [0, 0, 0, 0, 0, 0, 0],\n        fill: false,\n        backgroundColor: colors[i],\n        minBarLength: 0.3,\n        barPercentage: 0.7,\n        categoryPercentage: 0.7\n      };\n      dataSet.push(dataFormatForChart);\n      return \"\";\n    });\n\n    if (removeEmptyArray.length !== 0) {\n      dataFromDB.map((itemArr, i) => {\n        itemArr.map(item => {\n          dataSet.map(val => {\n            if (val.label === item.productionFood.toLowerCase()) {\n              val.data[i] = parseInt(item.totalWeight);\n              return \"\";\n            } else {\n              return \"\";\n            }\n\n            ;\n          });\n        });\n      });\n    }\n\n    ;\n    var d = new Date();\n    var n = d.getDay();\n    let day;\n\n    if (n === 0) {\n      day = 6;\n    } else {\n      day = n - 1;\n    }\n\n    let result = dataSet.filter(item => {\n      return item.data[day] > 0;\n    });\n    setIndex(day);\n    setChartData(result);\n    setAllFormatedData(dataSet);\n  };\n\n  const filterDataByDate = index => {\n    let result = allFormatedData.filter(item => {\n      return item.data[index] > 0;\n    });\n    setChartData(result);\n    setIndex(index);\n  };\n\n  return /*#__PURE__*/React.createElement(EventProductionWasteContext.Provider, {\n    value: {\n      filterDataByDate,\n      chartData,\n      allFormatedData,\n      index,\n      callProductionPreparationInputsFunc,\n      prodPrepInputsData\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default EventProductionWasteProvider;","map":{"version":3,"sources":["/Users/james/Documents/CODE/greenkode-dashboard/frontend/greenkode/src/contexts/event-production-waste-context.js"],"names":["React","createContext","useEffect","useState","getProductionPreparationInputsForGraph","getWeekOfTheYear","reducer","colors","EventProductionWasteContext","EventProductionWasteProvider","props","chartData","setChartData","allFormatedData","setAllFormatedData","index","setIndex","prodPrepInputsData","setProdPrepInputsData","companyId","companyName","siteName","updateGraph","callProductionPreparationInputsFunc","companyNumber","siteID","weekOfYear","then","data","length","filterDataForChart","productionPrepWaste","productionWasteWeek","dataFromDB","sumOfTotalWeight","map","num","arr","push","Math","round","totalWeight","reduce","removeEmptyArray","filter","item","i","val","productionFood","percent","putAlllabelsInArray","toLowerCase","dataSet","label","dataFormatForChart","fill","backgroundColor","minBarLength","barPercentage","categoryPercentage","itemArr","parseInt","d","Date","n","getDay","day","result","filterDataByDate","children"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from 'react'\nimport { getProductionPreparationInputsForGraph } from \"../api\";\nimport { getWeekOfTheYear, reducer } from \"../utilities.js\"\nimport { colors } from \"../helper.js\"\n\nexport const EventProductionWasteContext = createContext()\n\nconst EventProductionWasteProvider = props => {\n\n  const [chartData, setChartData] = useState([]);\n  const [allFormatedData, setAllFormatedData] = useState([])\n  const [index, setIndex] = useState(0);\n  const [prodPrepInputsData, setProdPrepInputsData] = useState([]);\n\n  useEffect(() => {\n\n    if (props.companyId && props.companyName && props.siteName) {\n\n        // const companyNumber = props.companyId;\n        // const companyName = props.companyName;\n        // const siteID = props.siteName;\n        // const weekOfYear = getWeekOfTheYear();\n        // const weekOfYear = 43;\n\n        // getProductionPreparationInputsForGraph(companyNumber, companyName, siteID, weekOfYear).then((data) => {\n        //   filterDataForChart(data[0].productionWasteWeek);\n        // });\n\n    }\n   // eslint-disable-next-line react-hooks/exhaustive-deps\n}, [ props.siteName, props.companyId, props.companyName, props.updateGraph])\n\n  const callProductionPreparationInputsFunc = ((companyNumber, companyName, siteID, weekOfYear) => {\n    getProductionPreparationInputsForGraph(companyNumber, companyName, siteID, weekOfYear).then((data) => {\n      setProdPrepInputsData(data);\n      if (data.length !== 0) {\n        filterDataForChart(data.productionPrepWaste[0].productionWasteWeek);\n      }\n    });\n  })\n\n  const filterDataForChart = (data) => {\n\n    const dataFromDB = data;\n    let sumOfTotalWeight = [];\n    [0,1,2,3,4,5,6].map((num) => {\n      let arr = [];\n      dataFromDB[num].map((data) => {\n        arr.push(Math.round(data.totalWeight));\n      });\n      sumOfTotalWeight.push(arr.reduce(reducer))\n    })\n\n    let removeEmptyArray = [];\n\n    data.filter((item, i) => {\n      item.filter((val, index) => {\n        if (val.productionFood !== \"\") {\n          const totalWeight = sumOfTotalWeight[i]\n          const percent = (Math.round(val.totalWeight) / totalWeight) * 100;\n          val.productionFood = val.productionFood + \" \" + Math.round(percent) + \"%\";\n          removeEmptyArray.push(val);\n        }\n        return \"\"\n      });\n    });\n\n    let putAlllabelsInArray = []\n\n    removeEmptyArray.map((item) => {\n        putAlllabelsInArray.push(item.productionFood.toLowerCase())\n      return \"\";\n    })\n\n    let dataSet = []\n\n    putAlllabelsInArray.map((label, i) => {\n      const dataFormatForChart = {\n        label: label,\n        data: [0, 0, 0, 0, 0, 0, 0],\n        fill: false,\n        backgroundColor: colors[i],\n        minBarLength: 0.3,\n        barPercentage: 0.7,\n        categoryPercentage: 0.7,\n      };\n      dataSet.push(dataFormatForChart)\n      return \"\";\n    })\n\n    if (removeEmptyArray.length !== 0) {\n      dataFromDB.map((itemArr, i) => {\n        itemArr.map((item) => {\n          dataSet.map((val) => {\n            if (val.label === item.productionFood.toLowerCase()) {\n              val.data[i] = parseInt(item.totalWeight)\n              return \"\";\n            } else {\n              return \"\";\n            };\n          });\n        });\n      });\n    };\n\n    var d = new Date();\n    var n = d.getDay()\n    let day;\n    if (n=== 0) {\n      day = 6;\n    } else {\n      day = n - 1;\n    }\n\n    let result = dataSet.filter((item) => {\n      return item.data[day] > 0;\n    });\n\n\n    setIndex(day)\n    setChartData(result)\n    setAllFormatedData(dataSet)\n  };\n\n  const filterDataByDate = (index) => {\n    let result = allFormatedData.filter((item) => {\n        return item.data[index] > 0;\n    });\n    setChartData(result)\n    setIndex(index)\n\n  }\n\n  return (\n    <EventProductionWasteContext.Provider\n      value={{\n        filterDataByDate,\n        chartData,\n        allFormatedData,\n        index,\n        callProductionPreparationInputsFunc,\n        prodPrepInputsData\n      }}\n    >\n      {props.children}\n    </EventProductionWasteContext.Provider>\n  )\n}\n\nexport default EventProductionWasteProvider"]},"metadata":{},"sourceType":"module"}