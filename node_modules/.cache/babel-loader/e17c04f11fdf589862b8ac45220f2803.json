{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/reports/waste-per-cover-report.js\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport \"chartjs-plugin-annotation\";\nimport \"chartjs-plugin-datalabels\";\nimport useWindowDimensions from \"../../libs/use-window-dimensions\";\nimport { WastePerCoverContext } from \"../../../../contexts/waste-per-cover-context\";\nimport { WasteCapContext } from \"../../../../contexts/waste-cap-context\";\nimport { WasteLabelsContext } from \"../../../../contexts/waste-labels-context\";\nimport { AccordionHeading, AccordionBody } from \"../accordion\";\nimport { setItemInLocalStorage, maxNumForCoverPerWasteChartFunction } from \"../../../../utilities.js\";\nimport { keepTwoDecimalPlacesWithoutRoundingUp, isInt, getIndexesForBackgroundColours } from \"../../../../helper.js\";\nimport Capping from \"./../reuseable-components/labels/capping\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nlet graphHeight = 500;\nlet graphWidth = 1100;\nexport default function CoverPerWasteGraph(props) {\n  const [tooltipIsOpen, setTooltipIsOpen] = React.useState(true);\n  const {\n    labels\n  } = useContext(WasteLabelsContext);\n  const {\n    activeState,\n    toggleActive,\n    yearlyArray,\n    montlyArray,\n    handleSearch,\n    count,\n    totalCW,\n    totalPW,\n    totalSW,\n    totalWaste,\n    display,\n    totalCoverInputs,\n    percentageOfInputsAreZeros,\n    monthName,\n    searchError,\n    selectedYear,\n    siteName,\n    wasteSteamValue,\n    coverInputDataArray,\n    handleYearly,\n    handleMonthly,\n    datesLabel,\n    foodWaste,\n    foodWasteXaxis,\n    showTooltip\n  } = useContext(WastePerCoverContext);\n  const {\n    allCappingValue,\n    wastePerCoverCoverWastes,\n    wastePerCoverSpoilageWastes,\n    wastePerCoverPrepWastes\n  } = useContext(WasteCapContext);\n  const [monthly, setMonthlyArray] = useState([]);\n  const [yearly, setYearlyArray] = useState([]);\n  const [displayValue, setDisplay] = useState([]);\n  const [totalCoverWaste, setTotalCW] = useState(0);\n  const [totalPrepWaste, setTotalPW] = useState(0);\n  const [totalSpoilageWaste, setTotalSW] = useState(0);\n  const [totalAllWaste, setTotalWaste] = useState(0);\n  const [showSearchError, setShowSearchError] = useState(false);\n  const [year, setSelectedYear] = useState(0);\n  const [inputsData, setInputsData] = useState([]);\n  const [wasteStreamValue, setWasteStreamValue] = useState([]); // let maxNumber = 1;\n\n  let [maxNumber, setMaxNumber] = useState(1);\n  let indexes;\n  let barColors = [\"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\", \"rgb(178, 191, 80)\"];\n  indexes = getIndexesForBackgroundColours(foodWaste, allCappingValue, \"wastePerCoverCappingValues\", activeState); // console.log(\"indexes\",indexes);\n\n  if (indexes) {\n    indexes.targetIndexArray.map(data => {\n      // console.log(\"data\",data)\n      // console.log(\"barColors\",barColors)\n      barColors[data] = \"rgba(255, 0, 0, 0.9)\";\n      return \"\";\n    });\n  }\n\n  useEffect(() => {\n    console.log(\"LABELS\", labels);\n    setWasteStreamValue(wasteSteamValue);\n    setInputsData(coverInputDataArray); // console.log(\"montlyArray\",montlyArray)\n    // console.log(\"foodWaste\",foodWaste)\n    // console.log(\"foodWasteXaxis\",foodWasteXaxis)\n\n    setDisplay(foodWaste); // setMonthlyArray(montlyArray)\n    // setYearlyArray(yearlyArray)\n    // console.log(\"label\",label)\n    // setLabel(datesLabel)\n\n    setMonthlyArray(montlyArray);\n    setYearlyArray(yearlyArray);\n    setTotalCW(totalCW);\n    setTotalPW(totalPW);\n    setTotalSW(totalSW);\n    setTotalWaste(totalWaste);\n    let maxNumber = maxNumForCoverPerWasteChartFunction(display);\n    setMaxNumber(maxNumber);\n    setShowSearchError(searchError);\n    setSelectedYear(selectedYear);\n\n    if (props.wastePerCover && showTooltip) {\n      setTooltipIsOpen(true);\n    } else {\n      setTooltipIsOpen(false);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [montlyArray, yearlyArray, count, display, searchError, selectedYear, wasteSteamValue, coverInputDataArray, datesLabel, foodWaste, foodWasteXaxis, props.wastePerCover]);\n\n  if (props.showPounds) {\n    // console.log(\"display\",display);\n    if (display) {\n      const monetaryValues = display.map(data => {\n        return data * 2.775;\n      });\n      maxNumber = maxNumForCoverPerWasteChartFunction(monetaryValues);\n    }\n  } else {\n    maxNumber = maxNumForCoverPerWasteChartFunction(display);\n  }\n\n  const {\n    width\n  } = useWindowDimensions();\n\n  if (width <= 700) {\n    graphWidth = 260;\n    graphHeight = 65;\n  } else if (width >= 1600) {\n    // graphWidth = 700;\n    // graphHeight = 250;\n    graphHeight = 424;\n    graphWidth = 893;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !props.hideReport && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AccordionHeading, {\n    color: \"primPurpleBackgroundColor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 11\n    }\n  }, \"WASTE per COVER\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    onClick: () => {\n      props.setWastePerCover(!props.wastePerCover);\n      setItemInLocalStorage(\"showWastePerCover\", !props.wastePerCover);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }\n  }, props.wastePerCover ? \"X \" : \"| | | \"))), /*#__PURE__*/React.createElement(AccordionBody, {\n    open: props.wastePerCover,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: props.showDarkTheme ? \"darkTheme__reportBackgroundColor addPaddingOfHalveRem\" : \"originalTheme__reportBackgroundColor addPaddingOfHalveRem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__row addSpaceBetween\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"report-subtitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }\n  }, siteName), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }\n  }, \"WASTE PER COVER\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 15\n    }\n  }, props.showPounds ? \"(Â£)\" : \"(Kg)\", \" /Person in \", monthName, \" \", year))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__labelWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__label applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 17\n    }\n  }, year), \" \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__label applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 17\n    }\n  }, monthName), \" \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__label applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 17\n    }\n  }, \"Total Waste\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyMarginRightAndLeft graph__label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 17\n    }\n  }, \"C\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: 1,\n    key: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: props.showDarkTheme ? \"darkTheme__numberColor\" : \"applyBlueTuckGreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 19\n    }\n  }, totalCoverWaste)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 17\n    }\n  }, \"+\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__label applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 17\n    }\n  }, \"S\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: 2,\n    key: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: props.showDarkTheme ? \"darkTheme__numberColor\" : \"applyBlueTuckGreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 19\n    }\n  }, totalSpoilageWaste)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 17\n    }\n  }, \"+\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyMarginRightAndLeft graph__label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 17\n    }\n  }, \"P\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: 3,\n    key: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: props.showDarkTheme ? \"darkTheme__numberColor\" : \"applyBlueTuckGreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 19\n    }\n  }, totalPrepWaste, \" = \", totalAllWaste)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__labelWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__label applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 15\n    }\n  }, year, \" \", monthName, \" Total Monthly Covers\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyBlueTuckGreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 15\n    }\n  }, totalCoverInputs))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__labelWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__label applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 15\n    }\n  }, \"Do we have Monthly Cover Inputs data in \", monthName, \" \", year, \"? \", percentageOfInputsAreZeros > 50 ? \"NO\" : \"YES\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard__wrapperForSelector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard__selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    open: tooltipIsOpen // onOpen={() => setTooltipIsOpen(true)}\n    ,\n    onClose: () => setTooltipIsOpen(false),\n    title: \"click on C, S, P or All waste stream\",\n    arrow: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: activeState.coverSelector ? \"active\" : \"inactive\",\n    id: 0,\n    onClick: () => {\n      toggleActive(\"coverSelector\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 17\n    }\n  }, labels.acronyms.c)), /*#__PURE__*/React.createElement(Tooltip, {\n    open: tooltipIsOpen // onOpen={() => setTooltipIsOpen(true)}\n    ,\n    onClose: () => setTooltipIsOpen(false),\n    arrow: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: activeState.spoilageSelector ? \"active\" : \"inactive\",\n    id: 1,\n    onClick: () => {\n      toggleActive(\"spoilageSelector\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 17\n    }\n  }, labels.acronyms.s)), /*#__PURE__*/React.createElement(Tooltip, {\n    open: tooltipIsOpen // onOpen={() => setTooltipIsOpen(true)}\n    ,\n    onClose: () => setTooltipIsOpen(false),\n    arrow: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: activeState.preparationSelector ? \"active\" : \"inactive\",\n    id: 2,\n    onClick: () => {\n      toggleActive(\"preparationSelector\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 17\n    }\n  }, labels.acronyms.p)), /*#__PURE__*/React.createElement(\"h2\", {\n    className: activeState.allSelector ? \"active\" : \"inactive\",\n    id: 3,\n    onClick: () => {\n      toggleActive(\"allSelector\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 17\n    }\n  }, \"ALL\"))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Capping, {\n    coverWastes: wastePerCoverCoverWastes,\n    spoilageWastes: wastePerCoverSpoilageWastes,\n    prepWastes: wastePerCoverPrepWastes,\n    showPounds: props.showPounds,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard__wrapperForGraph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    // className=\"dashboard__wastePerCoverChartWrapper\"\n    style: {\n      width: \"100%\",\n      overflow: \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: foodWasteXaxis,\n      wasteSteamsValue: wasteStreamValue,\n      inputData: inputsData,\n      datasets: [{\n        label: \"array 1\",\n        data: props.showPounds ? displayValue.map(data => {\n          if (data) {\n            return (data * 2.775).toFixed(1);\n          }\n        }) : displayValue,\n        backgroundColor: barColors,\n        // minBarLength: 0.3,\n        categoryPercentage: 1.0,\n        barPercentage: 0.5\n      }]\n    },\n    width: graphWidth,\n    height: graphHeight,\n    options: {\n      responsive: true,\n      maintainAspectRatio: true,\n      layout: {\n        padding: {\n          left: 25,\n          right: 25,\n          top: 10,\n          bottom: 10\n        }\n      },\n      scales: {\n        xAxes: [{\n          display: true,\n          gridLines: {\n            display: false\n          },\n          ticks: {\n            autoSkip: false,\n            fontSize: 7\n          }\n        }],\n        yAxes: [{\n          gridLines: {\n            display: false\n          },\n          ticks: {\n            maxTicksLimit: 4,\n            display: false,\n            beginAtZero: true,\n            max: maxNumber\n          }\n        }]\n      },\n      plugins: {\n        datalabels: {\n          display: true,\n          color: \"rgb(47, 64, 30)\",\n          anchor: \"end\",\n          align: \"end\",\n          clamp: true,\n          font: {\n            size: 5,\n            weight: 900\n          },\n          offset: 4\n        }\n      },\n      tooltips: {\n        enabled: true,\n        callbacks: {\n          title: function (tooltipItems, data) {\n            return '';\n          },\n          label: function (tooltipItem, data) {\n            // console.log(\"inputData\",data.inputData[tooltipItem.index]);\n            // console.log(\"wasteSteamsValue\",data.wasteSteamsValue[tooltipItem.index]);\n            // console.log(\"data.inputData\",data.inputData)\n            // console.log(\"data.wasteSteamsValue\",data.wasteSteamsValue)\n            // console.log(\"index\",tooltipItem.index);\n            // console.log(\"data\",data);\n            let inputData = data.inputData[tooltipItem.index];\n            let wasteSteamValue = isInt(data.wasteSteamsValue[tooltipItem.index]) ? data.wasteSteamsValue[tooltipItem.index] : keepTwoDecimalPlacesWithoutRoundingUp(data.wasteSteamsValue[tooltipItem.index]);\n            const val = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n            return val + \"(\" + wasteSteamValue + \"/\" + inputData + \")\";\n          }\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dateLabel__wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dateLabel__coverwastesSquare\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 17\n    }\n  }), labels.titleLabels.c, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dateLabel__spoliageSquare\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 17\n    }\n  }), labels.titleLabels.s, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dateLabel__preparationSquare\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 17\n    }\n  }), labels.titleLabels.p, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dateLabel__allWasteSquare\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 17\n    }\n  }), \"ALL\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__selector-spacing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 15\n    }\n  }, \"MONTH:\"), monthly.map((month, i) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: month.show ? \"active applyMarginRightAndLeft applyPurpleColor\" : \"displayNone\",\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 19\n      }\n    }, month.month);\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"applyMarginRightAndLeft clickable\",\n    onClick: () => {\n      handleMonthly(\"NEXT\", \"wastePerCover\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 15\n    }\n  }, \"NEXT\"), /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"clickable\",\n    onClick: () => {\n      handleMonthly(\"PREV\", \"wastePerCover\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 15\n    }\n  }, \"PREV\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__title clickable applyPurpleColor\",\n    onClick: () => {\n      handleSearch();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 13\n    }\n  }, \"SEARCH\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 14\n    }\n  }, \"(Starts on the first Monday of the Month)\"))))));\n}","map":{"version":3,"sources":["/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/reports/waste-per-cover-report.js"],"names":["React","useContext","useEffect","useState","Bar","useWindowDimensions","WastePerCoverContext","WasteCapContext","WasteLabelsContext","AccordionHeading","AccordionBody","setItemInLocalStorage","maxNumForCoverPerWasteChartFunction","keepTwoDecimalPlacesWithoutRoundingUp","isInt","getIndexesForBackgroundColours","Capping","Tooltip","graphHeight","graphWidth","CoverPerWasteGraph","props","tooltipIsOpen","setTooltipIsOpen","labels","activeState","toggleActive","yearlyArray","montlyArray","handleSearch","count","totalCW","totalPW","totalSW","totalWaste","display","totalCoverInputs","percentageOfInputsAreZeros","monthName","searchError","selectedYear","siteName","wasteSteamValue","coverInputDataArray","handleYearly","handleMonthly","datesLabel","foodWaste","foodWasteXaxis","showTooltip","allCappingValue","wastePerCoverCoverWastes","wastePerCoverSpoilageWastes","wastePerCoverPrepWastes","monthly","setMonthlyArray","yearly","setYearlyArray","displayValue","setDisplay","totalCoverWaste","setTotalCW","totalPrepWaste","setTotalPW","totalSpoilageWaste","setTotalSW","totalAllWaste","setTotalWaste","showSearchError","setShowSearchError","year","setSelectedYear","inputsData","setInputsData","wasteStreamValue","setWasteStreamValue","maxNumber","setMaxNumber","indexes","barColors","targetIndexArray","map","data","console","log","wastePerCover","showPounds","monetaryValues","width","hideReport","setWastePerCover","showDarkTheme","coverSelector","acronyms","c","spoilageSelector","s","preparationSelector","p","allSelector","justifyContent","overflow","wasteSteamsValue","inputData","datasets","label","toFixed","backgroundColor","categoryPercentage","barPercentage","responsive","maintainAspectRatio","layout","padding","left","right","top","bottom","scales","xAxes","gridLines","ticks","autoSkip","fontSize","yAxes","maxTicksLimit","beginAtZero","max","plugins","datalabels","color","anchor","align","clamp","font","size","weight","offset","tooltips","enabled","callbacks","title","tooltipItems","tooltipItem","index","val","datasetIndex","titleLabels","month","i","show"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState} from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport \"chartjs-plugin-annotation\";\nimport \"chartjs-plugin-datalabels\";\n\nimport useWindowDimensions from \"../../libs/use-window-dimensions\";\n\nimport { WastePerCoverContext } from \"../../../../contexts/waste-per-cover-context\";\n\nimport { WasteCapContext } from \"../../../../contexts/waste-cap-context\";\n\nimport { WasteLabelsContext } from \"../../../../contexts/waste-labels-context\";\n\nimport { AccordionHeading, AccordionBody } from \"../accordion\"\n\nimport {\n  setItemInLocalStorage,\n  maxNumForCoverPerWasteChartFunction\n} from \"../../../../utilities.js\";\n\nimport {\n  keepTwoDecimalPlacesWithoutRoundingUp,\n  isInt,\n  getIndexesForBackgroundColours\n} from \"../../../../helper.js\";\n\nimport Capping from \"./../reuseable-components/labels/capping\"\n\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nlet graphHeight = 500;\nlet graphWidth = 1100;\n\nexport default function CoverPerWasteGraph(props) {\n\n  const [tooltipIsOpen, setTooltipIsOpen] = React.useState(true);\n\n  const {\n    labels\n   } = useContext(WasteLabelsContext);\n\n  const {\n    activeState,\n    toggleActive,\n    yearlyArray,\n    montlyArray,\n    handleSearch,\n    count,\n\n    totalCW,\n    totalPW,\n    totalSW,\n    totalWaste,\n\n    display,\n    totalCoverInputs,\n    percentageOfInputsAreZeros,\n    monthName,\n    searchError,\n    selectedYear,\n    siteName,\n\n    wasteSteamValue,\n    coverInputDataArray,\n\n    handleYearly,\n    handleMonthly,\n\n    datesLabel,\n\n    foodWaste,\n    foodWasteXaxis,\n    showTooltip\n  } = useContext(WastePerCoverContext);\n\n  const {\n    allCappingValue,\n    wastePerCoverCoverWastes,\n    wastePerCoverSpoilageWastes,\n    wastePerCoverPrepWastes\n  } = useContext(WasteCapContext);\n\n  const [ monthly, setMonthlyArray] = useState([])\n  const [ yearly, setYearlyArray ] = useState([])\n\n  const [ displayValue, setDisplay ] = useState([])\n\n  const [totalCoverWaste, setTotalCW ] = useState(0)\n  const [totalPrepWaste, setTotalPW ] = useState(0)\n  const [totalSpoilageWaste, setTotalSW ] = useState(0)\n  const [totalAllWaste, setTotalWaste ] = useState(0)\n\n  const [showSearchError, setShowSearchError ] = useState(false)\n  const [year, setSelectedYear] = useState(0);\n\n  const [ inputsData, setInputsData ] = useState([])\n  const [ wasteStreamValue, setWasteStreamValue] = useState([])\n\n  // let maxNumber = 1;\n  let [maxNumber, setMaxNumber ] = useState(1)\n\n  let indexes;\n\n  let barColors = [\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n    \"rgb(178, 191, 80)\",\n  ];\n\n  indexes = getIndexesForBackgroundColours(foodWaste,allCappingValue, \"wastePerCoverCappingValues\", activeState);\n  // console.log(\"indexes\",indexes);\n\n  if (indexes) {\n    indexes.targetIndexArray.map((data) => {\n      // console.log(\"data\",data)\n      // console.log(\"barColors\",barColors)\n\n      barColors[data] = \"rgba(255, 0, 0, 0.9)\";\n      return \"\"\n    })\n  }\n\n  useEffect(() => {\n\n    console.log(\"LABELS\", labels)\n\n    setWasteStreamValue(wasteSteamValue);\n    setInputsData(coverInputDataArray);\n\n    // console.log(\"montlyArray\",montlyArray)\n\n    // console.log(\"foodWaste\",foodWaste)\n    // console.log(\"foodWasteXaxis\",foodWasteXaxis)\n    setDisplay(foodWaste)\n\n    // setMonthlyArray(montlyArray)\n    // setYearlyArray(yearlyArray)\n    // console.log(\"label\",label)\n    // setLabel(datesLabel)\n\n    setMonthlyArray(montlyArray)\n    setYearlyArray(yearlyArray)\n\n    setTotalCW(totalCW)\n    setTotalPW(totalPW)\n    setTotalSW(totalSW)\n    setTotalWaste(totalWaste)\n\n    let maxNumber = maxNumForCoverPerWasteChartFunction(display)\n    setMaxNumber(maxNumber)\n\n    setShowSearchError(searchError)\n    setSelectedYear(selectedYear)\n\n    if (props.wastePerCover && showTooltip){\n      setTooltipIsOpen(true)\n    } else {\n      setTooltipIsOpen(false)\n    }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    montlyArray,\n    yearlyArray,\n    count,\n    display,\n    searchError,\n    selectedYear,\n\n    wasteSteamValue,\n    coverInputDataArray,\n\n    datesLabel,\n\n    foodWaste,\n    foodWasteXaxis,\n    props.wastePerCover\n  ])\n\n  if (props.showPounds) {\n    // console.log(\"display\",display);\n    if (display) {\n      const monetaryValues = display.map((data) => {\n        return data * 2.775;\n      })\n      maxNumber = maxNumForCoverPerWasteChartFunction(monetaryValues)\n    }\n  } else {\n    maxNumber = maxNumForCoverPerWasteChartFunction(display)\n  }\n\n  const { width } = useWindowDimensions();\n\n  if (width <= 700) {\n    graphWidth = 260;\n    graphHeight = 65;\n  } else if (width >= 1600) {\n    // graphWidth = 700;\n    // graphHeight = 250;\n\n    graphHeight = 424;\n    graphWidth = 893;\n  }\n\n  return (\n\n    <>\n      {!props.hideReport &&\n      <>\n        <AccordionHeading color={\"primPurpleBackgroundColor\"}>\n\n          <div className=\"section-title\">WASTE per COVER</div>\n          <div className=\"container\">\n            <span onClick={() =>\n                {\n                  props.setWastePerCover(!props.wastePerCover)\n                  setItemInLocalStorage(\"showWastePerCover\", !props.wastePerCover)\n                }\n                }>\n\n                {props.wastePerCover ? (\n                \"X \")\n                :\n                \"| | | \"\n                }\n            </span>\n          </div>\n\n        </AccordionHeading>\n        <AccordionBody open={props.wastePerCover}>\n\n        <div className= { props.showDarkTheme ? \"darkTheme__reportBackgroundColor addPaddingOfHalveRem\": \"originalTheme__reportBackgroundColor addPaddingOfHalveRem\"}>\n\n          <div className=\"graph__row addSpaceBetween\">\n            <div className=\"report-subtitle\">{siteName}</div>\n            <div className=\"graph__heading\">WASTE PER COVER\n              <div className=\"applyMarginRightAndLeft\">{props.showPounds? \"(Â£)\" : \"(Kg)\" } /Person in {monthName} {year}</div>\n            </div>\n          </div>\n\n          <div className=\"graph__row\">\n\n            <div className=\"graph__labelWrapper\">\n\n                <div className=\"graph__label applyMarginRightAndLeft\">{year}</div>\n                {\" \"}\n                <div className=\"graph__label applyMarginRightAndLeft\">{monthName}</div>\n                {\" \"}\n                <div className=\"graph__label applyMarginRightAndLeft\">\n                  Total Waste\n                </div>\n                <div className=\"applyMarginRightAndLeft graph__label\">\n                    C\n                </div>\n                <div\n                  id={1}\n                  key={0}\n                >\n                  <div className={props.showDarkTheme? \"darkTheme__numberColor\" :\"applyBlueTuckGreen\"}>\n                    {totalCoverWaste}\n                  </div>\n                </div>\n                <div>+</div>\n                <div className=\"graph__label applyMarginRightAndLeft\">\n                    S\n                 </div>\n                <div\n                  id={2}\n                  key={1}\n                >\n                  <div className={props.showDarkTheme? \"darkTheme__numberColor\" :\"applyBlueTuckGreen\"}>\n                    {totalSpoilageWaste}\n                  </div>\n                </div>\n                <div>+</div>\n                <div className=\"applyMarginRightAndLeft graph__label\">\n                  P\n                </div>\n                <div\n                  id={3}\n                  key={2}\n                >\n                  <div className={props.showDarkTheme? \"darkTheme__numberColor\" :\"applyBlueTuckGreen\"}>\n                    {totalPrepWaste} = {totalAllWaste}\n                  </div>\n                </div>\n              </div>\n\n          </div>\n\n          <div className=\"graph__row\">\n            <div className=\"graph__labelWrapper\">\n              <div className=\"graph__label applyMarginRightAndLeft\">{year} {monthName} Total Monthly Covers</div>\n              <div className=\"applyBlueTuckGreen\">{totalCoverInputs}</div>\n            </div>\n          </div>\n          <div className=\"graph__row\">\n            <div className=\"graph__labelWrapper\">\n              <div className=\"graph__label applyMarginRightAndLeft\">Do we have Monthly Cover Inputs data in {monthName} {year}? {percentageOfInputsAreZeros > 50 ? \"NO\" : \"YES\"}</div>\n            </div>\n          </div>\n\n\n          <div className=\"dashboard__wrapperForSelector\">\n              <div className=\"dashboard__selector\">\n\n                <Tooltip\n                  open={tooltipIsOpen}\n                  // onOpen={() => setTooltipIsOpen(true)}\n                  onClose={() => setTooltipIsOpen(false)}\n                  title=\"click on C, S, P or All waste stream\"\n                  arrow\n                >\n\n                <h2\n                  className={activeState.coverSelector ? \"active\" : \"inactive\"}\n                  id={0}\n                  onClick={() => {\n                    toggleActive(\"coverSelector\");\n                  }}\n                  >{labels.acronyms.c}</h2>\n                </Tooltip>\n\n                <Tooltip\n                  open={tooltipIsOpen}\n                  // onOpen={() => setTooltipIsOpen(true)}\n                  onClose={() => setTooltipIsOpen(false)}\n                  arrow\n                >\n\n                <h2\n                  className={activeState.spoilageSelector ? \"active\" : \"inactive\"}\n                  id={1}\n                  onClick={() => {\n                    toggleActive(\"spoilageSelector\");\n                  }}\n                  >{labels.acronyms.s}</h2>\n\n                </Tooltip>\n\n                <Tooltip\n                  open={tooltipIsOpen}\n                  // onOpen={() => setTooltipIsOpen(true)}\n                  onClose={() => setTooltipIsOpen(false)}\n                  arrow\n                >\n\n                <h2\n                  className={activeState.preparationSelector ? \"active\" : \"inactive\"}\n                  id={2}\n                  onClick={() => {\n                    toggleActive(\"preparationSelector\");\n                  }}\n                  >{labels.acronyms.p}</h2>\n\n                </Tooltip>\n\n                <h2\n                  className={activeState.allSelector ? \"active\" : \"inactive\"}\n                  id={3}\n                  onClick={() => {\n                    toggleActive(\"allSelector\");\n                  }}\n                  >ALL</h2>\n              </div>\n          </div>\n\n          <div style={{\n            display: \"flex\",\n            justifyContent: \"center\"\n          }}>\n            <Capping\n              coverWastes={wastePerCoverCoverWastes}\n              spoilageWastes={wastePerCoverSpoilageWastes}\n              prepWastes={wastePerCoverPrepWastes}\n              showPounds={props.showPounds}\n            />\n          </div>\n\n          <div className=\"dashboard__wrapperForGraph\">\n            <div\n            // className=\"dashboard__wastePerCoverChartWrapper\"\n\n            style={{\n              width: \"100%\",\n              overflow: \"auto\"\n            }}\n            >\n\n              <Bar\n                  data={{\n                    labels: foodWasteXaxis,\n                    wasteSteamsValue: wasteStreamValue,\n                    inputData: inputsData,\n                    datasets: [\n\n                      {\n                        label: \"array 1\",\n                        data: props.showPounds? displayValue.map((data) => {\n                          if (data) {\n                            return (data * 2.775).toFixed(1)\n                          }\n                        }) : displayValue,\n                        backgroundColor: barColors,\n                        // minBarLength: 0.3,\n                        categoryPercentage: 1.0,\n                        barPercentage: 0.5\n                      },\n\n                    ],\n                  }}\n                  width={graphWidth}\n                  height={graphHeight}\n                  options={{\n\n                    responsive: true,\n                    maintainAspectRatio: true,\n                    layout: {\n                      padding: {\n                          left: 25,\n                          right: 25,\n                          top: 10,\n                          bottom: 10\n                      }\n                    },\n                    scales: {\n                      xAxes: [\n                        {\n                          display: true,\n                          gridLines: {\n                            display: false,\n                          },\n                          ticks: {\n                            autoSkip: false,\n                            fontSize: 7\n                          },\n                        },\n                      ],\n                      yAxes: [\n                        {\n                          gridLines: {\n                            display: false,\n                          },\n                          ticks: {\n                            maxTicksLimit: 4,\n                            display: false,\n                            beginAtZero: true,\n                            max: maxNumber\n                          },\n                        },\n                      ],\n                    },\n\n                    plugins: {\n                      datalabels: {\n                        display: true,\n                        color: \"rgb(47, 64, 30)\",\n                        anchor: \"end\",\n                        align: \"end\",\n                        clamp: true,\n                        font: {\n                          size: 5,\n                          weight: 900,\n                        },\n                        offset: 4,\n                      },\n\n                    },\n\n\n                    tooltips: {\n                      enabled: true,\n                      callbacks: {\n                        title: function(tooltipItems, data) {\n                          return '';\n                        },\n                        label: function(tooltipItem, data) {\n                          // console.log(\"inputData\",data.inputData[tooltipItem.index]);\n                          // console.log(\"wasteSteamsValue\",data.wasteSteamsValue[tooltipItem.index]);\n\n                          // console.log(\"data.inputData\",data.inputData)\n                          // console.log(\"data.wasteSteamsValue\",data.wasteSteamsValue)\n\n                          // console.log(\"index\",tooltipItem.index);\n\n                          // console.log(\"data\",data);\n\n                          let inputData = data.inputData[tooltipItem.index];\n\n                          let wasteSteamValue = isInt(data.wasteSteamsValue[tooltipItem.index]) ? data.wasteSteamsValue[tooltipItem.index] :  keepTwoDecimalPlacesWithoutRoundingUp(data.wasteSteamsValue[tooltipItem.index])\n\n                          const val = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n                          return val + \"(\" +  wasteSteamValue + \"/\" + inputData + \")\"\n                        }\n                      }\n                    }\n\n                  }}\n              />\n\n            </div>\n          </div>\n\n          <div className=\"graph__row\">\n              <div className=\"dateLabel__wrapper\">\n                <div className=\"dateLabel__coverwastesSquare\"></div>\n                {labels.titleLabels.c}\n                <div className=\"dateLabel__spoliageSquare\"></div>\n                {labels.titleLabels.s}\n                <div className=\"dateLabel__preparationSquare\"></div>\n                {labels.titleLabels.p}\n                <div className=\"dateLabel__allWasteSquare\"></div>\n                ALL\n              </div>\n          </div>\n\n\n          <div className=\"graph__row\">\n            <div className=\"graph__selector-spacing\">\n              <div className=\"graph__title\">MONTH:\n              </div>\n\n              {monthly.map((month, i) => {\n                return (\n                  <div className={month.show? \"active applyMarginRightAndLeft applyPurpleColor\": \"displayNone\"} key={i} >\n                    {month.month}\n                  </div>\n                )\n              })}\n\n              <h2 className=\"applyMarginRightAndLeft clickable\" onClick={() => {handleMonthly(\"NEXT\", \"wastePerCover\")}}>NEXT</h2>\n              <h2 className=\"clickable\" onClick={() => {handleMonthly(\"PREV\", \"wastePerCover\")}}>PREV</h2>\n            </div>\n            {/* <div className=\"graph__selector-spacing\">\n              <div className=\"graph__title\">YEAR:\n              </div>\n              {yearly.map((year, i) =>{\n                return (\n                  <div className={year.show? \"active applyMarginRightAndLeft applyPurpleColor\": \"displayNone\"} key={i} >\n                    {year.year}\n                  </div>\n                )\n              })}\n              <h2 className=\"applyMarginRightAndLeft clickable\" onClick={() => {handleYearly(\"NEXT\", \"wastePerCover\")}}>NEXT</h2>\n              <h2 className=\"clickable\" onClick={() => {handleYearly(\"PREV\", \"wastePerCover\")}}>PREV</h2>\n            </div> */}\n            <div className=\"graph__title clickable applyPurpleColor\" onClick={() => {handleSearch()}}>\n              SEARCH\n            </div>\n          </div>\n\n          {/* <div className=\"graph__row\">\n             <div className=\"warning\">\n              {showSearchError? \"Please note the Data you have requested is not available\":\"\"}\n             </div>\n          </div> */}\n\n          <div className=\"graph__row\">\n             <div className=\"graph__message\">\n              (Starts on the first Monday of the Month)\n             </div>\n          </div>\n\n        </div>\n\n      </AccordionBody>\n      </>\n      }\n    </>\n  );\n}"]},"metadata":{},"sourceType":"module"}