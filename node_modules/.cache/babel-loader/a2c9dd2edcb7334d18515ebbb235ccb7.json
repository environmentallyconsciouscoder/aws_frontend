{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/contexts/monthly-waste-context.js\";\nimport React, { createContext, useEffect } from 'react';\nexport const MonthlyWasteContext = createContext();\n\nconst MonthlyTargetContextProvider = props => {\n  const [coverWasteInCurrentMonth, setCoverWasteInCurrentMonth] = React.useState(0);\n  const [preparationWasteInCurrentMonth, setPreparationWasteInCurrentMonth] = React.useState(0);\n  const [spoilageWasteInCurrentMonth, setSpoilageWasteInCurrentMonth] = React.useState(0);\n  const [currentMonthCoverWasteArray, setCurrentMonthCoverWasteArray] = React.useState([0]);\n  const [currentMonthPrepWasteArray, setCurrentMonthPrepWasteArray] = React.useState([0]);\n  const [currentMonthSpoilageWasteArray, setCurrentMonthSpoilageWasteArray] = React.useState([0]);\n  const [coverMonthlyChanges, setCoverMonthlyChanges] = React.useState([0]);\n  const [prepMonthlyChanges, setPrepMonthlyChanges] = React.useState([0]);\n  const [spoilageMonthlyChanges, setSpoilageMonthlyChanges] = React.useState([0]);\n  const [monthlyChanges, setMonthlyChanges] = React.useState([0]);\n  const [displayMonthlyTrends, setDisplayMonthlyTrends] = React.useState([0]);\n  const [monthlySelectedValue, setMonthlySelectedValue] = React.useState(\"A\");\n  const [showTooltip, setTooltip] = React.useState(true);\n  useEffect(() => {\n    setCoverWasteInCurrentMonth(props.coverWasteInCurrentMonth);\n    setPreparationWasteInCurrentMonth(props.preparationWasteInCurrentMonth);\n    setSpoilageWasteInCurrentMonth(props.spoilageWasteInCurrentMonth);\n    setCurrentMonthCoverWasteArray(props.currentMonthCoverWasteArray);\n    setCurrentMonthPrepWasteArray(props.currentMonthPrepWasteArray);\n    setCurrentMonthSpoilageWasteArray(props.currentMonthSpoilageWasteArray);\n    setCoverMonthlyChanges(props.coverMonthlyChanges);\n    setPrepMonthlyChanges(props.prepMonthlyChanges);\n    setSpoilageMonthlyChanges(props.spoilageMonthlyChanges);\n    setMonthlyChanges(props.monthlyChanges);\n    setDisplayMonthlyTrends(props.monthlyChanges);\n  }, [props.siteName, props.coverWasteInCurrentMonth, props.preparationWasteInCurrentMonth, props.spoilageWasteInCurrentMonth, props.currentMonthCoverWasteArray, props.currentMonthPrepWasteArray, props.currentMonthSpoilageWasteArray, props.coverMonthlyChanges, props.prepMonthlyChanges, props.spoilageMonthlyChanges, props.monthlyChanges]);\n\n  const handleMonthlyValues = e => {\n    const selector = e.target.id;\n\n    if (selector === \"C\") {\n      setDisplayMonthlyTrends(coverMonthlyChanges);\n      setMonthlySelectedValue(\"C\");\n    } else if (selector === \"S\") {\n      setDisplayMonthlyTrends(spoilageMonthlyChanges);\n      setMonthlySelectedValue(\"S\");\n    } else if (selector === \"P\") {\n      setDisplayMonthlyTrends(prepMonthlyChanges);\n      setMonthlySelectedValue(\"P\");\n    } else if (selector === \"A\") {\n      setDisplayMonthlyTrends(monthlyChanges);\n      setMonthlySelectedValue(\"A\");\n    }\n\n    setTooltip(false);\n  };\n\n  return /*#__PURE__*/React.createElement(MonthlyWasteContext.Provider, {\n    value: {\n      coverWasteInCurrentMonth,\n      preparationWasteInCurrentMonth,\n      spoilageWasteInCurrentMonth,\n      currentMonthCoverWasteArray,\n      currentMonthPrepWasteArray,\n      currentMonthSpoilageWasteArray,\n      coverMonthlyChanges,\n      prepMonthlyChanges,\n      spoilageMonthlyChanges,\n      monthlyChanges,\n      handleMonthlyValues,\n      displayMonthlyTrends,\n      monthlySelectedValue,\n      showTooltip\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default MonthlyTargetContextProvider;","map":{"version":3,"sources":["/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/contexts/monthly-waste-context.js"],"names":["React","createContext","useEffect","MonthlyWasteContext","MonthlyTargetContextProvider","props","coverWasteInCurrentMonth","setCoverWasteInCurrentMonth","useState","preparationWasteInCurrentMonth","setPreparationWasteInCurrentMonth","spoilageWasteInCurrentMonth","setSpoilageWasteInCurrentMonth","currentMonthCoverWasteArray","setCurrentMonthCoverWasteArray","currentMonthPrepWasteArray","setCurrentMonthPrepWasteArray","currentMonthSpoilageWasteArray","setCurrentMonthSpoilageWasteArray","coverMonthlyChanges","setCoverMonthlyChanges","prepMonthlyChanges","setPrepMonthlyChanges","spoilageMonthlyChanges","setSpoilageMonthlyChanges","monthlyChanges","setMonthlyChanges","displayMonthlyTrends","setDisplayMonthlyTrends","monthlySelectedValue","setMonthlySelectedValue","showTooltip","setTooltip","siteName","handleMonthlyValues","e","selector","target","id","children"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect } from 'react'\n\nexport const MonthlyWasteContext = createContext()\n\nconst MonthlyTargetContextProvider = props => {\n\n  const [coverWasteInCurrentMonth, setCoverWasteInCurrentMonth] = React.useState(0);\n  const [preparationWasteInCurrentMonth, setPreparationWasteInCurrentMonth] = React.useState(0);\n  const [spoilageWasteInCurrentMonth, setSpoilageWasteInCurrentMonth] = React.useState(0);\n\n  const [currentMonthCoverWasteArray, setCurrentMonthCoverWasteArray] = React.useState([0]);\n  const [currentMonthPrepWasteArray, setCurrentMonthPrepWasteArray] = React.useState([0]);\n  const [currentMonthSpoilageWasteArray, setCurrentMonthSpoilageWasteArray] = React.useState([0]);\n\n  const [coverMonthlyChanges, setCoverMonthlyChanges] = React.useState([0]);\n  const [prepMonthlyChanges, setPrepMonthlyChanges] = React.useState([0]);\n  const [spoilageMonthlyChanges, setSpoilageMonthlyChanges] = React.useState([0]);\n  const [monthlyChanges, setMonthlyChanges] = React.useState([0]);\n\n  const [displayMonthlyTrends, setDisplayMonthlyTrends] = React.useState([0]);\n  const [monthlySelectedValue, setMonthlySelectedValue] = React.useState(\"A\");\n\n  const [showTooltip, setTooltip] = React.useState(true);\n\n  useEffect(() => {\n\n    setCoverWasteInCurrentMonth(props.coverWasteInCurrentMonth)\n    setPreparationWasteInCurrentMonth(props.preparationWasteInCurrentMonth)\n    setSpoilageWasteInCurrentMonth(props.spoilageWasteInCurrentMonth)\n\n    setCurrentMonthCoverWasteArray(props.currentMonthCoverWasteArray)\n    setCurrentMonthPrepWasteArray(props.currentMonthPrepWasteArray)\n    setCurrentMonthSpoilageWasteArray(props.currentMonthSpoilageWasteArray)\n\n    setCoverMonthlyChanges(props.coverMonthlyChanges)\n    setPrepMonthlyChanges(props.prepMonthlyChanges)\n    setSpoilageMonthlyChanges(props.spoilageMonthlyChanges)\n    setMonthlyChanges(props.monthlyChanges)\n\n    setDisplayMonthlyTrends(props.monthlyChanges)\n}, [\n  props.siteName,\n  props.coverWasteInCurrentMonth,\n  props.preparationWasteInCurrentMonth,\n  props.spoilageWasteInCurrentMonth,\n  props.currentMonthCoverWasteArray,\n  props.currentMonthPrepWasteArray,\n  props.currentMonthSpoilageWasteArray,\n  props.coverMonthlyChanges,\n  props.prepMonthlyChanges,\n  props.spoilageMonthlyChanges,\n  props.monthlyChanges\n])\n\n  const handleMonthlyValues = (e) => {\n    const selector = e.target.id;\n\n    if (selector === \"C\") {\n      setDisplayMonthlyTrends(coverMonthlyChanges)\n      setMonthlySelectedValue(\"C\");\n\n    } else if (selector === \"S\") {\n      setDisplayMonthlyTrends(spoilageMonthlyChanges)\n      setMonthlySelectedValue(\"S\");\n\n    } else if (selector === \"P\") {\n      setDisplayMonthlyTrends(prepMonthlyChanges)\n      setMonthlySelectedValue(\"P\");\n\n    } else if (selector === \"A\") {\n      setDisplayMonthlyTrends(monthlyChanges)\n      setMonthlySelectedValue(\"A\");\n    }\n\n    setTooltip(false)\n  }\n\n  return (\n    <MonthlyWasteContext.Provider\n        value={{\n\n            coverWasteInCurrentMonth,\n            preparationWasteInCurrentMonth,\n            spoilageWasteInCurrentMonth,\n\n            currentMonthCoverWasteArray,\n            currentMonthPrepWasteArray,\n            currentMonthSpoilageWasteArray,\n\n            coverMonthlyChanges,\n            prepMonthlyChanges,\n            spoilageMonthlyChanges,\n            monthlyChanges,\n\n            handleMonthlyValues,\n            displayMonthlyTrends,\n            monthlySelectedValue,\n\n            showTooltip\n        }}\n    >\n      {props.children}\n    </MonthlyWasteContext.Provider>\n  )\n}\n\nexport default MonthlyTargetContextProvider"]},"metadata":{},"sourceType":"module"}