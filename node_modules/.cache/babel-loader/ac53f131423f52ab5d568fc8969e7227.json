{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/targets/targets-calculator.js\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport Menus from \"./targets-menu\";\nimport { getMonths, roundedUpNumberTwoPointsAndTurnBackToString, roundedUpNumberAndTurnBackToNumber } from \"../../../../utilities\";\nimport { MonthlyWasteContext } from \"../../../../contexts/monthly-waste-context\";\nimport { WasteLabelsContext } from \"../../../../contexts/waste-labels-context\";\nimport { postTargets, getLastYearMonthlyWaste // getTargets\n} from \"../../../../api.js\";\nexport default function Settings(props) {\n  const {\n    currentMonthCoverWasteArray,\n    currentMonthPrepWasteArray,\n    currentMonthSpoilageWasteArray\n  } = useContext(MonthlyWasteContext);\n  const {\n    labels\n  } = useContext(WasteLabelsContext);\n  const [potentialSavingsInAday, setPotentialSavingsInAday] = useState(0);\n  const [potentialSavingsInWeek, setPotentialSavingsInWeek] = useState(0);\n  const [potentialSavingsInMonth, setPotentialSavingsInMonth] = useState(0);\n  const [potentialSavingsInYear, setPotentialSavingsInYear] = useState(0);\n  const [kiloOfCO2SavedYearlyDisplay, setKiloOfCO2SavedYearlyDisplay] = useState(0);\n  const [numberOfMealsSavedYearlyDisplay, setNumberOfMealsSavedYearlyDisplay] = useState(0);\n  const [cspWasteOfPreviousMonth, setCspWasteOfPreviousMonth] = useState(0);\n  const [percentagedSavingsTotal, setPercentagedSavingsTotal] = useState(0);\n  const [coverBreakDown, setCoverBreakDown] = useState(0);\n  const [prepBreakDown, setPrepBreakDown] = useState(0);\n  const [spoilageBreakDown, setSpoilageBreakDown] = useState(0); // const [poundsKGconverter, setPoundsKGconverter] = React.useState(2.075);\n\n  const [poundsKGconverter, setPoundsKGconverter] = React.useState(2.775);\n  const [savingPercentage, setSavingPercentage] = React.useState(JSON.parse(localStorage.getItem('targets')) || 0.0);\n  const [sendToDataBase, setSendToDataBase] = useState(null);\n  const [recommendTargetDisplay, setRecommendTargetDisplay] = useState(null); // const [percentagedDisplay, setPercentaged] = useState(null);\n\n  let percentaged = 0.3;\n  useEffect(() => {\n    // let id = props.companyID\n    // let company = props.companyName\n    // let siteid = props.selectedSiteValueID\n    // console.log(\"id\",id)\n    // console.log(\"company\",company)\n    // console.log(\"siteid\",siteid)\n    // console.log(\"here props\",props)\n    props.recommendedTargets.map(data => {\n      setPotentialSavingsInAday(data.recommendedTargets.targets.percentSavingsInAday);\n      setPotentialSavingsInWeek(data.recommendedTargets.targets.percentSavingsInAweek);\n      setPotentialSavingsInMonth(data.recommendedTargets.targets.percentSavingsInAmonth);\n      setPotentialSavingsInYear(data.recommendedTargets.targets.percentSavingsInAyear);\n      setCoverBreakDown(data.recommendedTargets.targets.coverBreakDown);\n      setPrepBreakDown(data.recommendedTargets.targets.prepBreakDown);\n      setSpoilageBreakDown(data.recommendedTargets.targets.spoilageBreakDown);\n      setRecommendTargetDisplay(data.recommendedTargets.targets.recommendTarget);\n      setPercentagedSavingsTotal(data.recommendedTargets.targets.totalPercentagedSavingsTotal);\n      setCspWasteOfPreviousMonth(data.recommendedTargets.targets.totalCSPforPreviousMonth);\n      setKiloOfCO2SavedYearlyDisplay(data.recommendedTargets.targets.yearlyKilosOfCO2saved);\n      setNumberOfMealsSavedYearlyDisplay(data.recommendedTargets.targets.yearlyMealsSaved); // const percentagedSavingsTotal = data.recommendedTargets.targets.totalPercentagedSavingsTotal\n      // const cspWasteOfPreviousMonth = data.recommendedTargets.targets.totalCSPforPreviousMonth\n      // setPercentaged(((percentagedSavingsTotal / cspWasteOfPreviousMonth) * 100))\n\n      return \"\";\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.companyID, props.companyName, props.selectedSiteValueID, props.recommendedTargets]);\n\n  const handleChange = (name, value) => {\n    if (name === \"sectors\") {\n      setPoundsKGconverter(value);\n    } else if (name === \"savings\") {\n      setSavingPercentage(value);\n      percentaged = value;\n      showResults(percentaged);\n    }\n  };\n\n  const checkActiveStep = data => {\n    if (data === 0) {\n      if (sendToDataBase !== null) {\n        saveTargets();\n      }\n    } // if (data === 1) {\n    //   if (sendToDataBase !== null) {\n    //     saveTargets()\n    //   }\n    // }\n\n  };\n\n  const showResults = percentaged => {\n    const monthNumber = getMonths();\n    let previousMonthNumber = 5;\n    let coverWaste = 0;\n    let preparationWaste = 0;\n    let spoilageWaste = 0;\n    let totalCSPforPreviousMonth = 0;\n\n    if (monthNumber === 0) {\n      previousMonthNumber = 11;\n    } else {\n      previousMonthNumber = monthNumber - 1;\n    } //1)Get the previous months cover, prep, spoilage and total CSP\n\n\n    if (previousMonthNumber < 11) {\n      coverWaste = currentMonthCoverWasteArray[previousMonthNumber];\n      preparationWaste = currentMonthPrepWasteArray[previousMonthNumber];\n      spoilageWaste = currentMonthSpoilageWasteArray[previousMonthNumber];\n      totalCSPforPreviousMonth = parseInt(coverWaste + preparationWaste + spoilageWaste);\n    } else {\n      //if monthNumber is 0 you want to get array value in index 11 from last year list\n      getLastYearMonthlyWaste(props.companyID, props.companyName, props.selectedSiteValueID).then(data => {\n        coverWaste = data[0].monthlyValue.monthly.coverWaste[11];\n        preparationWaste = data[0].monthlyValue.monthly.preparationWaste[11];\n        spoilageWaste = data[0].monthlyValue.monthly.spoilageWaste[11];\n        totalCSPforPreviousMonth = parseInt(coverWaste + preparationWaste + spoilageWaste);\n      });\n    } //1)\n    // get the percentage of savings the person wants\n    // Get the previous months cover, prep, spoilage and total CSP\n\n\n    console.log(\"previous coverWaste\", coverWaste);\n    console.log(\"previous preparationWaste\", preparationWaste);\n    console.log(\"previous spoilageWaste\", spoilageWaste);\n    console.log(\"previous totalCSPforPreviousMonth\", totalCSPforPreviousMonth);\n    console.log(\"this is the percentaged selected on the form percentaged\", percentaged);\n    setCspWasteOfPreviousMonth(totalCSPforPreviousMonth); //2) workout  the percentages of savings for CSP = C + S+ P\n\n    const percentSavingsForCoverWaste = roundedUpNumberAndTurnBackToNumber(coverWaste * parseFloat(percentaged));\n    const percentSavingsForPreparationWaste = roundedUpNumberAndTurnBackToNumber(preparationWaste * parseFloat(percentaged));\n    const percentSavingsForSpoilageWaste = roundedUpNumberAndTurnBackToNumber(spoilageWaste * parseFloat(percentaged));\n    console.log(\"The calculation is monthly cover waste x percentages of savings\", percentSavingsForCoverWaste);\n    console.log(\"The calculation is monthly prep waste x percentages of savings\", percentSavingsForPreparationWaste);\n    console.log(\"The calculation is monthly spoilage waste x percentages of savings\", percentSavingsForSpoilageWaste);\n    setPercentagedSavingsTotal(percentSavingsForCoverWaste + percentSavingsForPreparationWaste + percentSavingsForSpoilageWaste);\n    console.log(\"Add all calculations up to get total CSP percentages saving\", percentSavingsForCoverWaste + percentSavingsForPreparationWaste + percentSavingsForSpoilageWaste);\n    setCoverBreakDown(coverWaste - percentSavingsForCoverWaste);\n    setPrepBreakDown(preparationWaste - percentSavingsForPreparationWaste);\n    setSpoilageBreakDown(spoilageWaste - percentSavingsForSpoilageWaste);\n    const percentSavingsInAmonth = parseInt((percentSavingsForCoverWaste + percentSavingsForPreparationWaste + percentSavingsForSpoilageWaste) * poundsKGconverter);\n    const percentSavingsInAyear = parseInt(percentSavingsInAmonth * 12);\n    const percentSavingsInAweek = parseInt(percentSavingsInAmonth / 4);\n    const percentSavingsInAday = parseInt(percentSavingsInAmonth / 30);\n    setPotentialSavingsInMonth(percentSavingsInAmonth);\n    setPotentialSavingsInYear(percentSavingsInAyear);\n    setPotentialSavingsInWeek(percentSavingsInAweek);\n    setPotentialSavingsInAday(percentSavingsInAday);\n    const carbonMunicipalValue = parseFloat(props.carbonMunicipalValue);\n    const kilosOfMonthlyCO2saved = (percentSavingsForCoverWaste + percentSavingsForPreparationWaste + percentSavingsForSpoilageWaste) * carbonMunicipalValue;\n    const mealsSaved = (percentSavingsForCoverWaste + percentSavingsForPreparationWaste + percentSavingsForSpoilageWaste) / 0.36; // console.log(\"percentSavingsForCoverWaste\",percentSavingsForCoverWaste)\n    // console.log(\"percentSavingsForPreparationWaste\",percentSavingsForPreparationWaste)\n    // console.log(\"percentSavingsForSpoilageWaste\",percentSavingsForSpoilageWaste)\n\n    const totalPercentagedSavingsTotal = parseFloat(percentSavingsForCoverWaste + percentSavingsForPreparationWaste + percentSavingsForSpoilageWaste);\n    const coverBreakDown = parseInt(coverWaste - percentSavingsForCoverWaste);\n    const spoilageBreakDown = parseInt(spoilageWaste - percentSavingsForSpoilageWaste);\n    const prepBreakDown = parseInt(preparationWaste - percentSavingsForPreparationWaste);\n    const yearlyKilosOfCO2saved = parseInt(kilosOfMonthlyCO2saved * 12);\n    const yearlyMealsSaved = parseInt(mealsSaved * 12);\n    setKiloOfCO2SavedYearlyDisplay(yearlyKilosOfCO2saved);\n    setNumberOfMealsSavedYearlyDisplay(yearlyMealsSaved); // console.log(\"totalCSPforPreviousMonth\",totalCSPforPreviousMonth)\n    // console.log(\"totalPercentagedSavingsTotal\",totalPercentagedSavingsTotal)\n\n    const recommendTarget = parseInt(totalCSPforPreviousMonth - totalPercentagedSavingsTotal);\n    const percents = (totalPercentagedSavingsTotal / totalCSPforPreviousMonth * 100).toFixed(0);\n    setRecommendTargetDisplay(recommendTarget); // setPercentaged(percents)\n    // console.log(\"percentSavingsInAday\",percentSavingsInAday)\n    // console.log(\"percentSavingsInAweek\",percentSavingsInAweek)\n    // console.log(\"percentSavingsInAmonth\",percentSavingsInAmonth)\n    // console.log(\"percentSavingsInAyear\",percentSavingsInAyear)\n    // console.log(\"yearlyKilosOfCO2saved\",yearlyKilosOfCO2saved)\n    // console.log(\"yearlyMealsSaved\",yearlyMealsSaved)\n    // console.log(\"percentaged\",percentaged)\n    // console.log(\"recommendTarget\",recommendTarget)\n    // console.log(\"totalCSPforPreviousMonth\",totalCSPforPreviousMonth)\n    // console.log(\"totalPercentagedSavingsTotal\",totalPercentagedSavingsTotal)\n    // console.log(\"coverBreakDown\",coverBreakDown)\n    // console.log(\"spoilageBreakDown\",spoilageBreakDown)\n    // console.log(\"prepBreakDown\",prepBreakDown)\n\n    const values = {\n      percentSavingsInAday,\n      percentSavingsInAweek,\n      percentSavingsInAmonth,\n      percentSavingsInAyear,\n      yearlyKilosOfCO2saved,\n      yearlyMealsSaved,\n      percents,\n      recommendTarget,\n      totalCSPforPreviousMonth,\n      totalPercentagedSavingsTotal,\n      coverBreakDown,\n      spoilageBreakDown,\n      prepBreakDown\n    };\n    console.log(\"values\", values);\n    setSendToDataBase(values);\n  };\n\n  const saveTargets = () => {\n    const data = {\n      targets: sendToDataBase,\n      companyname: props.companyName,\n      siteID: props.selectedSiteValueID,\n      companyId: props.companyID\n    };\n    console.log(\"data\", data);\n    postTargets(data).then(() => {\n      console.log(\"props\", props);\n      props.updateValues(\"TARGETS\");\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard settings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings--wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings--title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 15\n    }\n  }, \"CALCULATE FOOD WASTE SAVINGS\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings--subHeading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 15\n    }\n  }, \"See the potential impact on your bottom line\"), /*#__PURE__*/React.createElement(Menus, {\n    handleChange: handleChange,\n    checkActiveStep: checkActiveStep,\n    poundsKGconverter: poundsKGconverter,\n    savingPercentage: savingPercentage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings--current--targets\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings--wrapper-recommend-targets\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings--title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 15\n    }\n  }, \"RECOMMENDED TARGETS FOR CSP WASTE\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings--subHeading marginBottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 15\n    }\n  }, \"Yearly, monthly, weekly and daily targets\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"target__calculatorResults--styling\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"displayFlex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 15\n    }\n  }, \"Potential savings could be \\xA3 \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 73\n    }\n  }, roundedUpNumberAndTurnBackToNumber(potentialSavingsInAday)), \" daily\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"displayFlex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 15\n    }\n  }, \"Potential savings could be \\xA3 \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 73\n    }\n  }, roundedUpNumberAndTurnBackToNumber(potentialSavingsInWeek)), \" in a week\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"displayFlex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 15\n    }\n  }, \"Potential savings could be \\xA3 \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 73\n    }\n  }, roundedUpNumberAndTurnBackToNumber(potentialSavingsInMonth)), \" in a month\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"displayFlex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 15\n    }\n  }, \"Potential savings could be \\xA3 \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 73\n    }\n  }, roundedUpNumberAndTurnBackToNumber(potentialSavingsInYear)), \" in a year\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"displayFlex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 15\n    }\n  }, \"Equivalent of \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 58\n    }\n  }, kiloOfCO2SavedYearlyDisplay), \" KG of CO2 saved in a year\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"displayFlex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 15\n    }\n  }, \"Equivalent of \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 58\n    }\n  }, numberOfMealsSavedYearlyDisplay), \" number of meals saved in a year\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"displayFlex settings__recommendedTargets\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings__recommendedTargets__text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 17\n    }\n  }, \"Recommended target of\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 19\n    }\n  }, \" \", isNaN(percentagedSavingsTotal / cspWasteOfPreviousMonth) ? 0 : roundedUpNumberAndTurnBackToNumber(percentagedSavingsTotal / cspWasteOfPreviousMonth * 100), \" \"), \"% MONTHLY CSP WASTE :\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"displayFlex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 19\n    }\n  }, recommendTargetDisplay), \" \", \"KG\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 19\n    }\n  }, roundedUpNumberTwoPointsAndTurnBackToString(cspWasteOfPreviousMonth)), \" \", \"- \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 21\n    }\n  }, roundedUpNumberTwoPointsAndTurnBackToString(percentagedSavingsTotal)), \" (percentaged savings)\", \" \")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"displayFlex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings__recommendedTargets__exampleBreakDown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 17\n    }\n  }, \"Example breakdown\", \" \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 19\n    }\n  }, roundedUpNumberTwoPointsAndTurnBackToString(coverBreakDown)), \"(\", labels.titleLabels.c, \")\", /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 19\n    }\n  }, \"+\"), \" \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 19\n    }\n  }, roundedUpNumberTwoPointsAndTurnBackToString(spoilageBreakDown)), \"(\", labels.titleLabels.s, \")\", /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 19\n    }\n  }, \"+\"), \" \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 19\n    }\n  }, roundedUpNumberTwoPointsAndTurnBackToString(prepBreakDown)), \"(\", labels.titleLabels.p, \")\"))))))));\n}","map":{"version":3,"sources":["/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/targets/targets-calculator.js"],"names":["React","useState","useEffect","useContext","Menus","getMonths","roundedUpNumberTwoPointsAndTurnBackToString","roundedUpNumberAndTurnBackToNumber","MonthlyWasteContext","WasteLabelsContext","postTargets","getLastYearMonthlyWaste","Settings","props","currentMonthCoverWasteArray","currentMonthPrepWasteArray","currentMonthSpoilageWasteArray","labels","potentialSavingsInAday","setPotentialSavingsInAday","potentialSavingsInWeek","setPotentialSavingsInWeek","potentialSavingsInMonth","setPotentialSavingsInMonth","potentialSavingsInYear","setPotentialSavingsInYear","kiloOfCO2SavedYearlyDisplay","setKiloOfCO2SavedYearlyDisplay","numberOfMealsSavedYearlyDisplay","setNumberOfMealsSavedYearlyDisplay","cspWasteOfPreviousMonth","setCspWasteOfPreviousMonth","percentagedSavingsTotal","setPercentagedSavingsTotal","coverBreakDown","setCoverBreakDown","prepBreakDown","setPrepBreakDown","spoilageBreakDown","setSpoilageBreakDown","poundsKGconverter","setPoundsKGconverter","savingPercentage","setSavingPercentage","JSON","parse","localStorage","getItem","sendToDataBase","setSendToDataBase","recommendTargetDisplay","setRecommendTargetDisplay","percentaged","recommendedTargets","map","data","targets","percentSavingsInAday","percentSavingsInAweek","percentSavingsInAmonth","percentSavingsInAyear","recommendTarget","totalPercentagedSavingsTotal","totalCSPforPreviousMonth","yearlyKilosOfCO2saved","yearlyMealsSaved","companyID","companyName","selectedSiteValueID","handleChange","name","value","showResults","checkActiveStep","saveTargets","monthNumber","previousMonthNumber","coverWaste","preparationWaste","spoilageWaste","parseInt","then","monthlyValue","monthly","console","log","percentSavingsForCoverWaste","parseFloat","percentSavingsForPreparationWaste","percentSavingsForSpoilageWaste","carbonMunicipalValue","kilosOfMonthlyCO2saved","mealsSaved","percents","toFixed","values","companyname","siteID","companyId","updateValues","isNaN","titleLabels","c","s","p"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport Menus from \"./targets-menu\"\nimport {\n  getMonths,\n  roundedUpNumberTwoPointsAndTurnBackToString,\n  roundedUpNumberAndTurnBackToNumber,\n} from \"../../../../utilities\"\n\nimport { MonthlyWasteContext } from \"../../../../contexts/monthly-waste-context\";\nimport { WasteLabelsContext } from \"../../../../contexts/waste-labels-context\";\n\nimport {\n    postTargets,\n    getLastYearMonthlyWaste,\n    // getTargets\n} from \"../../../../api.js\";\n\nexport default function Settings(props) {\n\n  const { currentMonthCoverWasteArray, currentMonthPrepWasteArray, currentMonthSpoilageWasteArray } = useContext(MonthlyWasteContext);\n\n  const { labels } = useContext(WasteLabelsContext);\n\n  const [potentialSavingsInAday, setPotentialSavingsInAday] = useState(0);\n  const [potentialSavingsInWeek, setPotentialSavingsInWeek] = useState(0);\n  const [potentialSavingsInMonth, setPotentialSavingsInMonth] = useState(0);\n  const [potentialSavingsInYear, setPotentialSavingsInYear] = useState(0);\n\n  const [kiloOfCO2SavedYearlyDisplay, setKiloOfCO2SavedYearlyDisplay] = useState(0);\n  const [numberOfMealsSavedYearlyDisplay, setNumberOfMealsSavedYearlyDisplay] = useState(0);\n\n  const [cspWasteOfPreviousMonth, setCspWasteOfPreviousMonth] = useState(0);\n  const [percentagedSavingsTotal, setPercentagedSavingsTotal] = useState(0);\n\n  const [coverBreakDown, setCoverBreakDown] = useState(0);\n  const [prepBreakDown, setPrepBreakDown] = useState(0);\n  const [spoilageBreakDown, setSpoilageBreakDown] = useState(0);\n\n  // const [poundsKGconverter, setPoundsKGconverter] = React.useState(2.075);\n  const [poundsKGconverter, setPoundsKGconverter] = React.useState(2.775);\n  const [savingPercentage, setSavingPercentage] = React.useState(JSON.parse(localStorage.getItem('targets')) || 0.0);\n\n  const [sendToDataBase, setSendToDataBase] = useState(null);\n\n  const [recommendTargetDisplay, setRecommendTargetDisplay] = useState(null);\n  // const [percentagedDisplay, setPercentaged] = useState(null);\n\n  let percentaged = 0.3\n\n  useEffect(() => {\n\n    // let id = props.companyID\n    // let company = props.companyName\n    // let siteid = props.selectedSiteValueID\n    // console.log(\"id\",id)\n    // console.log(\"company\",company)\n    // console.log(\"siteid\",siteid)\n    // console.log(\"here props\",props)\n\n    props.recommendedTargets.map((data) => {\n      setPotentialSavingsInAday(data.recommendedTargets.targets.percentSavingsInAday)\n      setPotentialSavingsInWeek(data.recommendedTargets.targets.percentSavingsInAweek)\n      setPotentialSavingsInMonth(data.recommendedTargets.targets.percentSavingsInAmonth)\n      setPotentialSavingsInYear(data.recommendedTargets.targets.percentSavingsInAyear)\n\n      setCoverBreakDown(data.recommendedTargets.targets.coverBreakDown)\n      setPrepBreakDown(data.recommendedTargets.targets.prepBreakDown)\n      setSpoilageBreakDown(data.recommendedTargets.targets.spoilageBreakDown)\n\n      setRecommendTargetDisplay(data.recommendedTargets.targets.recommendTarget)\n\n      setPercentagedSavingsTotal(data.recommendedTargets.targets.totalPercentagedSavingsTotal)\n      setCspWasteOfPreviousMonth(data.recommendedTargets.targets.totalCSPforPreviousMonth)\n\n      setKiloOfCO2SavedYearlyDisplay(data.recommendedTargets.targets.yearlyKilosOfCO2saved)\n      setNumberOfMealsSavedYearlyDisplay(data.recommendedTargets.targets.yearlyMealsSaved)\n\n      // const percentagedSavingsTotal = data.recommendedTargets.targets.totalPercentagedSavingsTotal\n      // const cspWasteOfPreviousMonth = data.recommendedTargets.targets.totalCSPforPreviousMonth\n\n      // setPercentaged(((percentagedSavingsTotal / cspWasteOfPreviousMonth) * 100))\n      return \"\"\n    });\n\n       // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.companyID, props.companyName, props.selectedSiteValueID, props.recommendedTargets]);\n\n  const handleChange = (name, value) => {\n    if (name === \"sectors\") {\n        setPoundsKGconverter(value);\n    } else if (name === \"savings\") {\n        setSavingPercentage(value);\n        percentaged = value\n        showResults(percentaged)\n    }\n  }\n\n  const checkActiveStep = (data) => {\n    if (data === 0) {\n      if (sendToDataBase !== null) {\n        saveTargets()\n      }\n    }\n\n    // if (data === 1) {\n    //   if (sendToDataBase !== null) {\n    //     saveTargets()\n    //   }\n    // }\n  }\n\n  const showResults = (percentaged) => {\n\n    const monthNumber = getMonths();\n\n    let previousMonthNumber = 5;\n    let coverWaste = 0\n    let preparationWaste = 0\n    let spoilageWaste = 0\n    let totalCSPforPreviousMonth = 0;\n\n    if (monthNumber === 0) {\n      previousMonthNumber = 11;\n    } else {\n      previousMonthNumber = monthNumber - 1\n    }\n\n    //1)Get the previous months cover, prep, spoilage and total CSP\n    if (previousMonthNumber < 11) {\n        coverWaste = currentMonthCoverWasteArray[previousMonthNumber]\n        preparationWaste = currentMonthPrepWasteArray[previousMonthNumber]\n        spoilageWaste = currentMonthSpoilageWasteArray[previousMonthNumber]\n        totalCSPforPreviousMonth = parseInt(coverWaste + preparationWaste + spoilageWaste);\n    } else {\n      //if monthNumber is 0 you want to get array value in index 11 from last year list\n      getLastYearMonthlyWaste(props.companyID, props.companyName, props.selectedSiteValueID).then((data) => {\n        coverWaste = data[0].monthlyValue.monthly.coverWaste[11]\n        preparationWaste = data[0].monthlyValue.monthly.preparationWaste[11]\n        spoilageWaste = data[0].monthlyValue.monthly.spoilageWaste[11]\n        totalCSPforPreviousMonth = parseInt(coverWaste + preparationWaste + spoilageWaste);\n      });\n    }\n\n    //1)\n    // get the percentage of savings the person wants\n    // Get the previous months cover, prep, spoilage and total CSP\n\n    console.log(\"previous coverWaste\",coverWaste)\n    console.log(\"previous preparationWaste\",preparationWaste)\n    console.log(\"previous spoilageWaste\",spoilageWaste)\n    console.log(\"previous totalCSPforPreviousMonth\",totalCSPforPreviousMonth)\n    console.log(\"this is the percentaged selected on the form percentaged\",percentaged)\n\n    setCspWasteOfPreviousMonth(totalCSPforPreviousMonth)\n\n\n    //2) workout  the percentages of savings for CSP = C + S+ P\n    const percentSavingsForCoverWaste = roundedUpNumberAndTurnBackToNumber(coverWaste * parseFloat(percentaged))\n    const percentSavingsForPreparationWaste = roundedUpNumberAndTurnBackToNumber(preparationWaste * parseFloat(percentaged))\n    const percentSavingsForSpoilageWaste = roundedUpNumberAndTurnBackToNumber(spoilageWaste * parseFloat(percentaged))\n\n    console.log(\"The calculation is monthly cover waste x percentages of savings\",percentSavingsForCoverWaste)\n    console.log(\"The calculation is monthly prep waste x percentages of savings\",percentSavingsForPreparationWaste)\n    console.log(\"The calculation is monthly spoilage waste x percentages of savings\",percentSavingsForSpoilageWaste)\n\n    setPercentagedSavingsTotal(percentSavingsForCoverWaste + percentSavingsForPreparationWaste + percentSavingsForSpoilageWaste)\n\n    console.log(\"Add all calculations up to get total CSP percentages saving\", percentSavingsForCoverWaste + percentSavingsForPreparationWaste + percentSavingsForSpoilageWaste)\n\n    setCoverBreakDown(coverWaste - percentSavingsForCoverWaste)\n    setPrepBreakDown(preparationWaste - percentSavingsForPreparationWaste)\n    setSpoilageBreakDown(spoilageWaste - percentSavingsForSpoilageWaste)\n\n    const percentSavingsInAmonth = parseInt((percentSavingsForCoverWaste + percentSavingsForPreparationWaste + percentSavingsForSpoilageWaste) * poundsKGconverter);\n    const percentSavingsInAyear = parseInt(percentSavingsInAmonth * 12)\n    const percentSavingsInAweek = parseInt(percentSavingsInAmonth / 4)\n    const percentSavingsInAday = parseInt(percentSavingsInAmonth / 30)\n\n    setPotentialSavingsInMonth(percentSavingsInAmonth)\n    setPotentialSavingsInYear(percentSavingsInAyear)\n    setPotentialSavingsInWeek(percentSavingsInAweek)\n    setPotentialSavingsInAday(percentSavingsInAday)\n\n    const carbonMunicipalValue = parseFloat(props.carbonMunicipalValue);\n\n    const kilosOfMonthlyCO2saved = (percentSavingsForCoverWaste + percentSavingsForPreparationWaste + percentSavingsForSpoilageWaste) * carbonMunicipalValue;\n\n    const mealsSaved = (percentSavingsForCoverWaste + percentSavingsForPreparationWaste + percentSavingsForSpoilageWaste) / 0.36\n\n    // console.log(\"percentSavingsForCoverWaste\",percentSavingsForCoverWaste)\n    // console.log(\"percentSavingsForPreparationWaste\",percentSavingsForPreparationWaste)\n    // console.log(\"percentSavingsForSpoilageWaste\",percentSavingsForSpoilageWaste)\n\n    const totalPercentagedSavingsTotal = parseFloat(percentSavingsForCoverWaste + percentSavingsForPreparationWaste + percentSavingsForSpoilageWaste)\n\n    const coverBreakDown = parseInt(coverWaste - percentSavingsForCoverWaste)\n    const spoilageBreakDown = parseInt(spoilageWaste - percentSavingsForSpoilageWaste)\n    const prepBreakDown = parseInt(preparationWaste - percentSavingsForPreparationWaste)\n\n    const yearlyKilosOfCO2saved = parseInt(kilosOfMonthlyCO2saved * 12);\n    const yearlyMealsSaved = parseInt(mealsSaved * 12);\n\n    setKiloOfCO2SavedYearlyDisplay(yearlyKilosOfCO2saved)\n    setNumberOfMealsSavedYearlyDisplay(yearlyMealsSaved)\n\n    // console.log(\"totalCSPforPreviousMonth\",totalCSPforPreviousMonth)\n    // console.log(\"totalPercentagedSavingsTotal\",totalPercentagedSavingsTotal)\n\n    const recommendTarget = parseInt(totalCSPforPreviousMonth - totalPercentagedSavingsTotal)\n\n    const percents = ((totalPercentagedSavingsTotal / totalCSPforPreviousMonth) * 100).toFixed(0)\n    setRecommendTargetDisplay(recommendTarget)\n    // setPercentaged(percents)\n\n    // console.log(\"percentSavingsInAday\",percentSavingsInAday)\n    // console.log(\"percentSavingsInAweek\",percentSavingsInAweek)\n    // console.log(\"percentSavingsInAmonth\",percentSavingsInAmonth)\n    // console.log(\"percentSavingsInAyear\",percentSavingsInAyear)\n    // console.log(\"yearlyKilosOfCO2saved\",yearlyKilosOfCO2saved)\n    // console.log(\"yearlyMealsSaved\",yearlyMealsSaved)\n    // console.log(\"percentaged\",percentaged)\n    // console.log(\"recommendTarget\",recommendTarget)\n    // console.log(\"totalCSPforPreviousMonth\",totalCSPforPreviousMonth)\n    // console.log(\"totalPercentagedSavingsTotal\",totalPercentagedSavingsTotal)\n    // console.log(\"coverBreakDown\",coverBreakDown)\n    // console.log(\"spoilageBreakDown\",spoilageBreakDown)\n    // console.log(\"prepBreakDown\",prepBreakDown)\n\n    const values = {\n        percentSavingsInAday,\n        percentSavingsInAweek,\n        percentSavingsInAmonth,\n        percentSavingsInAyear,\n        yearlyKilosOfCO2saved,\n        yearlyMealsSaved,\n        percents,\n        recommendTarget,\n        totalCSPforPreviousMonth,\n        totalPercentagedSavingsTotal,\n        coverBreakDown,\n        spoilageBreakDown,\n        prepBreakDown\n    }\n\n    console.log(\"values\",values);\n\n    setSendToDataBase(values)\n  }\n\n  const saveTargets = () => {\n    const data = {\n        targets: sendToDataBase,\n        companyname: props.companyName,\n        siteID: props.selectedSiteValueID,\n        companyId: props.companyID\n    }\n\n    console.log(\"data\",data);\n\n    postTargets(data).then(() => {\n      console.log(\"props\",props);\n      props.updateValues(\"TARGETS\")\n    })\n\n  }\n\n  return (\n      <>\n        <div className=\"dashboard settings\">\n            <div className=\"settings--wrapper\">\n              <div className=\"settings--title\">CALCULATE FOOD WASTE SAVINGS</div>\n              <div className=\"settings--subHeading\">See the potential impact on your bottom line</div>\n              <Menus\n                handleChange={handleChange}\n                checkActiveStep={checkActiveStep}\n                poundsKGconverter={poundsKGconverter}\n                savingPercentage={savingPercentage}\n                />\n\n\n          <div className=\"settings--current--targets\">\n            <div className=\"settings--wrapper-recommend-targets\">\n              <div className=\"settings--title\">RECOMMENDED TARGETS FOR CSP WASTE</div>\n              <div className=\"settings--subHeading marginBottom\">Yearly, monthly, weekly and daily targets</div>\n\n              <div className=\"target__calculatorResults--styling\">\n              <div className=\"displayFlex\">Potential savings could be £ <div className=\"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\">{roundedUpNumberAndTurnBackToNumber(potentialSavingsInAday)}</div> daily</div>\n              <div className=\"displayFlex\">Potential savings could be £ <div className=\"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\">{roundedUpNumberAndTurnBackToNumber(potentialSavingsInWeek)}</div> in a week</div>\n              <div className=\"displayFlex\">Potential savings could be £ <div className=\"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\">{roundedUpNumberAndTurnBackToNumber(potentialSavingsInMonth)}</div> in a month</div>\n              <div className=\"displayFlex\">Potential savings could be £ <div className=\"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\">{roundedUpNumberAndTurnBackToNumber(potentialSavingsInYear)}</div> in a year</div>\n              <br />\n              <div className=\"displayFlex\">Equivalent of <div className=\"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\">{kiloOfCO2SavedYearlyDisplay}</div> KG of CO2 saved in a year</div>\n              <div className=\"displayFlex\">Equivalent of <div className=\"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\">{numberOfMealsSavedYearlyDisplay}</div> number of meals saved in a year</div>\n              <br />\n\n              <div className=\"displayFlex settings__recommendedTargets\">\n                <div className=\"settings__recommendedTargets__text\">\n                  Recommended target of\n                  <div className=\"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\"> {isNaN(percentagedSavingsTotal / cspWasteOfPreviousMonth) ? 0 : roundedUpNumberAndTurnBackToNumber((percentagedSavingsTotal / cspWasteOfPreviousMonth) * 100)} </div>\n                  % MONTHLY CSP WASTE :\n                </div>\n\n                <div className=\"displayFlex\">\n                  <div className=\"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\">{recommendTargetDisplay}</div>\n                  {\" \"}\n                  KG\n                  <br />\n                  <div className=\"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\">\n                  {roundedUpNumberTwoPointsAndTurnBackToString(cspWasteOfPreviousMonth)}\n                  </div>\n                  {\" \"}\n                  - <div className=\"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\">{roundedUpNumberTwoPointsAndTurnBackToString(percentagedSavingsTotal)}</div> (percentaged savings)\n                  {\" \"}\n                </div>\n\n              </div>\n              <br />\n\n              <div className=\"displayFlex\">\n                <div className=\"settings__recommendedTargets__exampleBreakDown\">\n                  Example breakdown\n                  {\" \"}\n                  <div className=\"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\">\n                  {roundedUpNumberTwoPointsAndTurnBackToString(coverBreakDown)}\n                  </div>\n                  ({labels.titleLabels.c})\n                  <div>\n                   +\n                  </div>\n                  {\" \"}\n                  <div className=\"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\">\n                  {roundedUpNumberTwoPointsAndTurnBackToString(spoilageBreakDown)}\n                  </div>\n                  ({labels.titleLabels.s})\n                  <div>\n                   +\n                  </div>\n                  {\" \"}\n                  <div className=\"applyPurpleColor cooperHewittBold applyMarginRightAndLeft\">\n                  {roundedUpNumberTwoPointsAndTurnBackToString(prepBreakDown)}\n                  </div>\n                  ({labels.titleLabels.p})\n                </div>\n              </div>\n\n            </div>\n            </div>\n          </div>\n\n            </div>\n        </div>\n      </>\n\n  );\n}\n"]},"metadata":{},"sourceType":"module"}