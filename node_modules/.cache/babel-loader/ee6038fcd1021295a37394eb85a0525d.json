{"ast":null,"code":"import { useState } from \"react\";\nimport useSpinner from \"./use-spinner\";\nimport moment from \"moment\";\nimport { getWastePerCover, getWastePerSales, getMonthlyWastes, getAllSitesData, getWeeklyWaste, getTargets, getAiPredictionData, getCapping, getDailyAndWeeklyDatesData, getCoverInput, getSalesInput } from \"../../../api\";\nimport { setItemInLocalStorage, convertDate, wasteDailyDateRange } from \"../../../utilities.js\";\n\nconst useGetRequests = () => {\n  const [spinner, showSpinner, hideSpinner] = useSpinner(); //CALL WASTE PER COVER\n\n  const [wastePerCover, setWastePerCover] = useState([]);\n  const [searchError, setSearchError] = useState(null);\n  const [selectedYear, setSelectedYear] = useState(0);\n  const [selectedMonth, setSelectedMonth] = useState(0);\n\n  const callWastePerCover = (id, company, site, month, year) => {\n    getWastePerCover(id, company, site, month, year).then(data => {\n      setSelectedYear(year);\n      hideSpinner();\n      setWastePerCover(data);\n      setSearchError(null);\n    }).catch(err => {\n      hideSpinner();\n      setWastePerCover(null);\n      setSearchError(err.message);\n    });\n  }; //CALL WASTE PER SALES\n\n\n  const [wastePerSales, setWastePerSales] = useState([]);\n  const [searchErrorForWastePerSales, setSearchErrorForWastePerSales] = useState(null);\n  const [selectedYearForWastePerSales, setSelectedYearForWastePerSales] = useState(0);\n\n  const callWastePerSales = (id, company, site, month, year) => {\n    getWastePerSales(id, company, site, month, year).then(data => {\n      setSelectedYearForWastePerSales(year);\n      hideSpinner();\n      setWastePerSales(data);\n      setSearchErrorForWastePerSales(null);\n    }).catch(err => {\n      hideSpinner();\n      setWastePerSales(null);\n      setSearchErrorForWastePerSales(err.message);\n    });\n  }; //CALL MONTHLY WASTE\n\n\n  const [coverWasteInCurrentMonth, setCoverWasteInCurrentMonth] = useState(0);\n  const [preparationWasteInCurrentMonth, setPreparationWasteInCurrentMonth] = useState(0);\n  const [spoilageWasteInCurrentMonth, setSpoilageWasteInCurrentMonth] = useState(0);\n  const [currentMonthCoverWasteArray, setCurrentMonthCoverWasteArray] = useState(0);\n  const [currentMonthPrepWasteArray, setCurrentMonthPrepWasteArray] = useState(0);\n  const [currentMonthSpoilageWasteArray, setCurrentMonthSpoilageWasteArray] = useState(0);\n  const [coverMonthlyChanges, setCoverMonthlyChanges] = useState(0);\n  const [prepMonthlyChanges, setPrepMonthlyChanges] = useState(0);\n  const [spoilageMonthlyChanges, setSpoilageMonthlyChanges] = useState(0);\n  const [monthlyChanges, setMonthlyChanges] = useState([0]);\n\n  const callMonthlyWastesAPI = (companyNumber, companyName, siteID) => {\n    getMonthlyWastes(companyNumber, companyName, siteID).then(data => {\n      setCoverWasteInCurrentMonth(data.coverWasteInCurrentMonth);\n      setPreparationWasteInCurrentMonth(data.preparationWasteInCurrentMonth);\n      setSpoilageWasteInCurrentMonth(data.spoilageWasteInCurrentMonth);\n      setCurrentMonthCoverWasteArray(data.currentMonthCoverWasteArray);\n      setCurrentMonthPrepWasteArray(data.currentMonthPrepWasteArray);\n      setCurrentMonthSpoilageWasteArray(data.currentMonthSpoilageWasteArray);\n      setCoverMonthlyChanges(data.coverMonthlyChanges);\n      setPrepMonthlyChanges(data.prepMonthlyChanges);\n      setSpoilageMonthlyChanges(data.spoilageMonthlyChanges);\n      setMonthlyChanges(data.monthlyChanges);\n    }).then(() => {\n      hideSpinner();\n    });\n  }; //CALL ALL SITES DATA\n\n\n  const [allSites, setAllSites] = useState([]);\n  const [totalWasteFromSelectedSite, setTotalWasteFromSelectedSite] = useState([]);\n\n  const getAllSites = (companyId, companyName, siteId) => {\n    getAllSitesData(companyId, companyName).then(data => {\n      const selectedValue = data.filter(item => {\n        return item.siteName === siteId;\n      });\n      setAllSites(data);\n      setTotalWasteFromSelectedSite(selectedValue);\n    });\n  }; // CALL WEEKLY WASTE API\n\n\n  const [weeklyWaste, setWeeklyWaste] = useState(null);\n  const [weeklyTrend, setWeeklyTrend] = useState(null);\n  const [weeklyWasteValuesForCurrentWeekAndLastWeek, setWeeklyWasteValuesForCurrentWeekAndLastWeek] = useState(null);\n\n  const callWeeklyWasteAPI = (companyId, companyName, companySite) => {\n    getWeeklyWaste(companyId, companyName, companySite).then(data => {\n      setWeeklyWaste(data.currentWeeklyValues);\n      setWeeklyTrend(data.weeklyWasteTrend);\n      const weeklyWasteValuesForCurrentWeekAndLastWeekData = {\n        currentWeek: data.currentWeeklyValues,\n        lastWeek: data.lastWeekWasteValues\n      };\n      setWeeklyWasteValuesForCurrentWeekAndLastWeek(weeklyWasteValuesForCurrentWeekAndLastWeekData);\n    });\n  }; //TARGETS RECOMMENDATION\n\n\n  const [recommendedTargets, setRecommendedTargets] = useState([]);\n\n  const getTargetsData = (id, company, site) => {\n    getTargets(id, company, site).then(data => {\n      // console.log(\"getTargets\",data.Items)\n      setRecommendedTargets(data.Items);\n    });\n  }; //AI PREDICTION\n\n\n  const [aiPredictionsData, setAiPredictionsData] = useState([]);\n\n  const getAiPrediction = (id, company, site) => {\n    getAiPredictionData(id, company, site).then(data => {\n      setAiPredictionsData(data);\n    });\n  }; //CAPPING API\n\n\n  const [cappingValue, setCappingValue] = useState(0);\n\n  const callGetCappingAPI = (companyId, companyName, companySite) => {\n    getCapping(companyId, companyName, companySite).then(data => {\n      setCappingValue(data);\n    });\n  }; //daily and hourly\n\n\n  const [dailyWaste, setDailyWaste] = useState([]);\n  const [hourlyWaste, sethourlyWaste] = useState([]); //mon-sun x-axis labels\n\n  const [weeklyDailyLabels, setWeeklyDaysLabels] = useState([]); //date range e..g 12-19 July\n\n  const [weeklyDailyRange, setWeeklyDaysRange] = useState([]);\n\n  const callDailyAndWeeklyDatesData = (id, company, site, indexNumber) => {\n    getDailyAndWeeklyDatesData(id, company, site).then(data => {\n      let formatedXaxis = convertDate(data.weeklyData);\n      let dateRangeLabel = wasteDailyDateRange(data.weeklyData);\n      setWeeklyDaysLabels(formatedXaxis);\n      setWeeklyDaysRange(dateRangeLabel);\n      setItemInLocalStorage(\"dailyChartXaxis\", data.weeklyData);\n      setItemInLocalStorage(\"formatedXaxis\", formatedXaxis);\n      setDailyWaste({\n        coverWaste: data.dailyCoverWasteArrayFormated,\n        prepWaste: data.dailyPrepWasteArrayFormated,\n        spoilageWaste: data.dailySpoilageWasteArrayFormated,\n        totalWaste: data.totalDailyWaste,\n        weeklyDates: data.weeklyData\n      });\n      const date = new Date();\n      const numberInDay = date.getDay();\n      let indexForNumberInDay = 0;\n\n      if (numberInDay === 0) {\n        indexForNumberInDay = 6;\n      } else {\n        indexForNumberInDay = numberInDay - 1;\n      } // let index = indexNumber;\n\n\n      let index = indexNumber ? indexNumber : indexForNumberInDay; // console.log(\"indexForNumberInDay\",indexForNumberInDay)\n      // console.log(\"index\",index)\n\n      sethourlyWaste({\n        hourlyWaste: data.hourlyWastesWeeklyArray,\n        index: index,\n        date: data.weeklyData[indexForNumberInDay]\n      });\n    });\n  }; //call input for covers and sales\n\n\n  const [thisWeekCoverInputs, setThisWeekCoverInputs] = useState({\n    salesInput: [0, 0, 0, 0, 0, 0, 0],\n    Date: \"\",\n    weekOfYear: \"\"\n  });\n  const [thisWeekSalesInput, setThisWeekSalesInputs] = useState({\n    salesInput: [0, 0, 0, 0, 0, 0, 0],\n    Date: \"\",\n    weekOfYear: \"\"\n  });\n  const [allWeekSalesInput, setAllWeekSalesInputs] = useState([]);\n  const [allWeekCoverInput, setAllWeekCoverInputs] = useState([]);\n\n  const callCoverInput = (companyID, companyName, siteNameSelected) => {\n    getCoverInput(companyID, companyName, siteNameSelected).then(data => {\n      const formatedDate = moment().format('MM-DD-YYYY');\n      const weeknumber = moment(formatedDate, \"MMDDYYYY\").isoWeek();\n      const getThisWeekCoverInput = data[0].weeklyCovers.filter(data => {\n        return parseInt(data.weekOfYear) === weeknumber;\n      });\n      setAllWeekCoverInputs(data[0].weeklyCovers);\n      setThisWeekCoverInputs(getThisWeekCoverInput);\n    });\n  };\n\n  const callSalesInput = (companyID, companyName, siteNameSelected) => {\n    getSalesInput(companyID, companyName, siteNameSelected).then(data => {\n      const formatedDate = moment().format('MM-DD-YYYY');\n      const weeknumber = moment(formatedDate, \"MMDDYYYY\").isoWeek();\n      const getThisWeekSalesInput = data[0].weeklySales.filter(data => {\n        return parseInt(data.weekOfYear) === weeknumber;\n      });\n      setAllWeekSalesInputs(data[0].weeklySales);\n      setThisWeekSalesInputs(getThisWeekSalesInput);\n    });\n  }; //call get waste on a day of the week\n  // const [wasteOnAdayOfTheWeekData, setWasteOnAdayOfTheWeek] = useState([]);\n  // const getWasteOnAdayOfTheWeekAPI = (id, company, site, day, year) => {\n  //   getWasteOnAdayOfTheWeek(id, company, site, day, year).then((data) => {\n  //     setWasteOnAdayOfTheWeek(data)\n  //   });\n  // };\n\n\n  return {\n    //call input for covers and sales\n    callCoverInput,\n    callSalesInput,\n    thisWeekCoverInputs,\n    thisWeekSalesInput,\n    allWeekSalesInput,\n    allWeekCoverInput,\n    //daily and hourly\n    callDailyAndWeeklyDatesData,\n    dailyWaste,\n    hourlyWaste,\n    //CAPPING API\n    callGetCappingAPI,\n    cappingValue,\n    //AI PREDICTION\n    getAiPrediction,\n    aiPredictionsData,\n    //TARGETS RECOMMENDATION\n    getTargetsData,\n    recommendedTargets,\n    // CALL WEEKLY WASTE API\n    callWeeklyWasteAPI,\n    weeklyWaste,\n    weeklyTrend,\n    //MONTHLY WASTE\n    callMonthlyWastesAPI,\n    coverWasteInCurrentMonth,\n    preparationWasteInCurrentMonth,\n    spoilageWasteInCurrentMonth,\n    currentMonthCoverWasteArray,\n    currentMonthPrepWasteArray,\n    currentMonthSpoilageWasteArray,\n    coverMonthlyChanges,\n    prepMonthlyChanges,\n    spoilageMonthlyChanges,\n    monthlyChanges,\n    //WASTE PER COVER\n    callWastePerCover,\n    wastePerCover,\n    //WASTE PER SALES\n    callWastePerSales,\n    wastePerSales,\n    searchErrorForWastePerSales,\n    selectedYearForWastePerSales,\n    searchError,\n    setSearchError,\n    selectedYear,\n    setSelectedYear,\n    selectedMonth,\n    setSelectedMonth,\n    //CALL ALL SITES DATA\n    getAllSites,\n    allSites,\n    totalWasteFromSelectedSite,\n    spinner,\n    showSpinner,\n    hideSpinner,\n    // get waste on a dy of the week\n    // getWasteOnAdayOfTheWeekAPI,\n    // wasteOnAdayOfTheWeekData\n    //mon-sun x-axis labels\n    weeklyDailyLabels,\n    //date range e..g 12-19 July\n    weeklyDailyRange,\n    weeklyWasteValuesForCurrentWeekAndLastWeek\n  };\n};\n\nexport default useGetRequests;","map":{"version":3,"sources":["/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/shared/components/libs/use-get-request.js"],"names":["useState","useSpinner","moment","getWastePerCover","getWastePerSales","getMonthlyWastes","getAllSitesData","getWeeklyWaste","getTargets","getAiPredictionData","getCapping","getDailyAndWeeklyDatesData","getCoverInput","getSalesInput","setItemInLocalStorage","convertDate","wasteDailyDateRange","useGetRequests","spinner","showSpinner","hideSpinner","wastePerCover","setWastePerCover","searchError","setSearchError","selectedYear","setSelectedYear","selectedMonth","setSelectedMonth","callWastePerCover","id","company","site","month","year","then","data","catch","err","message","wastePerSales","setWastePerSales","searchErrorForWastePerSales","setSearchErrorForWastePerSales","selectedYearForWastePerSales","setSelectedYearForWastePerSales","callWastePerSales","coverWasteInCurrentMonth","setCoverWasteInCurrentMonth","preparationWasteInCurrentMonth","setPreparationWasteInCurrentMonth","spoilageWasteInCurrentMonth","setSpoilageWasteInCurrentMonth","currentMonthCoverWasteArray","setCurrentMonthCoverWasteArray","currentMonthPrepWasteArray","setCurrentMonthPrepWasteArray","currentMonthSpoilageWasteArray","setCurrentMonthSpoilageWasteArray","coverMonthlyChanges","setCoverMonthlyChanges","prepMonthlyChanges","setPrepMonthlyChanges","spoilageMonthlyChanges","setSpoilageMonthlyChanges","monthlyChanges","setMonthlyChanges","callMonthlyWastesAPI","companyNumber","companyName","siteID","allSites","setAllSites","totalWasteFromSelectedSite","setTotalWasteFromSelectedSite","getAllSites","companyId","siteId","selectedValue","filter","item","siteName","weeklyWaste","setWeeklyWaste","weeklyTrend","setWeeklyTrend","weeklyWasteValuesForCurrentWeekAndLastWeek","setWeeklyWasteValuesForCurrentWeekAndLastWeek","callWeeklyWasteAPI","companySite","currentWeeklyValues","weeklyWasteTrend","weeklyWasteValuesForCurrentWeekAndLastWeekData","currentWeek","lastWeek","lastWeekWasteValues","recommendedTargets","setRecommendedTargets","getTargetsData","Items","aiPredictionsData","setAiPredictionsData","getAiPrediction","cappingValue","setCappingValue","callGetCappingAPI","dailyWaste","setDailyWaste","hourlyWaste","sethourlyWaste","weeklyDailyLabels","setWeeklyDaysLabels","weeklyDailyRange","setWeeklyDaysRange","callDailyAndWeeklyDatesData","indexNumber","formatedXaxis","weeklyData","dateRangeLabel","coverWaste","dailyCoverWasteArrayFormated","prepWaste","dailyPrepWasteArrayFormated","spoilageWaste","dailySpoilageWasteArrayFormated","totalWaste","totalDailyWaste","weeklyDates","date","Date","numberInDay","getDay","indexForNumberInDay","index","hourlyWastesWeeklyArray","thisWeekCoverInputs","setThisWeekCoverInputs","salesInput","weekOfYear","thisWeekSalesInput","setThisWeekSalesInputs","allWeekSalesInput","setAllWeekSalesInputs","allWeekCoverInput","setAllWeekCoverInputs","callCoverInput","companyID","siteNameSelected","formatedDate","format","weeknumber","isoWeek","getThisWeekCoverInput","weeklyCovers","parseInt","callSalesInput","getThisWeekSalesInput","weeklySales"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport useSpinner from \"./use-spinner\";\nimport moment from \"moment\";\n\nimport {\n  getWastePerCover,\n  getWastePerSales,\n  getMonthlyWastes,\n  getAllSitesData,\n  getWeeklyWaste,\n  getTargets,\n  getAiPredictionData,\n  getCapping,\n  getDailyAndWeeklyDatesData,\n  getCoverInput,\n  getSalesInput,\n} from \"../../../api\";\n\nimport {\n  setItemInLocalStorage,\n  convertDate,\n  wasteDailyDateRange\n} from \"../../../utilities.js\"\n\nconst useGetRequests = () => {\n\n    const [ spinner, showSpinner, hideSpinner ] = useSpinner();\n\n    //CALL WASTE PER COVER\n    const [wastePerCover, setWastePerCover] = useState([]);\n    const [searchError, setSearchError] = useState(null);\n    const [selectedYear, setSelectedYear] = useState(0);\n    const [selectedMonth, setSelectedMonth] = useState(0);\n\n    const callWastePerCover = (id, company, site, month , year) => {\n        getWastePerCover(id, company, site, month , year).then((data) => {\n          setSelectedYear(year)\n          hideSpinner()\n          setWastePerCover(data)\n          setSearchError(null)\n        }).catch((err) => {\n          hideSpinner()\n          setWastePerCover(null)\n          setSearchError(err.message)\n        })\n    };\n\n    //CALL WASTE PER SALES\n    const [wastePerSales, setWastePerSales] = useState([]);\n    const [searchErrorForWastePerSales, setSearchErrorForWastePerSales] = useState(null);\n    const [selectedYearForWastePerSales, setSelectedYearForWastePerSales] = useState(0);\n\n    const callWastePerSales = (id, company, site, month , year) => {\n      getWastePerSales(id, company, site, month , year).then((data) => {\n        setSelectedYearForWastePerSales(year)\n        hideSpinner()\n        setWastePerSales(data)\n        setSearchErrorForWastePerSales(null)\n      }).catch((err) => {\n        hideSpinner()\n        setWastePerSales(null)\n        setSearchErrorForWastePerSales(err.message)\n      })\n    };\n\n    //CALL MONTHLY WASTE\n    const [coverWasteInCurrentMonth, setCoverWasteInCurrentMonth] = useState(0);\n    const [preparationWasteInCurrentMonth, setPreparationWasteInCurrentMonth] = useState(0);\n    const [spoilageWasteInCurrentMonth, setSpoilageWasteInCurrentMonth] = useState(0);\n\n    const [currentMonthCoverWasteArray, setCurrentMonthCoverWasteArray] = useState(0);\n    const [currentMonthPrepWasteArray, setCurrentMonthPrepWasteArray] = useState(0);\n    const [currentMonthSpoilageWasteArray, setCurrentMonthSpoilageWasteArray] = useState(0);\n\n    const [coverMonthlyChanges, setCoverMonthlyChanges] = useState(0);\n    const [prepMonthlyChanges, setPrepMonthlyChanges] = useState(0);\n    const [spoilageMonthlyChanges, setSpoilageMonthlyChanges] = useState(0);\n    const [monthlyChanges, setMonthlyChanges] = useState([0]);\n\n    const callMonthlyWastesAPI = (companyNumber, companyName, siteID) => {\n      getMonthlyWastes(companyNumber, companyName, siteID).then((data) => {\n        setCoverWasteInCurrentMonth(data.coverWasteInCurrentMonth)\n        setPreparationWasteInCurrentMonth(data.preparationWasteInCurrentMonth)\n        setSpoilageWasteInCurrentMonth(data.spoilageWasteInCurrentMonth)\n\n        setCurrentMonthCoverWasteArray(data.currentMonthCoverWasteArray)\n        setCurrentMonthPrepWasteArray(data.currentMonthPrepWasteArray)\n        setCurrentMonthSpoilageWasteArray(data.currentMonthSpoilageWasteArray)\n\n        setCoverMonthlyChanges(data.coverMonthlyChanges)\n        setPrepMonthlyChanges(data.prepMonthlyChanges)\n        setSpoilageMonthlyChanges(data.spoilageMonthlyChanges)\n        setMonthlyChanges(data.monthlyChanges)\n      }).then(() => {\n        hideSpinner();\n      })\n    }\n\n    //CALL ALL SITES DATA\n    const [allSites, setAllSites] = useState([]);\n    const [totalWasteFromSelectedSite, setTotalWasteFromSelectedSite] = useState([]);\n\n    const getAllSites = (companyId, companyName, siteId) => {\n      getAllSitesData(companyId, companyName).then((data) => {\n\n        const selectedValue = data.filter((item) => {\n          return item.siteName === siteId;\n        });\n\n        setAllSites(data)\n        setTotalWasteFromSelectedSite(selectedValue)\n      })\n    }\n\n    // CALL WEEKLY WASTE API\n    const [weeklyWaste, setWeeklyWaste] = useState(null);\n    const [weeklyTrend, setWeeklyTrend] = useState(null);\n    const [weeklyWasteValuesForCurrentWeekAndLastWeek, setWeeklyWasteValuesForCurrentWeekAndLastWeek] = useState(null);\n\n    const callWeeklyWasteAPI = (companyId, companyName, companySite) => {\n      getWeeklyWaste(companyId, companyName, companySite).then((data) => {\n        setWeeklyWaste(data.currentWeeklyValues);\n        setWeeklyTrend(data.weeklyWasteTrend);\n\n        const weeklyWasteValuesForCurrentWeekAndLastWeekData = {\n          currentWeek: data.currentWeeklyValues,\n          lastWeek: data.lastWeekWasteValues\n        }\n\n        setWeeklyWasteValuesForCurrentWeekAndLastWeek(weeklyWasteValuesForCurrentWeekAndLastWeekData);\n\n      });\n    }\n\n    //TARGETS RECOMMENDATION\n    const [ recommendedTargets, setRecommendedTargets ] = useState([]);\n\n    const getTargetsData = (id, company, site) => {\n      getTargets(id, company, site).then((data) => {\n        // console.log(\"getTargets\",data.Items)\n        setRecommendedTargets(data.Items)\n      });\n    };\n\n    //AI PREDICTION\n    const [ aiPredictionsData, setAiPredictionsData ] = useState([]);\n    const getAiPrediction = (id, company, site) => {\n      getAiPredictionData(id, company, site).then((data) => {\n        setAiPredictionsData(data)\n      });\n    };\n\n    //CAPPING API\n    const [ cappingValue, setCappingValue ] = useState(0)\n    const callGetCappingAPI = (companyId, companyName, companySite) => {\n      getCapping(companyId, companyName, companySite).then((data) =>{\n        setCappingValue(data)\n      });\n    }\n\n    //daily and hourly\n    const [ dailyWaste, setDailyWaste ] = useState([]);\n    const [ hourlyWaste, sethourlyWaste ] = useState([]);\n\n    //mon-sun x-axis labels\n    const [ weeklyDailyLabels, setWeeklyDaysLabels ] = useState([]);\n\n    //date range e..g 12-19 July\n    const [ weeklyDailyRange, setWeeklyDaysRange ] = useState([]);\n\n    const callDailyAndWeeklyDatesData = (id, company, site, indexNumber) => {\n      getDailyAndWeeklyDatesData(id, company, site).then((data) => {\n\n\n        let formatedXaxis = convertDate(data.weeklyData);\n        let dateRangeLabel = wasteDailyDateRange(data.weeklyData);\n\n        setWeeklyDaysLabels(formatedXaxis);\n        setWeeklyDaysRange(dateRangeLabel)\n\n        setItemInLocalStorage(\"dailyChartXaxis\", data.weeklyData);\n        setItemInLocalStorage(\"formatedXaxis\", formatedXaxis);\n\n        setDailyWaste({\n          coverWaste: data.dailyCoverWasteArrayFormated,\n          prepWaste: data.dailyPrepWasteArrayFormated,\n          spoilageWaste: data.dailySpoilageWasteArrayFormated,\n          totalWaste: data.totalDailyWaste,\n          weeklyDates: data.weeklyData\n        })\n\n        const date = new Date();\n        const numberInDay = date.getDay();\n\n        let indexForNumberInDay = 0;\n\n        if (numberInDay === 0) {\n          indexForNumberInDay = 6\n        } else {\n          indexForNumberInDay = numberInDay - 1\n        }\n\n        // let index = indexNumber;\n        let index = indexNumber ? indexNumber: indexForNumberInDay\n\n        // console.log(\"indexForNumberInDay\",indexForNumberInDay)\n        // console.log(\"index\",index)\n\n        sethourlyWaste({\n          hourlyWaste: data.hourlyWastesWeeklyArray,\n          index: index,\n          date: data.weeklyData[indexForNumberInDay]\n        })\n      });\n    };\n\n    //call input for covers and sales\n    const [thisWeekCoverInputs, setThisWeekCoverInputs] = useState({\n      salesInput: [0, 0, 0, 0, 0, 0, 0],\n      Date: \"\",\n      weekOfYear: \"\"\n    });\n    const [thisWeekSalesInput, setThisWeekSalesInputs] = useState({\n      salesInput: [0, 0, 0, 0, 0, 0, 0],\n      Date: \"\",\n      weekOfYear: \"\"\n    });\n\n    const [allWeekSalesInput, setAllWeekSalesInputs] = useState([]);\n    const [allWeekCoverInput, setAllWeekCoverInputs] = useState([]);\n\n    const callCoverInput = (companyID, companyName, siteNameSelected) => {\n      getCoverInput(companyID, companyName, siteNameSelected).then((data) => {\n        const formatedDate = moment().format('MM-DD-YYYY');\n        const weeknumber = moment(formatedDate, \"MMDDYYYY\").isoWeek();\n        const getThisWeekCoverInput = data[0].weeklyCovers.filter((data) => {\n          return parseInt(data.weekOfYear) === weeknumber;\n        });\n\n        setAllWeekCoverInputs(data[0].weeklyCovers);\n\n        setThisWeekCoverInputs(getThisWeekCoverInput);\n      })\n    };\n\n    const callSalesInput = (companyID, companyName, siteNameSelected) => {\n      getSalesInput(companyID, companyName, siteNameSelected).then((data) => {\n        const formatedDate = moment().format('MM-DD-YYYY');\n        const weeknumber = moment(formatedDate, \"MMDDYYYY\").isoWeek();\n        const getThisWeekSalesInput = data[0].weeklySales.filter((data) => {\n          return parseInt(data.weekOfYear) === weeknumber;\n        });\n\n        setAllWeekSalesInputs(data[0].weeklySales);\n\n        setThisWeekSalesInputs(getThisWeekSalesInput);\n      })\n    }\n\n    //call get waste on a day of the week\n    // const [wasteOnAdayOfTheWeekData, setWasteOnAdayOfTheWeek] = useState([]);\n\n    // const getWasteOnAdayOfTheWeekAPI = (id, company, site, day, year) => {\n    //   getWasteOnAdayOfTheWeek(id, company, site, day, year).then((data) => {\n    //     setWasteOnAdayOfTheWeek(data)\n    //   });\n    // };\n\n    return {\n      //call input for covers and sales\n      callCoverInput,\n      callSalesInput,\n      thisWeekCoverInputs,\n      thisWeekSalesInput,\n      allWeekSalesInput,\n      allWeekCoverInput,\n\n      //daily and hourly\n      callDailyAndWeeklyDatesData,\n      dailyWaste,\n      hourlyWaste,\n\n      //CAPPING API\n      callGetCappingAPI,\n      cappingValue,\n\n      //AI PREDICTION\n      getAiPrediction,\n      aiPredictionsData,\n\n      //TARGETS RECOMMENDATION\n      getTargetsData,\n      recommendedTargets,\n\n      // CALL WEEKLY WASTE API\n      callWeeklyWasteAPI,\n      weeklyWaste,\n      weeklyTrend,\n\n      //MONTHLY WASTE\n      callMonthlyWastesAPI,\n      coverWasteInCurrentMonth,\n      preparationWasteInCurrentMonth,\n      spoilageWasteInCurrentMonth,\n      currentMonthCoverWasteArray,\n      currentMonthPrepWasteArray,\n      currentMonthSpoilageWasteArray,\n      coverMonthlyChanges,\n      prepMonthlyChanges,\n      spoilageMonthlyChanges,\n      monthlyChanges,\n\n      //WASTE PER COVER\n      callWastePerCover,\n      wastePerCover,\n\n      //WASTE PER SALES\n      callWastePerSales,\n      wastePerSales,\n      searchErrorForWastePerSales,\n      selectedYearForWastePerSales,\n\n      searchError,\n      setSearchError,\n\n      selectedYear,\n      setSelectedYear,\n      selectedMonth,\n      setSelectedMonth,\n\n      //CALL ALL SITES DATA\n      getAllSites,\n      allSites,\n      totalWasteFromSelectedSite,\n\n      spinner,\n      showSpinner,\n      hideSpinner,\n\n      // get waste on a dy of the week\n      // getWasteOnAdayOfTheWeekAPI,\n      // wasteOnAdayOfTheWeekData\n\n      //mon-sun x-axis labels\n      weeklyDailyLabels,\n      //date range e..g 12-19 July\n      weeklyDailyRange,\n\n      weeklyWasteValuesForCurrentWeekAndLastWeek\n    }\n\n}\n\nexport default useGetRequests"]},"metadata":{},"sourceType":"module"}