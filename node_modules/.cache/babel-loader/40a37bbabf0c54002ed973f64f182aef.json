{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/contexts/ai-prediction-data-context.js\";\nimport React, { createContext, useEffect, useState } from 'react';\nimport { getMonthsWord } from \"./../utilities.js\";\nexport const AiPredictionDataContext = createContext();\n\nconst AiPredictionDataContextProvider = props => {\n  const [month, setMonthWaste] = React.useState(\"\");\n  const [aiPredictionsYearlyCoverWaste, setAiPredictionsYearlyCoverWaste] = React.useState([]);\n  const [aiPredictionsYearlyPrepWaste, setAiPredictionsYearlyPrepWaste] = React.useState([]);\n  const [aiPredictionsYearlySpoilageWaste, setAiPredictionsYearlySpoilageWaste] = React.useState([]);\n  const [aiPredictionsMonthlyCoverWaste, setAiPredictionsMonthlyCoverWaste] = React.useState([]);\n  const [aiPredictionsMonthlyPrepWaste, setAiPredictionsMonthlyPrepWaste] = React.useState([]);\n  const [aiPredictionsMonthlySpoilageWaste, setAiPredictionsMonthlySpoilageWaste] = React.useState([]);\n  const [aiPredictionsWeeklyCoverWaste, setAiPredictionsWeeklyCoverWaste] = React.useState([]);\n  const [aiPredictionsWeeklyPrepWaste, setAiPredictionsWeeklyPrepWaste] = React.useState([]);\n  const [aiPredictionsWeeklySpoilageWaste, setAiPredictionsWeeklySpoilageWaste] = React.useState([]);\n  const [aiPredictionsDailyCoverWaste, setAiPredictionsDailyCoverWaste] = React.useState([]);\n  const [aiPredictionsDailyPrepWaste, setAiPredictionsDailyPrepWaste] = React.useState([]);\n  const [aiPredictionsDailySpoilageWaste, setAiPredictionsDailySpoilageWaste] = React.useState([]);\n  const [aiPredictionsDisplayValueForCoverWaste, setAiPredictionsDisplayValueForCoverWaste] = React.useState([]);\n  const [aiPredictionsDisplayValueForPrepWaste, setAiPredictionsDisplayValueForPrepWaste] = React.useState([]);\n  const [aiPredictionsDisplayValueForSpoilageWaste, setAiPredictionsDisplayValueForSpoilageWaste] = React.useState([]);\n  const [aiPredictionsActiveState, aiPredictionsChangeActiveState] = useState({\n    monthlyForcasts: true,\n    weeklyForcasts: false,\n    dailyForcasts: false,\n    yearlyForcasts: false\n  });\n  const [aiPredictionsAppState, aiPredictionsChangeState] = useState({\n    activeObject: {\n      id: 0,\n      val: \"monthlyFrocasts\",\n      name: \"Monthly\"\n    },\n    objects: [{\n      id: 0,\n      val: \"monthlyFrocasts\",\n      name: \"Monthly\"\n    }, {\n      id: 1,\n      val: \"weeklyFrocasts\",\n      name: \"Weekly\"\n    }, {\n      id: 2,\n      val: \"dailyFrocasts\",\n      name: \"Daily\"\n    }, {\n      id: 3,\n      val: \"yearlyFrocasts\",\n      name: \"Yearly\"\n    }]\n  });\n  useEffect(() => {\n    // console.log(\"aiPredictionsData\", props.aiPredictionsData)\n    filterAiPredictionsData(props.aiPredictionsData);\n  }, [props.aiPredictionsData]);\n\n  function aiPredictionsToggleActive(type) {\n    switch (type) {\n      case \"monthlyForcasts\":\n        aiPredictionsChangeActiveState({\n          monthlyForcasts: true,\n          weeklyForcasts: false,\n          dailyForcasts: false,\n          yearlyForcasts: false\n        });\n        aiPredictionsChangeState({ ...aiPredictionsAppState,\n          activeObject: aiPredictionsAppState.objects[0]\n        });\n        setAiPredictionsDisplayValueForCoverWaste(aiPredictionsMonthlyCoverWaste);\n        setAiPredictionsDisplayValueForPrepWaste(aiPredictionsMonthlyPrepWaste);\n        setAiPredictionsDisplayValueForSpoilageWaste(aiPredictionsMonthlySpoilageWaste);\n        break;\n\n      case \"weeklyForcasts\":\n        aiPredictionsChangeActiveState({\n          monthlyForcasts: false,\n          weeklyForcasts: true,\n          dailyForcasts: false,\n          yearlyForcasts: false\n        });\n        aiPredictionsChangeState({ ...aiPredictionsAppState,\n          activeObject: aiPredictionsAppState.objects[1]\n        });\n        setAiPredictionsDisplayValueForCoverWaste(aiPredictionsWeeklyCoverWaste);\n        setAiPredictionsDisplayValueForPrepWaste(aiPredictionsWeeklyPrepWaste);\n        setAiPredictionsDisplayValueForSpoilageWaste(aiPredictionsWeeklySpoilageWaste);\n        break;\n\n      case \"dailyForcasts\":\n        aiPredictionsChangeActiveState({\n          monthlyForcasts: false,\n          weeklyForcasts: false,\n          dailyForcasts: true,\n          yearlyForcasts: false\n        });\n        aiPredictionsChangeState({ ...aiPredictionsAppState,\n          activeObject: aiPredictionsAppState.objects[2]\n        });\n        setAiPredictionsDisplayValueForCoverWaste(aiPredictionsDailyCoverWaste);\n        setAiPredictionsDisplayValueForPrepWaste(aiPredictionsDailyPrepWaste);\n        setAiPredictionsDisplayValueForSpoilageWaste(aiPredictionsDailySpoilageWaste);\n        break;\n\n      case \"yearlyForcasts\":\n        aiPredictionsChangeActiveState({\n          monthlyForcasts: false,\n          weeklyForcasts: false,\n          dailyForcasts: false,\n          yearlyForcasts: true\n        });\n        aiPredictionsChangeState({ ...aiPredictionsAppState,\n          activeObject: aiPredictionsAppState.objects[3]\n        });\n        setAiPredictionsDisplayValueForCoverWaste(aiPredictionsYearlyCoverWaste);\n        setAiPredictionsDisplayValueForPrepWaste(aiPredictionsYearlyPrepWaste);\n        setAiPredictionsDisplayValueForSpoilageWaste(aiPredictionsYearlySpoilageWaste);\n        break;\n\n      default:\n    }\n  }\n\n  const filterAiPredictionsData = data => {\n    aiPredictionsChangeActiveState({\n      monthlyForcasts: true,\n      weeklyForcasts: false,\n      dailyForcasts: false,\n      yearlyForcasts: false\n    });\n    data.map(item => {\n      setAiPredictionsYearlyCoverWaste(item.aiPrediction.yearlyForcastsBasedOnCurrentMonth.coverWaste);\n      setAiPredictionsYearlyPrepWaste(item.aiPrediction.yearlyForcastsBasedOnCurrentMonth.preparationWaste);\n      setAiPredictionsYearlySpoilageWaste(item.aiPrediction.yearlyForcastsBasedOnCurrentMonth.spoilageWaste);\n      setAiPredictionsMonthlyCoverWaste(item.aiPrediction.monthlyForcastsBasedOnCurrentMonth.coverWaste);\n      setAiPredictionsMonthlyPrepWaste(item.aiPrediction.monthlyForcastsBasedOnCurrentMonth.preparationWaste);\n      setAiPredictionsMonthlySpoilageWaste(item.aiPrediction.monthlyForcastsBasedOnCurrentMonth.spoilageWaste);\n      setAiPredictionsWeeklyCoverWaste(item.aiPrediction.weeklylyForcastsBasedOnCurrentMonth.coverWaste);\n      setAiPredictionsWeeklyPrepWaste(item.aiPrediction.weeklylyForcastsBasedOnCurrentMonth.preparationWaste);\n      setAiPredictionsWeeklySpoilageWaste(item.aiPrediction.weeklylyForcastsBasedOnCurrentMonth.spoilageWaste);\n      setAiPredictionsDailyCoverWaste(item.aiPrediction.dailyForcastsBasedOnCurrentMonth.coverWaste);\n      setAiPredictionsDailyPrepWaste(item.aiPrediction.dailyForcastsBasedOnCurrentMonth.preparationWaste);\n      setAiPredictionsDailySpoilageWaste(item.aiPrediction.dailyForcastsBasedOnCurrentMonth.spoilageWaste);\n      setAiPredictionsDisplayValueForCoverWaste(item.aiPrediction.monthlyForcastsBasedOnCurrentMonth.coverWaste);\n      setAiPredictionsDisplayValueForPrepWaste(item.aiPrediction.monthlyForcastsBasedOnCurrentMonth.preparationWaste);\n      setAiPredictionsDisplayValueForSpoilageWaste(item.aiPrediction.monthlyForcastsBasedOnCurrentMonth.spoilageWaste);\n      return \"\";\n    });\n    const month = getMonthsWord();\n    const monthInUpperCase = month.toUpperCase();\n    setMonthWaste(monthInUpperCase);\n  };\n\n  return /*#__PURE__*/React.createElement(AiPredictionDataContext.Provider, {\n    value: {\n      aiPredictionsDisplayValueForCoverWaste,\n      aiPredictionsDisplayValueForPrepWaste,\n      aiPredictionsDisplayValueForSpoilageWaste,\n      aiPredictionsActiveState,\n      aiPredictionsToggleActive,\n      month\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default AiPredictionDataContextProvider;","map":{"version":3,"sources":["/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/contexts/ai-prediction-data-context.js"],"names":["React","createContext","useEffect","useState","getMonthsWord","AiPredictionDataContext","AiPredictionDataContextProvider","props","month","setMonthWaste","aiPredictionsYearlyCoverWaste","setAiPredictionsYearlyCoverWaste","aiPredictionsYearlyPrepWaste","setAiPredictionsYearlyPrepWaste","aiPredictionsYearlySpoilageWaste","setAiPredictionsYearlySpoilageWaste","aiPredictionsMonthlyCoverWaste","setAiPredictionsMonthlyCoverWaste","aiPredictionsMonthlyPrepWaste","setAiPredictionsMonthlyPrepWaste","aiPredictionsMonthlySpoilageWaste","setAiPredictionsMonthlySpoilageWaste","aiPredictionsWeeklyCoverWaste","setAiPredictionsWeeklyCoverWaste","aiPredictionsWeeklyPrepWaste","setAiPredictionsWeeklyPrepWaste","aiPredictionsWeeklySpoilageWaste","setAiPredictionsWeeklySpoilageWaste","aiPredictionsDailyCoverWaste","setAiPredictionsDailyCoverWaste","aiPredictionsDailyPrepWaste","setAiPredictionsDailyPrepWaste","aiPredictionsDailySpoilageWaste","setAiPredictionsDailySpoilageWaste","aiPredictionsDisplayValueForCoverWaste","setAiPredictionsDisplayValueForCoverWaste","aiPredictionsDisplayValueForPrepWaste","setAiPredictionsDisplayValueForPrepWaste","aiPredictionsDisplayValueForSpoilageWaste","setAiPredictionsDisplayValueForSpoilageWaste","aiPredictionsActiveState","aiPredictionsChangeActiveState","monthlyForcasts","weeklyForcasts","dailyForcasts","yearlyForcasts","aiPredictionsAppState","aiPredictionsChangeState","activeObject","id","val","name","objects","filterAiPredictionsData","aiPredictionsData","aiPredictionsToggleActive","type","data","map","item","aiPrediction","yearlyForcastsBasedOnCurrentMonth","coverWaste","preparationWaste","spoilageWaste","monthlyForcastsBasedOnCurrentMonth","weeklylyForcastsBasedOnCurrentMonth","dailyForcastsBasedOnCurrentMonth","monthInUpperCase","toUpperCase","children"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from 'react'\n\nimport { getMonthsWord } from \"./../utilities.js\"\n\n\nexport const AiPredictionDataContext = createContext()\n\nconst AiPredictionDataContextProvider = props => {\n\n  const [ month, setMonthWaste ] = React.useState(\"\")\n\n  const [ aiPredictionsYearlyCoverWaste, setAiPredictionsYearlyCoverWaste ] = React.useState([])\n  const [ aiPredictionsYearlyPrepWaste, setAiPredictionsYearlyPrepWaste ] = React.useState([])\n  const [ aiPredictionsYearlySpoilageWaste, setAiPredictionsYearlySpoilageWaste ] = React.useState([])\n\n  const [ aiPredictionsMonthlyCoverWaste, setAiPredictionsMonthlyCoverWaste ] = React.useState([])\n  const [ aiPredictionsMonthlyPrepWaste, setAiPredictionsMonthlyPrepWaste ] = React.useState([])\n  const [ aiPredictionsMonthlySpoilageWaste, setAiPredictionsMonthlySpoilageWaste ] = React.useState([])\n\n  const [ aiPredictionsWeeklyCoverWaste, setAiPredictionsWeeklyCoverWaste ] = React.useState([])\n  const [ aiPredictionsWeeklyPrepWaste, setAiPredictionsWeeklyPrepWaste ] = React.useState([])\n  const [ aiPredictionsWeeklySpoilageWaste, setAiPredictionsWeeklySpoilageWaste ] = React.useState([])\n\n  const [ aiPredictionsDailyCoverWaste, setAiPredictionsDailyCoverWaste ] = React.useState([])\n  const [ aiPredictionsDailyPrepWaste, setAiPredictionsDailyPrepWaste ] = React.useState([])\n  const [ aiPredictionsDailySpoilageWaste, setAiPredictionsDailySpoilageWaste ] = React.useState([])\n\n  const [ aiPredictionsDisplayValueForCoverWaste, setAiPredictionsDisplayValueForCoverWaste ] = React.useState([])\n  const [ aiPredictionsDisplayValueForPrepWaste, setAiPredictionsDisplayValueForPrepWaste ] = React.useState([])\n  const [ aiPredictionsDisplayValueForSpoilageWaste, setAiPredictionsDisplayValueForSpoilageWaste ] = React.useState([])\n\n  const [aiPredictionsActiveState, aiPredictionsChangeActiveState] = useState({\n    monthlyForcasts: true,\n    weeklyForcasts: false,\n    dailyForcasts: false,\n    yearlyForcasts: false,\n  });\n\n  const [aiPredictionsAppState, aiPredictionsChangeState] = useState({\n    activeObject: {\n      id: 0,\n      val: \"monthlyFrocasts\",\n      name: \"Monthly\",\n    },\n    objects: [\n      { id: 0, val: \"monthlyFrocasts\", name: \"Monthly\" },\n      { id: 1, val: \"weeklyFrocasts\", name: \"Weekly\" },\n      { id: 2, val: \"dailyFrocasts\", name: \"Daily\" },\n      { id: 3, val: \"yearlyFrocasts\", name: \"Yearly\" },\n    ],\n  });\n\n\n  useEffect(() => {\n    // console.log(\"aiPredictionsData\", props.aiPredictionsData)\n    filterAiPredictionsData(props.aiPredictionsData)\n  },[props.aiPredictionsData])\n\n  function aiPredictionsToggleActive(type) {\n\n    switch (type) {\n      case \"monthlyForcasts\":\n\n        aiPredictionsChangeActiveState({\n          monthlyForcasts: true,\n          weeklyForcasts: false,\n          dailyForcasts: false,\n          yearlyForcasts: false,\n        });\n        aiPredictionsChangeState({ ...aiPredictionsAppState, activeObject: aiPredictionsAppState.objects[0] });\n\n        setAiPredictionsDisplayValueForCoverWaste(aiPredictionsMonthlyCoverWaste)\n        setAiPredictionsDisplayValueForPrepWaste(aiPredictionsMonthlyPrepWaste)\n        setAiPredictionsDisplayValueForSpoilageWaste(aiPredictionsMonthlySpoilageWaste)\n\n        break;\n      case \"weeklyForcasts\":\n\n        aiPredictionsChangeActiveState({\n          monthlyForcasts: false,\n          weeklyForcasts: true,\n          dailyForcasts: false,\n          yearlyForcasts: false,\n        });\n        aiPredictionsChangeState({ ...aiPredictionsAppState, activeObject: aiPredictionsAppState.objects[1] });\n\n        setAiPredictionsDisplayValueForCoverWaste(aiPredictionsWeeklyCoverWaste)\n        setAiPredictionsDisplayValueForPrepWaste(aiPredictionsWeeklyPrepWaste)\n        setAiPredictionsDisplayValueForSpoilageWaste(aiPredictionsWeeklySpoilageWaste)\n\n        break;\n      case \"dailyForcasts\":\n\n        aiPredictionsChangeActiveState({\n          monthlyForcasts: false,\n          weeklyForcasts: false,\n          dailyForcasts: true,\n          yearlyForcasts: false,\n        });\n        aiPredictionsChangeState({ ...aiPredictionsAppState, activeObject: aiPredictionsAppState.objects[2] });\n\n        setAiPredictionsDisplayValueForCoverWaste(aiPredictionsDailyCoverWaste)\n        setAiPredictionsDisplayValueForPrepWaste(aiPredictionsDailyPrepWaste)\n        setAiPredictionsDisplayValueForSpoilageWaste(aiPredictionsDailySpoilageWaste)\n\n        break;\n      case \"yearlyForcasts\":\n\n        aiPredictionsChangeActiveState({\n          monthlyForcasts: false,\n          weeklyForcasts: false,\n          dailyForcasts: false,\n          yearlyForcasts: true,\n        });\n        aiPredictionsChangeState({ ...aiPredictionsAppState, activeObject: aiPredictionsAppState.objects[3] });\n\n        setAiPredictionsDisplayValueForCoverWaste(aiPredictionsYearlyCoverWaste)\n        setAiPredictionsDisplayValueForPrepWaste(aiPredictionsYearlyPrepWaste)\n        setAiPredictionsDisplayValueForSpoilageWaste(aiPredictionsYearlySpoilageWaste)\n\n        break;\n      default:\n    }\n  }\n\n  const filterAiPredictionsData = (data) => {\n\n    aiPredictionsChangeActiveState({\n      monthlyForcasts: true,\n      weeklyForcasts: false,\n      dailyForcasts: false,\n      yearlyForcasts: false,\n    });\n\n    data.map((item) => {\n      setAiPredictionsYearlyCoverWaste(item.aiPrediction.yearlyForcastsBasedOnCurrentMonth.coverWaste)\n      setAiPredictionsYearlyPrepWaste(item.aiPrediction.yearlyForcastsBasedOnCurrentMonth.preparationWaste)\n      setAiPredictionsYearlySpoilageWaste(item.aiPrediction.yearlyForcastsBasedOnCurrentMonth.spoilageWaste)\n\n      setAiPredictionsMonthlyCoverWaste(item.aiPrediction.monthlyForcastsBasedOnCurrentMonth.coverWaste)\n      setAiPredictionsMonthlyPrepWaste(item.aiPrediction.monthlyForcastsBasedOnCurrentMonth.preparationWaste)\n      setAiPredictionsMonthlySpoilageWaste(item.aiPrediction.monthlyForcastsBasedOnCurrentMonth.spoilageWaste)\n\n      setAiPredictionsWeeklyCoverWaste(item.aiPrediction.weeklylyForcastsBasedOnCurrentMonth.coverWaste)\n      setAiPredictionsWeeklyPrepWaste(item.aiPrediction.weeklylyForcastsBasedOnCurrentMonth.preparationWaste)\n      setAiPredictionsWeeklySpoilageWaste(item.aiPrediction.weeklylyForcastsBasedOnCurrentMonth.spoilageWaste)\n\n      setAiPredictionsDailyCoverWaste(item.aiPrediction.dailyForcastsBasedOnCurrentMonth.coverWaste)\n      setAiPredictionsDailyPrepWaste(item.aiPrediction.dailyForcastsBasedOnCurrentMonth.preparationWaste)\n      setAiPredictionsDailySpoilageWaste(item.aiPrediction.dailyForcastsBasedOnCurrentMonth.spoilageWaste)\n\n      setAiPredictionsDisplayValueForCoverWaste(item.aiPrediction.monthlyForcastsBasedOnCurrentMonth.coverWaste)\n      setAiPredictionsDisplayValueForPrepWaste(item.aiPrediction.monthlyForcastsBasedOnCurrentMonth.preparationWaste)\n      setAiPredictionsDisplayValueForSpoilageWaste(item.aiPrediction.monthlyForcastsBasedOnCurrentMonth.spoilageWaste)\n      return \"\"\n    })\n\n    const month = getMonthsWord()\n    const monthInUpperCase = month.toUpperCase()\n    setMonthWaste(monthInUpperCase);\n  }\n\n  return (\n    <AiPredictionDataContext.Provider\n      value={{\n        aiPredictionsDisplayValueForCoverWaste,\n        aiPredictionsDisplayValueForPrepWaste,\n        aiPredictionsDisplayValueForSpoilageWaste,\n        aiPredictionsActiveState,\n        aiPredictionsToggleActive,\n        month,\n      }}\n    >\n      {props.children}\n    </AiPredictionDataContext.Provider>\n  )\n}\n\nexport default AiPredictionDataContextProvider"]},"metadata":{},"sourceType":"module"}