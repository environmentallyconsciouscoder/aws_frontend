{"ast":null,"code":"var _jsxFileName = \"/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/live-feeds/live-feed-graph.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { formatSiteName } from \"../../../../utilities.js\";\nimport Subheadings from \"../reuseable-components/labels/subheadings\";\nimport { Bar } from \"react-chartjs-2\";\nimport Pagination from \"./../reuseable-components/pagination/pagination.js\";\nimport { LiveFeedContext } from \"../../../../contexts/live-feed-context\";\nexport default function DailySalesVsWasteReport(props) {\n  const {\n    dataForGraph,\n    maxValue,\n    numberOfWeeks,\n    questions,\n    sampleTotal,\n    weekCommence,\n    allWeeksOfTheYear,\n    siteName,\n    companyName,\n    companyId,\n    callLiveFeedContent,\n    index\n  } = useContext(LiveFeedContext);\n  let graphHeight = 500;\n  let graphWidth = 1100;\n\n  const changePageForWeeks = ({\n    selected\n  }) => {\n    callLiveFeedContent(companyId, companyName, siteName, allWeeksOfTheYear[selected]);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dailyWasteChart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"originalTheme__reportBackgroundColor addPaddingOfHalveRem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Subheadings, {\n    site: formatSiteName(siteName),\n    title: \"Live Green Feeds - Survey Weekly\",\n    date: \"w/c\" + \" \" + weekCommence,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyBlueTuckGreen cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, \"Survey Results\")), /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: [1, 2, 3, 4, \"\", 1, 2, 3, 4, \"\", 1, 2, 3, 4, \"\", 1, 2, 3, 4],\n      datasets: [{\n        data: dataForGraph,\n        backgroundColor: \"rgb(178, 191, 80)\",\n        minBarLength: 0.3,\n        categoryPercentage: 1.0,\n        barPercentage: 0.5\n      }]\n    },\n    width: graphWidth,\n    height: graphHeight,\n    options: {\n      responsive: true,\n      maintainAspectRatio: true,\n      layout: {\n        padding: {\n          left: 25,\n          right: 25,\n          top: 10,\n          bottom: 10\n        }\n      },\n      scales: {\n        xAxes: [{\n          display: true,\n          gridLines: {\n            display: false\n          },\n          ticks: {\n            autoSkip: false,\n            fontSize: 7\n          }\n        }],\n        yAxes: [{\n          gridLines: {\n            display: false\n          },\n          ticks: {\n            maxTicksLimit: 4,\n            display: false,\n            beginAtZero: true,\n            max: maxValue + 5\n          }\n        }]\n      },\n      plugins: {\n        datalabels: {\n          display: true,\n          color: \"rgb(47, 64, 30)\",\n          anchor: \"end\",\n          align: \"end\",\n          clamp: true,\n          font: {\n            size: 10,\n            weight: 900\n          },\n          offset: 4\n        }\n      },\n      tooltips: {}\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph__message cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, \"1 = Great and 4 = Bad\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyBlueTuckGreen cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"applyBlueTuckGreen cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  }, \"Questions:\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyCooperHewittBold\",\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      justifyContent: \"space-evenly\",\n      color: \"#0f808c\",\n      fontSize: \"12px\",\n      fontWeight: \"bold\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, questions.map((data, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyPurpleColor\",\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }\n  }, data))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"applyBlueTuckGreen cooperHewittBold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }, \"Sample Number:\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyCooperHewittBold\",\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      justifyContent: \"space-evenly\",\n      color: \"#0f808c\",\n      fontSize: \"12px\",\n      fontWeight: \"bold\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, sampleTotal.map((data, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"applyPurpleColor\",\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }\n  }, data))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      padding: \"2rem\",\n      fontSize: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Pagination, {\n    index: index,\n    onPageChange: changePageForWeeks,\n    pageCount: numberOfWeeks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 15\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/james/Documents/CODE/GREENKODE_DASHBOARD/greenkode-dashboard/frontend/greenkode/src/shared/components/containers/live-feeds/live-feed-graph.js"],"names":["React","useState","useContext","useEffect","formatSiteName","Subheadings","Bar","Pagination","LiveFeedContext","DailySalesVsWasteReport","props","dataForGraph","maxValue","numberOfWeeks","questions","sampleTotal","weekCommence","allWeeksOfTheYear","siteName","companyName","companyId","callLiveFeedContent","index","graphHeight","graphWidth","changePageForWeeks","selected","labels","datasets","data","backgroundColor","minBarLength","categoryPercentage","barPercentage","responsive","maintainAspectRatio","layout","padding","left","right","top","bottom","scales","xAxes","display","gridLines","ticks","autoSkip","fontSize","yAxes","maxTicksLimit","beginAtZero","max","plugins","datalabels","color","anchor","align","clamp","font","size","weight","offset","tooltips","flexDirection","justifyContent","fontWeight","map","i"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport { formatSiteName } from \"../../../../utilities.js\";\n\nimport Subheadings from \"../reuseable-components/labels/subheadings\"\n\nimport { Bar } from \"react-chartjs-2\";\n\nimport Pagination from \"./../reuseable-components/pagination/pagination.js\"\n\nimport { LiveFeedContext } from \"../../../../contexts/live-feed-context\";\n\nexport default function DailySalesVsWasteReport(props) {\n\n  const {\n\n    dataForGraph,\n    maxValue,\n    numberOfWeeks,\n    questions,\n    sampleTotal,\n    weekCommence,\n    allWeeksOfTheYear,\n\n    siteName,\n    companyName,\n    companyId,\n\n    callLiveFeedContent,\n    index\n  } = useContext(LiveFeedContext);\n\n  let graphHeight = 500;\n  let graphWidth = 1100;\n\n  const changePageForWeeks = ({ selected }) => {\n\n    callLiveFeedContent(companyId, companyName, siteName, allWeeksOfTheYear[selected]);\n};\n\n  return (\n    <div className= \"dailyWasteChart\">\n        <div className=\"originalTheme__reportBackgroundColor addPaddingOfHalveRem\">\n            <Subheadings\n              site={formatSiteName(siteName)}\n              title=\"Live Green Feeds - Survey Weekly\"\n              date={\"w/c\" + \" \" + weekCommence}\n            />\n\n            <div className=\"applyBlueTuckGreen cooperHewittBold\">\n                <h4 className=\"cooperHewittBold\">Survey Results</h4>\n            </div>\n\n            <Bar\n                  data={{\n                    labels: [1,2,3,4, \"\",1,2,3,4, \"\",1,2,3,4, \"\",1,2,3,4],\n                    datasets: [\n\n                      {\n                        data: dataForGraph,\n                        backgroundColor: \"rgb(178, 191, 80)\",\n                        minBarLength: 0.3,\n                        categoryPercentage: 1.0,\n                        barPercentage: 0.5\n                      },\n\n                    ],\n                  }}\n                  width={graphWidth}\n                  height={graphHeight}\n                  options={{\n\n                    responsive: true,\n                    maintainAspectRatio: true,\n                    layout: {\n                      padding: {\n                          left: 25,\n                          right: 25,\n                          top: 10,\n                          bottom: 10\n                      }\n                    },\n                    scales: {\n                      xAxes: [\n                        {\n                          display: true,\n                          gridLines: {\n                            display: false,\n                          },\n                          ticks: {\n                            autoSkip: false,\n                            fontSize: 7\n                          },\n                        },\n                      ],\n                      yAxes: [\n                        {\n                          gridLines: {\n                            display: false,\n                          },\n                          ticks: {\n                            maxTicksLimit: 4,\n                            display: false,\n                            beginAtZero: true,\n                            max: maxValue + 5\n                          },\n                        },\n                      ],\n                    },\n\n                    plugins: {\n                      datalabels: {\n                        display: true,\n                        color: \"rgb(47, 64, 30)\",\n                        anchor: \"end\",\n                        align: \"end\",\n                        clamp: true,\n                        font: {\n                          size: 10,\n                          weight: 900,\n                        },\n                        offset: 4,\n                      },\n\n                    },\n\n\n                    tooltips: {\n                    }\n\n                  }}\n              />\n\n            <div className=\"graph__row\">\n                <div className=\"graph__message cooperHewittBold\">\n                  1 = Great and 4 = Bad\n                </div>\n            </div>\n\n            <div className=\"applyBlueTuckGreen cooperHewittBold\">\n              <h4 className=\"applyBlueTuckGreen cooperHewittBold\">Questions:</h4>\n            </div>\n\n            <div\n            className=\"applyCooperHewittBold\"\n            style={{\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  justifyContent: \"space-evenly\",\n                  color: \"#0f808c\",\n                  fontSize: \"12px\",\n                  fontWeight: \"bold\",\n            }}>\n              {questions.map((data, i) => (\n                <div className=\"applyPurpleColor\" key={i}>{data}</div>\n              ))}\n            </div>\n\n            <div>\n              <h4 className=\"applyBlueTuckGreen cooperHewittBold\">Sample Number:</h4>\n            </div>\n\n            <div\n            className=\"applyCooperHewittBold\"\n            style={{\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  justifyContent: \"space-evenly\",\n                  color: \"#0f808c\",\n                  fontSize: \"12px\",\n                  fontWeight: \"bold\",\n            }}>\n              {sampleTotal.map((data, i) => (\n                <div className=\"applyPurpleColor\" key={i}>{data}</div>\n              ))}\n            </div>\n\n            <div style={{\n              display: \"flex\",\n              padding: \"2rem\",\n              fontSize: \"10px\"\n            }}>\n              <Pagination index={index} onPageChange={changePageForWeeks} pageCount={numberOfWeeks} />\n            </div>\n\n        </div>\n\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}